// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddInstanceGroups(params *AddInstanceGroupsParams, opts ...ClientOption) (*AddInstanceGroupsOK, error)

	AddInstanceGroupsMlServingApp(params *AddInstanceGroupsMlServingAppParams, opts ...ClientOption) (*AddInstanceGroupsMlServingAppOK, error)

	BackupWorkspace(params *BackupWorkspaceParams, opts ...ClientOption) (*BackupWorkspaceOK, error)

	CreateFileReplica(params *CreateFileReplicaParams, opts ...ClientOption) (*CreateFileReplicaOK, error)

	CreateMlServingApp(params *CreateMlServingAppParams, opts ...ClientOption) (*CreateMlServingAppOK, error)

	CreateModelRegistry(params *CreateModelRegistryParams, opts ...ClientOption) (*CreateModelRegistryOK, error)

	CreateWorkspace(params *CreateWorkspaceParams, opts ...ClientOption) (*CreateWorkspaceOK, error)

	DeleteBackup(params *DeleteBackupParams, opts ...ClientOption) (*DeleteBackupOK, error)

	DeleteFileReplica(params *DeleteFileReplicaParams, opts ...ClientOption) (*DeleteFileReplicaOK, error)

	DeleteInstanceGroup(params *DeleteInstanceGroupParams, opts ...ClientOption) (*DeleteInstanceGroupOK, error)

	DeleteInstanceGroupMlServingApp(params *DeleteInstanceGroupMlServingAppParams, opts ...ClientOption) (*DeleteInstanceGroupMlServingAppOK, error)

	DeleteMlServingApp(params *DeleteMlServingAppParams, opts ...ClientOption) (*DeleteMlServingAppOK, error)

	DeleteModelRegistry(params *DeleteModelRegistryParams, opts ...ClientOption) (*DeleteModelRegistryOK, error)

	DeleteWorkspace(params *DeleteWorkspaceParams, opts ...ClientOption) (*DeleteWorkspaceOK, error)

	DescribeMlServingApp(params *DescribeMlServingAppParams, opts ...ClientOption) (*DescribeMlServingAppOK, error)

	DescribeModelRegistry(params *DescribeModelRegistryParams, opts ...ClientOption) (*DescribeModelRegistryOK, error)

	DescribeWorkspace(params *DescribeWorkspaceParams, opts ...ClientOption) (*DescribeWorkspaceOK, error)

	DescribeWorkspaceBackup(params *DescribeWorkspaceBackupParams, opts ...ClientOption) (*DescribeWorkspaceBackupOK, error)

	FailOverFileSystem(params *FailOverFileSystemParams, opts ...ClientOption) (*FailOverFileSystemOK, error)

	GetAuditEvents(params *GetAuditEventsParams, opts ...ClientOption) (*GetAuditEventsOK, error)

	GetKubeconfig(params *GetKubeconfigParams, opts ...ClientOption) (*GetKubeconfigOK, error)

	GetLatestModelRegistryVersion(params *GetLatestModelRegistryVersionParams, opts ...ClientOption) (*GetLatestModelRegistryVersionOK, error)

	GetLatestWorkspaceVersion(params *GetLatestWorkspaceVersionParams, opts ...ClientOption) (*GetLatestWorkspaceVersionOK, error)

	GetLogs(params *GetLogsParams, opts ...ClientOption) (*GetLogsOK, error)

	GetMlServingAppKubeconfig(params *GetMlServingAppKubeconfigParams, opts ...ClientOption) (*GetMlServingAppKubeconfigOK, error)

	GetModelRegistryKubeconfig(params *GetModelRegistryKubeconfigParams, opts ...ClientOption) (*GetModelRegistryKubeconfigOK, error)

	GrantMlServingAppAccess(params *GrantMlServingAppAccessParams, opts ...ClientOption) (*GrantMlServingAppAccessOK, error)

	GrantModelRegistryAccess(params *GrantModelRegistryAccessParams, opts ...ClientOption) (*GrantModelRegistryAccessOK, error)

	GrantWorkspaceAccess(params *GrantWorkspaceAccessParams, opts ...ClientOption) (*GrantWorkspaceAccessOK, error)

	ListInstanceTypeConfiguration(params *ListInstanceTypeConfigurationParams, opts ...ClientOption) (*ListInstanceTypeConfigurationOK, error)

	ListMlServingAppAccess(params *ListMlServingAppAccessParams, opts ...ClientOption) (*ListMlServingAppAccessOK, error)

	ListMlServingApps(params *ListMlServingAppsParams, opts ...ClientOption) (*ListMlServingAppsOK, error)

	ListModelRegistries(params *ListModelRegistriesParams, opts ...ClientOption) (*ListModelRegistriesOK, error)

	ListModelRegistryAccess(params *ListModelRegistryAccessParams, opts ...ClientOption) (*ListModelRegistryAccessOK, error)

	ListRelevantInstances(params *ListRelevantInstancesParams, opts ...ClientOption) (*ListRelevantInstancesOK, error)

	ListWorkspaceAccess(params *ListWorkspaceAccessParams, opts ...ClientOption) (*ListWorkspaceAccessOK, error)

	ListWorkspaceBackups(params *ListWorkspaceBackupsParams, opts ...ClientOption) (*ListWorkspaceBackupsOK, error)

	ListWorkspaces(params *ListWorkspacesParams, opts ...ClientOption) (*ListWorkspacesOK, error)

	ModifyClusterInstanceGroup(params *ModifyClusterInstanceGroupParams, opts ...ClientOption) (*ModifyClusterInstanceGroupOK, error)

	ModifyClusterSecurity(params *ModifyClusterSecurityParams, opts ...ClientOption) (*ModifyClusterSecurityOK, error)

	ModifyMlServingApp(params *ModifyMlServingAppParams, opts ...ClientOption) (*ModifyMlServingAppOK, error)

	ModifyWorkspaceLoadBalancer(params *ModifyWorkspaceLoadBalancerParams, opts ...ClientOption) (*ModifyWorkspaceLoadBalancerOK, error)

	RefreshModelRegistryConfigmap(params *RefreshModelRegistryConfigmapParams, opts ...ClientOption) (*RefreshModelRegistryConfigmapOK, error)

	RequestWorkflowCancellation(params *RequestWorkflowCancellationParams, opts ...ClientOption) (*RequestWorkflowCancellationOK, error)

	RestoreWorkspace(params *RestoreWorkspaceParams, opts ...ClientOption) (*RestoreWorkspaceOK, error)

	ResumeWorkspace(params *ResumeWorkspaceParams, opts ...ClientOption) (*ResumeWorkspaceOK, error)

	RevokeMlServingAppAccess(params *RevokeMlServingAppAccessParams, opts ...ClientOption) (*RevokeMlServingAppAccessOK, error)

	RevokeModelRegistryAccess(params *RevokeModelRegistryAccessParams, opts ...ClientOption) (*RevokeModelRegistryAccessOK, error)

	RevokeWorkspaceAccess(params *RevokeWorkspaceAccessParams, opts ...ClientOption) (*RevokeWorkspaceAccessOK, error)

	RollbackModelRegistryUpgrade(params *RollbackModelRegistryUpgradeParams, opts ...ClientOption) (*RollbackModelRegistryUpgradeOK, error)

	SuspendWorkspace(params *SuspendWorkspaceParams, opts ...ClientOption) (*SuspendWorkspaceOK, error)

	UpgradeMlServingApp(params *UpgradeMlServingAppParams, opts ...ClientOption) (*UpgradeMlServingAppOK, error)

	UpgradeModelRegistry(params *UpgradeModelRegistryParams, opts ...ClientOption) (*UpgradeModelRegistryOK, error)

	UpgradeWorkspace(params *UpgradeWorkspaceParams, opts ...ClientOption) (*UpgradeWorkspaceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddInstanceGroups adds new cloudera a i workbench cluster instance groups

Add new Cloudera AI workbench cluster instance groups.
*/
func (a *Client) AddInstanceGroups(params *AddInstanceGroupsParams, opts ...ClientOption) (*AddInstanceGroupsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewAddInstanceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addInstanceGroups",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/addInstanceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddInstanceGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*AddInstanceGroupsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*AddInstanceGroupsDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddInstanceGroupsMlServingApp adds instance group to an existing cloudera a i inference service instance

Add instance group to an existing Cloudera AI Inference Service instance.
*/
func (a *Client) AddInstanceGroupsMlServingApp(params *AddInstanceGroupsMlServingAppParams, opts ...ClientOption) (*AddInstanceGroupsMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewAddInstanceGroupsMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addInstanceGroupsMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/addInstanceGroupsMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddInstanceGroupsMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*AddInstanceGroupsMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*AddInstanceGroupsMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupWorkspace backups a cloudera a i workbench

Backup a Cloudera AI workbench.
*/
func (a *Client) BackupWorkspace(params *BackupWorkspaceParams, opts ...ClientOption) (*BackupWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewBackupWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "backupWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/backupWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BackupWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*BackupWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*BackupWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateFileReplica creates file system replica

Creates a file system replication.
*/
func (a *Client) CreateFileReplica(params *CreateFileReplicaParams, opts ...ClientOption) (*CreateFileReplicaOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateFileReplicaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFileReplica",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/createFileReplica",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFileReplicaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateFileReplicaOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*CreateFileReplicaDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMlServingApp deploys cloudera a i inference service into an existing kubernetes cluster

Deploys Cloudera AI Inference Service into an existing Kubernetes cluster.
*/
func (a *Client) CreateMlServingApp(params *CreateMlServingAppParams, opts ...ClientOption) (*CreateMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/createMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*CreateMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateModelRegistry creates a new model registry

Create a new model registry by creating a new workbench and install model registry on it.
*/
func (a *Client) CreateModelRegistry(params *CreateModelRegistryParams, opts ...ClientOption) (*CreateModelRegistryOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateModelRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createModelRegistry",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/createModelRegistry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateModelRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateModelRegistryOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*CreateModelRegistryDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateWorkspace creates a cloudera a i workbench

Provision a Kubernetes cluster and install the Cloudera AI application in it.
*/
func (a *Client) CreateWorkspace(params *CreateWorkspaceParams, opts ...ClientOption) (*CreateWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewCreateWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/createWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*CreateWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*CreateWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBackup deletes a backup snapshot

Deletes a Cloudera AI workbench backup.
*/
func (a *Client) DeleteBackup(params *DeleteBackupParams, opts ...ClientOption) (*DeleteBackupOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteBackupOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteBackupDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteFileReplica deletes existing replication for project files

Delete existing replication configuration for project files.
*/
func (a *Client) DeleteFileReplica(params *DeleteFileReplicaParams, opts ...ClientOption) (*DeleteFileReplicaOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteFileReplicaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFileReplica",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteFileReplica",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFileReplicaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteFileReplicaOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteFileReplicaDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInstanceGroup deletes an instance group from the cluster

Deletes an instance group from a Cloudera AI workbench.
*/
func (a *Client) DeleteInstanceGroup(params *DeleteInstanceGroupParams, opts ...ClientOption) (*DeleteInstanceGroupOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteInstanceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInstanceGroup",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteInstanceGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstanceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteInstanceGroupOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteInstanceGroupDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInstanceGroupMlServingApp deletes an instance group from a cloudera a i inference service instance

Deletes an instance group from a Cloudera AI Inference Service instance.
*/
func (a *Client) DeleteInstanceGroupMlServingApp(params *DeleteInstanceGroupMlServingAppParams, opts ...ClientOption) (*DeleteInstanceGroupMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteInstanceGroupMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInstanceGroupMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteInstanceGroupMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstanceGroupMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteInstanceGroupMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteInstanceGroupMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMlServingApp deletes cloudera a i inference service instance

Gracefully deletes the Cloudera AI Inference Service instance without deleting the cluster.
*/
func (a *Client) DeleteMlServingApp(params *DeleteMlServingAppParams, opts ...ClientOption) (*DeleteMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteModelRegistry deletes a model registry

Delete a model registry.
*/
func (a *Client) DeleteModelRegistry(params *DeleteModelRegistryParams, opts ...ClientOption) (*DeleteModelRegistryOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteModelRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteModelRegistry",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteModelRegistry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteModelRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteModelRegistryOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteModelRegistryDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWorkspace deletes cloudera a i workbench

Deletes a Cloudera AI workbench.
*/
func (a *Client) DeleteWorkspace(params *DeleteWorkspaceParams, opts ...ClientOption) (*DeleteWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDeleteWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/deleteWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DeleteWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DeleteWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeMlServingApp describes cloudera a i inference service instance

Describe Cloudera AI Inference Service instance.
*/
func (a *Client) DescribeMlServingApp(params *DescribeMlServingAppParams, opts ...ClientOption) (*DescribeMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDescribeMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/describeMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DescribeMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DescribeMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeModelRegistry deprecateds cloudera a i model registry is now deprecated

Please use ListModelRegistries.
*/
func (a *Client) DescribeModelRegistry(params *DescribeModelRegistryParams, opts ...ClientOption) (*DescribeModelRegistryOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDescribeModelRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeModelRegistry",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/describeModelRegistry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeModelRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DescribeModelRegistryOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DescribeModelRegistryDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeWorkspace describes cloudera a i workbench

Describes a Cloudera AI workbench.
*/
func (a *Client) DescribeWorkspace(params *DescribeWorkspaceParams, opts ...ClientOption) (*DescribeWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDescribeWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/describeWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DescribeWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DescribeWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeWorkspaceBackup describes backup snaphot of a workbench

Describe backup snaphot of a workbench.
*/
func (a *Client) DescribeWorkspaceBackup(params *DescribeWorkspaceBackupParams, opts ...ClientOption) (*DescribeWorkspaceBackupOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewDescribeWorkspaceBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeWorkspaceBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/describeWorkspaceBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeWorkspaceBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*DescribeWorkspaceBackupOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*DescribeWorkspaceBackupDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
FailOverFileSystem failovers to replica file system

Failover to replica in case of a source file system disaster.
*/
func (a *Client) FailOverFileSystem(params *FailOverFileSystemParams, opts ...ClientOption) (*FailOverFileSystemOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewFailOverFileSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "failOverFileSystem",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/failOverFileSystem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FailOverFileSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*FailOverFileSystemOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*FailOverFileSystemDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAuditEvents gets all the events belong to a workbench crn

Gets all the events belong to a workbench crn.
*/
func (a *Client) GetAuditEvents(params *GetAuditEventsParams, opts ...ClientOption) (*GetAuditEventsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetAuditEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuditEvents",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getAuditEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetAuditEventsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetAuditEventsDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKubeconfig lists workspace access cloudera a i workbench

Lists users that can perform Kubernetes operations on a Cloudera AI workbench via EKS.
*/
func (a *Client) GetKubeconfig(params *GetKubeconfigParams, opts ...ClientOption) (*GetKubeconfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetKubeconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeconfig",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubeconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetKubeconfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetKubeconfigDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLatestModelRegistryVersion gets latest model registry version cloudera a i registry

Retrieves the latest version that Cloudera AI deploys to ModelRegistries.
*/
func (a *Client) GetLatestModelRegistryVersion(params *GetLatestModelRegistryVersionParams, opts ...ClientOption) (*GetLatestModelRegistryVersionOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetLatestModelRegistryVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestModelRegistryVersion",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getLatestModelRegistryVersion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLatestModelRegistryVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetLatestModelRegistryVersionOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetLatestModelRegistryVersionDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLatestWorkspaceVersion gets latest workspace version cloudera a i workbench

Retrieves the latest version that Cloudera AI deploys to workbenches.
*/
func (a *Client) GetLatestWorkspaceVersion(params *GetLatestWorkspaceVersionParams, opts ...ClientOption) (*GetLatestWorkspaceVersionOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetLatestWorkspaceVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLatestWorkspaceVersion",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getLatestWorkspaceVersion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLatestWorkspaceVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetLatestWorkspaceVersionOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetLatestWorkspaceVersionDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogs gets all the logs belong to a request id

Gets all the logs belong to a request id.
*/
func (a *Client) GetLogs(params *GetLogsParams, opts ...ClientOption) (*GetLogsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogs",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetLogsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetLogsDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetMlServingAppKubeconfig returns kubeconfig for a cloudera a i inference service kubernetes cluster

Gets the Kubeconfig of the Cloudera AI Inference Service kubernetes cluster.
*/
func (a *Client) GetMlServingAppKubeconfig(params *GetMlServingAppKubeconfigParams, opts ...ClientOption) (*GetMlServingAppKubeconfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetMlServingAppKubeconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMlServingAppKubeconfig",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getMlServingAppKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMlServingAppKubeconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetMlServingAppKubeconfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetMlServingAppKubeconfigDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetModelRegistryKubeconfig gets model registry kubeconfig returns kube config for model registry

Gets the Kubeconfig of the model registry cluster.
*/
func (a *Client) GetModelRegistryKubeconfig(params *GetModelRegistryKubeconfigParams, opts ...ClientOption) (*GetModelRegistryKubeconfigOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGetModelRegistryKubeconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getModelRegistryKubeconfig",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/getModelRegistryKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetModelRegistryKubeconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GetModelRegistryKubeconfigOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GetModelRegistryKubeconfigDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GrantMlServingAppAccess grants admin access to a cloudera a i inference service cluster

Grants an AWS user permissions to perform Kubernetes operations on a Cloudera AI Inference Service cluster.
*/
func (a *Client) GrantMlServingAppAccess(params *GrantMlServingAppAccessParams, opts ...ClientOption) (*GrantMlServingAppAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGrantMlServingAppAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantMlServingAppAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/grantMlServingAppAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GrantMlServingAppAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GrantMlServingAppAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GrantMlServingAppAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GrantModelRegistryAccess grants model registry access cloudera a i model registry

Grants an AWS user to perform Kubernetes operations on a Cloudera AI model registry via EKS.
*/
func (a *Client) GrantModelRegistryAccess(params *GrantModelRegistryAccessParams, opts ...ClientOption) (*GrantModelRegistryAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGrantModelRegistryAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantModelRegistryAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/grantModelRegistryAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GrantModelRegistryAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GrantModelRegistryAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GrantModelRegistryAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GrantWorkspaceAccess grants workspace access cloudera a i workbench

Grants an AWS user to perform Kubernetes operations on a Cloudera AI workbench via EKS.
*/
func (a *Client) GrantWorkspaceAccess(params *GrantWorkspaceAccessParams, opts ...ClientOption) (*GrantWorkspaceAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewGrantWorkspaceAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantWorkspaceAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/grantWorkspaceAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GrantWorkspaceAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*GrantWorkspaceAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*GrantWorkspaceAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListInstanceTypeConfiguration lists the instance configuration for a given instance type

List of instances.
*/
func (a *Client) ListInstanceTypeConfiguration(params *ListInstanceTypeConfigurationParams, opts ...ClientOption) (*ListInstanceTypeConfigurationOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListInstanceTypeConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInstanceTypeConfiguration",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listInstanceTypeConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInstanceTypeConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListInstanceTypeConfigurationOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListInstanceTypeConfigurationDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMlServingAppAccess lists members that have kubernetes access to a cloudera a i inference service cluster

Lists users that can perform Kubernetes operations on a Cloudera AI Inference Service cluster.
*/
func (a *Client) ListMlServingAppAccess(params *ListMlServingAppAccessParams, opts ...ClientOption) (*ListMlServingAppAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListMlServingAppAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMlServingAppAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listMlServingAppAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMlServingAppAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListMlServingAppAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListMlServingAppAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMlServingApps lists all cloudera a i inference service instances

List all Cloudera AI Inference Service instances.
*/
func (a *Client) ListMlServingApps(params *ListMlServingAppsParams, opts ...ClientOption) (*ListMlServingAppsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListMlServingAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMlServingApps",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listMlServingApps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMlServingAppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListMlServingAppsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListMlServingAppsDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListModelRegistries lists all model registries

List all model registries.
*/
func (a *Client) ListModelRegistries(params *ListModelRegistriesParams, opts ...ClientOption) (*ListModelRegistriesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListModelRegistriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listModelRegistries",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listModelRegistries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListModelRegistriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListModelRegistriesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListModelRegistriesDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListModelRegistryAccess lists workspace access cloudera a i model registry

Lists users that can perform Kubernetes operations on a Cloudera AI model registry via EKS.
*/
func (a *Client) ListModelRegistryAccess(params *ListModelRegistryAccessParams, opts ...ClientOption) (*ListModelRegistryAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListModelRegistryAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listModelRegistryAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listModelRegistryAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListModelRegistryAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListModelRegistryAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListModelRegistryAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRelevantInstances lists the instance types for cloudera a i workbench creation that have the requested resource

List of relevant instance type for Cloudera AI workbench creation.
*/
func (a *Client) ListRelevantInstances(params *ListRelevantInstancesParams, opts ...ClientOption) (*ListRelevantInstancesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListRelevantInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRelevantInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listRelevantInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRelevantInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListRelevantInstancesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListRelevantInstancesDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWorkspaceAccess lists workspace access cloudera a i workbench

Lists users that can perform Kubernetes operations on a Cloudera AI workbench via EKS.
*/
func (a *Client) ListWorkspaceAccess(params *ListWorkspaceAccessParams, opts ...ClientOption) (*ListWorkspaceAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListWorkspaceAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkspaceAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listWorkspaceAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkspaceAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListWorkspaceAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListWorkspaceAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWorkspaceBackups lists backup snapshots of a workbench

List backup snapshots of a workbench.
*/
func (a *Client) ListWorkspaceBackups(params *ListWorkspaceBackupsParams, opts ...ClientOption) (*ListWorkspaceBackupsOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListWorkspaceBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkspaceBackups",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listWorkspaceBackups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkspaceBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListWorkspaceBackupsOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListWorkspaceBackupsDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWorkspaces lists cloudera a i workbenches

List Cloudera AI workbenches.
*/
func (a *Client) ListWorkspaces(params *ListWorkspacesParams, opts ...ClientOption) (*ListWorkspacesOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewListWorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWorkspaces",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/listWorkspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWorkspacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ListWorkspacesOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ListWorkspacesDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModifyClusterInstanceGroup modifies cloudera a i workbench cluster instance group

Modify a Cloudera AI workbench cluster instance group.
*/
func (a *Client) ModifyClusterInstanceGroup(params *ModifyClusterInstanceGroupParams, opts ...ClientOption) (*ModifyClusterInstanceGroupOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewModifyClusterInstanceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyClusterInstanceGroup",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/modifyClusterInstanceGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterInstanceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ModifyClusterInstanceGroupOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ModifyClusterInstanceGroupDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModifyClusterSecurity modifies cloudera a i workbench cluster security

Modify a Cloudera AI workbench cluster security.
*/
func (a *Client) ModifyClusterSecurity(params *ModifyClusterSecurityParams, opts ...ClientOption) (*ModifyClusterSecurityOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewModifyClusterSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyClusterSecurity",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/modifyClusterSecurity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyClusterSecurityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ModifyClusterSecurityOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ModifyClusterSecurityDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModifyMlServingApp modifies instance groups for a cloudera a i inference service cluster

Modify instance groups for a Cloudera AI Inference Service cluster.
*/
func (a *Client) ModifyMlServingApp(params *ModifyMlServingAppParams, opts ...ClientOption) (*ModifyMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewModifyMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/modifyMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ModifyMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ModifyMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ModifyWorkspaceLoadBalancer modifies cloudera a i workbench loadbalancer

Modify a Cloudera AI workbench loadbalancer.
*/
func (a *Client) ModifyWorkspaceLoadBalancer(params *ModifyWorkspaceLoadBalancerParams, opts ...ClientOption) (*ModifyWorkspaceLoadBalancerOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewModifyWorkspaceLoadBalancerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyWorkspaceLoadBalancer",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/modifyWorkspaceLoadBalancer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyWorkspaceLoadBalancerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ModifyWorkspaceLoadBalancerOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ModifyWorkspaceLoadBalancerDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RefreshModelRegistryConfigmap refreshes the model registry configmap of the workbench

Refreshes the model registry configmap of the workbench from the control plane.
*/
func (a *Client) RefreshModelRegistryConfigmap(params *RefreshModelRegistryConfigmapParams, opts ...ClientOption) (*RefreshModelRegistryConfigmapOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRefreshModelRegistryConfigmapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshModelRegistryConfigmap",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/refreshModelRegistryConfigmap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshModelRegistryConfigmapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RefreshModelRegistryConfigmapOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RefreshModelRegistryConfigmapDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RequestWorkflowCancellation requests a workflow cancellation

Request a long running workflow cancellation by resource ID and workflow type.
*/
func (a *Client) RequestWorkflowCancellation(params *RequestWorkflowCancellationParams, opts ...ClientOption) (*RequestWorkflowCancellationOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRequestWorkflowCancellationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestWorkflowCancellation",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/requestWorkflowCancellation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestWorkflowCancellationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RequestWorkflowCancellationOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RequestWorkflowCancellationDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestoreWorkspace restores a cloudera a i workbench

Create a new workbench based on an existing workbench backup snapshot.
*/
func (a *Client) RestoreWorkspace(params *RestoreWorkspaceParams, opts ...ClientOption) (*RestoreWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRestoreWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/restoreWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RestoreWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RestoreWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ResumeWorkspace resumes cloudera a i workbench

Resume a Cloudera Machine Learnings workbench.
*/
func (a *Client) ResumeWorkspace(params *ResumeWorkspaceParams, opts ...ClientOption) (*ResumeWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewResumeWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/resumeWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*ResumeWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*ResumeWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RevokeMlServingAppAccess revokes access to a cloudera a i inference service cluster

Revokes an AWS user permissions on a Cloudera AI Inference Service cluster.
*/
func (a *Client) RevokeMlServingAppAccess(params *RevokeMlServingAppAccessParams, opts ...ClientOption) (*RevokeMlServingAppAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRevokeMlServingAppAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeMlServingAppAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/revokeMlServingAppAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeMlServingAppAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RevokeMlServingAppAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RevokeMlServingAppAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RevokeModelRegistryAccess revokes model registry access cloudera a i model registry

Revokes an AWS user to perform Kubernetes operations on a Cloudera AI model registry via EKS.
*/
func (a *Client) RevokeModelRegistryAccess(params *RevokeModelRegistryAccessParams, opts ...ClientOption) (*RevokeModelRegistryAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRevokeModelRegistryAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeModelRegistryAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/revokeModelRegistryAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeModelRegistryAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RevokeModelRegistryAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RevokeModelRegistryAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RevokeWorkspaceAccess revokes workspace access cloudera a i workbench

Revokes an AWS user to perform Kubernetes operations on a Cloudera AI workbench via EKS.
*/
func (a *Client) RevokeWorkspaceAccess(params *RevokeWorkspaceAccessParams, opts ...ClientOption) (*RevokeWorkspaceAccessOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRevokeWorkspaceAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeWorkspaceAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/revokeWorkspaceAccess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeWorkspaceAccessReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RevokeWorkspaceAccessOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RevokeWorkspaceAccessDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RollbackModelRegistryUpgrade rollbacks a model registry upgrade restore prior model registry

Rollback a model registry upgrade. Restore prior model registry.
*/
func (a *Client) RollbackModelRegistryUpgrade(params *RollbackModelRegistryUpgradeParams, opts ...ClientOption) (*RollbackModelRegistryUpgradeOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewRollbackModelRegistryUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rollbackModelRegistryUpgrade",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/rollbackModelRegistryUpgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RollbackModelRegistryUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*RollbackModelRegistryUpgradeOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*RollbackModelRegistryUpgradeDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SuspendWorkspace suspends cloudera a i workbench

Suspend a Cloudera AI workbench.
*/
func (a *Client) SuspendWorkspace(params *SuspendWorkspaceParams, opts ...ClientOption) (*SuspendWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewSuspendWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "suspendWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/suspendWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuspendWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*SuspendWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*SuspendWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeMlServingApp upgrades a cloudera a i inference service instance

Upgrade a Cloudera AI Inference Service instance to the latest available version.
*/
func (a *Client) UpgradeMlServingApp(params *UpgradeMlServingAppParams, opts ...ClientOption) (*UpgradeMlServingAppOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpgradeMlServingAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeMlServingApp",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/upgradeMlServingApp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeMlServingAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpgradeMlServingAppOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*UpgradeMlServingAppDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeModelRegistry upgrades a model registry

Upgrade a model registry.
*/
func (a *Client) UpgradeModelRegistry(params *UpgradeModelRegistryParams, opts ...ClientOption) (*UpgradeModelRegistryOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpgradeModelRegistryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeModelRegistry",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/upgradeModelRegistry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeModelRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpgradeModelRegistryOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*UpgradeModelRegistryDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeWorkspace upgrades cloudera a i workbench

Upgrades a Cloudera AI workbench to the latest available version.
*/
func (a *Client) UpgradeWorkspace(params *UpgradeWorkspaceParams, opts ...ClientOption) (*UpgradeWorkspaceOK, error) {
	// NOTE: parameters are not validated before sending
	if params == nil {
		params = NewUpgradeWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeWorkspace",
		Method:             "POST",
		PathPattern:        "/api/v1/ml/upgradeWorkspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	// only one success response has to be checked
	success, ok := result.(*UpgradeWorkspaceOK)
	if ok {
		return success, nil
	}

	// unexpected success response.
	//
	// a default response is provided: fill this and return an error
	unexpectedSuccess := result.(*UpgradeWorkspaceDefault)

	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
