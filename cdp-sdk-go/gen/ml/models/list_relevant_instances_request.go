// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListRelevantInstancesRequest Request object for the ListRelevantInstances method.
//
// swagger:model ListRelevantInstancesRequest
type ListRelevantInstancesRequest struct {

	// Deprecated. Please use environmentName instead, from which the cloud provider will be determined.
	CloudProvider string `json:"cloudProvider,omitempty"`

	// Specifies the environment name of respective cloud provider for which instance support details are requested.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Defines the category of the instance (e.g., CPU, GPU) relevant for the query in the specified region.
	// Required: true
	InstanceCategory *string `json:"instanceCategory"`

	// Specifies the product type for which instance support details are requested.
	// Required: true
	ProductType *string `json:"productType"`

	// Deprecated. Please use environmentName instead, from which the region will be determined.
	Region string `json:"region,omitempty"`

	// Specifies the requested resource inputs eg (CPU/GPU, model, memory etc).
	// Required: true
	RequestInfo *RequestResourceInfo `json:"requestInfo"`
}

// Validate validates this list relevant instances request
func (m *ListRelevantInstancesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListRelevantInstancesRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *ListRelevantInstancesRequest) validateInstanceCategory(formats strfmt.Registry) error {

	if err := validate.Required("instanceCategory", "body", m.InstanceCategory); err != nil {
		return err
	}

	return nil
}

func (m *ListRelevantInstancesRequest) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("productType", "body", m.ProductType); err != nil {
		return err
	}

	return nil
}

func (m *ListRelevantInstancesRequest) validateRequestInfo(formats strfmt.Registry) error {

	if err := validate.Required("requestInfo", "body", m.RequestInfo); err != nil {
		return err
	}

	if m.RequestInfo != nil {
		if err := m.RequestInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requestInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list relevant instances request based on the context it is used
func (m *ListRelevantInstancesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRequestInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListRelevantInstancesRequest) contextValidateRequestInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestInfo != nil {

		if err := m.RequestInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requestInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListRelevantInstancesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListRelevantInstancesRequest) UnmarshalBinary(b []byte) error {
	var res ListRelevantInstancesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
