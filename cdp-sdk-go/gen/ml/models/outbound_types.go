// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OutboundTypes List of possible Outbound types.
//
// swagger:model OutboundTypes
type OutboundTypes string

func NewOutboundTypes(value OutboundTypes) *OutboundTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OutboundTypes.
func (m OutboundTypes) Pointer() *OutboundTypes {
	return &m
}

const (

	// OutboundTypesUNKNOWN captures enum value "UNKNOWN"
	OutboundTypesUNKNOWN OutboundTypes = "UNKNOWN"

	// OutboundTypesOUTBOUNDTYPEUDR captures enum value "OUTBOUND_TYPE_UDR"
	OutboundTypesOUTBOUNDTYPEUDR OutboundTypes = "OUTBOUND_TYPE_UDR"
)

// for schema
var outboundTypesEnum []interface{}

func init() {
	var res []OutboundTypes
	if err := json.Unmarshal([]byte(`["UNKNOWN","OUTBOUND_TYPE_UDR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		outboundTypesEnum = append(outboundTypesEnum, v)
	}
}

func (m OutboundTypes) validateOutboundTypesEnum(path, location string, value OutboundTypes) error {
	if err := validate.EnumCase(path, location, value, outboundTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this outbound types
func (m OutboundTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOutboundTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this outbound types based on context it is used
func (m OutboundTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
