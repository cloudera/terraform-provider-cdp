// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddInstanceGroupsMlServingAppRequest Request object for AddInstanceGroupsMlServingApp method.
//
// swagger:model AddInstanceGroupsMlServingAppRequest
type AddInstanceGroupsMlServingAppRequest struct {

	// The CRN of the Cloudera AI Inference Service instance to which the instance groups will be added.
	// Required: true
	AppCrn *string `json:"appCrn"`

	// The instance groups to be added to the Cloudera AI Inference Service instance.
	// Required: true
	InstanceGroups []*InstanceGroup `json:"instanceGroups"`
}

// Validate validates this add instance groups ml serving app request
func (m *AddInstanceGroupsMlServingAppRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddInstanceGroupsMlServingAppRequest) validateAppCrn(formats strfmt.Registry) error {

	if err := validate.Required("appCrn", "body", m.AppCrn); err != nil {
		return err
	}

	return nil
}

func (m *AddInstanceGroupsMlServingAppRequest) validateInstanceGroups(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceGroups); i++ {
		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add instance groups ml serving app request based on the context it is used
func (m *AddInstanceGroupsMlServingAppRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddInstanceGroupsMlServingAppRequest) contextValidateInstanceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceGroups); i++ {

		if m.InstanceGroups[i] != nil {

			if swag.IsZero(m.InstanceGroups[i]) { // not required
				return nil
			}

			if err := m.InstanceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddInstanceGroupsMlServingAppRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddInstanceGroupsMlServingAppRequest) UnmarshalBinary(b []byte) error {
	var res AddInstanceGroupsMlServingAppRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
