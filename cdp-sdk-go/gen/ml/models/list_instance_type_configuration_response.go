// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListInstanceTypeConfigurationResponse Response object for the ListInstanceTypeConfiguration method.
//
// swagger:model ListInstanceTypeConfigurationResponse
type ListInstanceTypeConfigurationResponse struct {

	// Contains a list of instance details, including CPU, GPU, memory, and name, for queried supported instance type in the queried region.
	// Required: true
	InstanceDetails []*InstanceDetails `json:"instanceDetails"`
}

// Validate validates this list instance type configuration response
func (m *ListInstanceTypeConfigurationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListInstanceTypeConfigurationResponse) validateInstanceDetails(formats strfmt.Registry) error {

	if err := validate.Required("instanceDetails", "body", m.InstanceDetails); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceDetails); i++ {
		if swag.IsZero(m.InstanceDetails[i]) { // not required
			continue
		}

		if m.InstanceDetails[i] != nil {
			if err := m.InstanceDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list instance type configuration response based on the context it is used
func (m *ListInstanceTypeConfigurationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListInstanceTypeConfigurationResponse) contextValidateInstanceDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceDetails); i++ {

		if m.InstanceDetails[i] != nil {

			if swag.IsZero(m.InstanceDetails[i]) { // not required
				return nil
			}

			if err := m.InstanceDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instanceDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListInstanceTypeConfigurationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListInstanceTypeConfigurationResponse) UnmarshalBinary(b []byte) error {
	var res ListInstanceTypeConfigurationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
