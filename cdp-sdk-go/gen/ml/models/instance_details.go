// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceDetails Instance Details
//
// swagger:model InstanceDetails
type InstanceDetails struct {

	// Name of the CPU/GPU category to which it belongs.
	// Required: true
	Category *string `json:"category"`

	// Compute capability of the GPU.
	ComputeCapability string `json:"computeCapability,omitempty"`

	// The number of CPU cores available for the instance in the region.
	// Required: true
	CPU *string `json:"cpu"`

	// The number of GPUs available for the instance in the region.
	// Required: true
	Gpu *string `json:"gpu"`

	// Memory capacity of the GPU.
	GpuMemory string `json:"gpuMemory,omitempty"`

	// GPU model.
	GpuModel string `json:"gpuModel,omitempty"`

	// GPU model type.
	GpuType string `json:"gpuType,omitempty"`

	// Type of interconnect between GPUs.
	InterconnectType string `json:"interconnectType,omitempty"`

	// The amount of memory (RAM) available for the instance in the region, typically measured in GB.
	// Required: true
	Memory *string `json:"memory"`

	// A unique name or identifier for the instance type in the region.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this instance details
func (m *InstanceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceDetails) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *InstanceDetails) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *InstanceDetails) validateGpu(formats strfmt.Registry) error {

	if err := validate.Required("gpu", "body", m.Gpu); err != nil {
		return err
	}

	return nil
}

func (m *InstanceDetails) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *InstanceDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this instance details based on context it is used
func (m *InstanceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstanceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceDetails) UnmarshalBinary(b []byte) error {
	var res InstanceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
