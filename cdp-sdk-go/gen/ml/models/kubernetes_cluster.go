// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubernetesCluster The Kubernetes cluster information
//
// swagger:model KubernetesCluster
type KubernetesCluster struct {

	// The allow list of CIDR blocks which can access the API server.
	AuthorizedIPRanges string `json:"authorizedIpRanges,omitempty"`

	// Whether to allow only 'authorizedIPRanges' given or all public IPs.
	AuthorizedIPRangesAllowList bool `json:"authorizedIpRangesAllowList,omitempty"`

	// The base domain for this cluster.
	BaseDomain string `json:"baseDomain,omitempty"`

	// The cluster CRN of the kubernetes cluster.
	ClusterCrn string `json:"clusterCrn,omitempty"`

	// The name of the Kubernetes cluster.
	ClusterName string `json:"clusterName,omitempty"`

	// The domain name for the cluster.
	DomainName string `json:"domainName,omitempty"`

	// The instance groups.
	InstanceGroups []*WorkspaceInstanceGroup `json:"instanceGroups"`

	// Deprecated: Please use loadBalancerIPWhitelists instead, as this will soon be unsupported.
	IPAllowlist string `json:"ipAllowlist,omitempty"`

	// Deprecated: Please use isPrivateCluster instead, as this will soon be unsupported.
	IsPublic bool `json:"isPublic,omitempty"`

	// The identifier in Cloudera Data Platform Compute Service corresponding to this Kubernetes cluster.
	LiftieID string `json:"liftieID,omitempty"`

	// The subnets associated with this cluster.
	Subnets string `json:"subnets,omitempty"`

	// Tags provided by the user at the time of app creation.
	Tags []*Tag `json:"tags"`
}

// Validate validates this kubernetes cluster
func (m *KubernetesCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesCluster) validateInstanceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceGroups); i++ {
		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *KubernetesCluster) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kubernetes cluster based on the context it is used
func (m *KubernetesCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubernetesCluster) contextValidateInstanceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InstanceGroups); i++ {

		if m.InstanceGroups[i] != nil {

			if swag.IsZero(m.InstanceGroups[i]) { // not required
				return nil
			}

			if err := m.InstanceGroups[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *KubernetesCluster) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubernetesCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubernetesCluster) UnmarshalBinary(b []byte) error {
	var res KubernetesCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
