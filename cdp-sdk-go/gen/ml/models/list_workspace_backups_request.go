// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListWorkspaceBackupsRequest Request object for ListWorkspaceBackups method.
//
// swagger:model ListWorkspaceBackupsRequest
type ListWorkspaceBackupsRequest struct {

	// The environment for the workspace to list backups for.
	EnvironmentName string `json:"environmentName,omitempty"`

	// Additional query options to enhance/mutate the API response.
	QueryOptions *ListWorkspaceBackupsQueryOptions `json:"queryOptions,omitempty"`

	// The CRN of the workspace to list backups for. If this field is specified, environmentName and workspaceName are ignored.
	WorkspaceCrn string `json:"workspaceCrn,omitempty"`

	// The name of the workspace to list backups for.
	WorkspaceName string `json:"workspaceName,omitempty"`
}

// Validate validates this list workspace backups request
func (m *ListWorkspaceBackupsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueryOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListWorkspaceBackupsRequest) validateQueryOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryOptions) { // not required
		return nil
	}

	if m.QueryOptions != nil {
		if err := m.QueryOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list workspace backups request based on the context it is used
func (m *ListWorkspaceBackupsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueryOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListWorkspaceBackupsRequest) contextValidateQueryOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.QueryOptions != nil {
		if err := m.QueryOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListWorkspaceBackupsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListWorkspaceBackupsRequest) UnmarshalBinary(b []byte) error {
	var res ListWorkspaceBackupsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
