// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceInstanceGroup Instance group information to show in workspace details.
//
// swagger:model WorkspaceInstanceGroup
type WorkspaceInstanceGroup struct {

	// The initial number of instance node.
	// Required: true
	InstanceCount *int32 `json:"instanceCount"`

	// The unique name of the instance group.
	// Required: true
	InstanceGroupName *string `json:"instanceGroupName"`

	// The cloud provider instance type for the node instance.
	// Required: true
	InstanceType *string `json:"instanceType"`

	// Instances in the instance group.
	// Required: true
	Instances []*Instance `json:"instances"`

	// The maximum number of instances that can be deployed to this instance group.
	// Required: true
	MaxInstances *int32 `json:"maxInstances"`

	// The minimum number of instances that can be deployed to this instance group. If the value is 0, the group might be empty.
	// Required: true
	MinInstances *int32 `json:"minInstances"`

	// Tags are key/value pairs that are applied to all tag-able resources deployed in the workspace's cloud environment.
	// Required: true
	Tags []*Tag `json:"tags"`
}

// Validate validates this workspace instance group
func (m *WorkspaceInstanceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceInstanceGroup) validateInstanceCount(formats strfmt.Registry) error {

	if err := validate.Required("instanceCount", "body", m.InstanceCount); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateInstanceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroupName", "body", m.InstanceGroupName); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateInstances(formats strfmt.Registry) error {

	if err := validate.Required("instances", "body", m.Instances); err != nil {
		return err
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateMaxInstances(formats strfmt.Registry) error {

	if err := validate.Required("maxInstances", "body", m.MaxInstances); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateMinInstances(formats strfmt.Registry) error {

	if err := validate.Required("minInstances", "body", m.MinInstances); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceInstanceGroup) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this workspace instance group based on the context it is used
func (m *WorkspaceInstanceGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceInstanceGroup) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {
			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkspaceInstanceGroup) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceInstanceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceInstanceGroup) UnmarshalBinary(b []byte) error {
	var res WorkspaceInstanceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
