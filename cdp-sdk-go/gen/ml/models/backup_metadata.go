// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupMetadata Backup metadata response object for the workspace summary.
//
// swagger:model BackupMetadata
type BackupMetadata struct {

	// The backup vault name.
	BackupVaultName string `json:"backupVaultName,omitempty"`

	// Whether successful backups are available for the workspace.
	IsSuccessfulBackupAvailable bool `json:"isSuccessfulBackupAvailable,omitempty"`

	// The status of the last backup initiated.
	LastBackupStatus string `json:"lastBackupStatus,omitempty"`

	// The time when the last successful backup was taken.
	// Format: date-time
	LastSuccessfulBackupTime strfmt.DateTime `json:"lastSuccessfulBackupTime,omitempty"`

	// The number of backups available.
	NumberOfAvailableBackups int64 `json:"numberOfAvailableBackups,omitempty"`
}

// Validate validates this backup metadata
func (m *BackupMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastSuccessfulBackupTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupMetadata) validateLastSuccessfulBackupTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSuccessfulBackupTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSuccessfulBackupTime", "body", "date-time", m.LastSuccessfulBackupTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this backup metadata based on context it is used
func (m *BackupMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupMetadata) UnmarshalBinary(b []byte) error {
	var res BackupMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
