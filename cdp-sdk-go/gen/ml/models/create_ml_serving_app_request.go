// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMlServingAppRequest Request object for the CreateMlServingApp method.
//
// swagger:model CreateMlServingAppRequest
type CreateMlServingAppRequest struct {

	// The name of the App to create.
	// Required: true
	AppName *string `json:"appName"`

	// The cluster CRN of an existing cluster that the AI inference App will use.
	// Required: true
	ClusterCrn *string `json:"clusterCrn"`

	// The boolean flag to disable TLS setup for MlServingApp. By default, the TLS is enabled.
	DisableTLS bool `json:"disableTLS,omitempty"`

	// The environment CRN for the App.
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// The whitelist of IPs for load balancer.
	LoadBalancerIPWhitelists []string `json:"loadBalancerIPWhitelists"`

	// The version of ML workload app to install.
	// Required: true
	MlservingVersion *string `json:"mlservingVersion"`

	// The request for Kubernetes cluster provisioning. Required in public cloud.
	ProvisionK8sRequest *MlServingProvisionK8sRequest `json:"provisionK8sRequest,omitempty"`

	// Skip pre-flight validations if requested.
	SkipValidation bool `json:"skipValidation,omitempty"`

	// The boolean flag to request a public load balancer. By default, a private load balancer is used.
	UsePublicLoadBalancer bool `json:"usePublicLoadBalancer,omitempty"`
}

// Validate validates this create ml serving app request
func (m *CreateMlServingAppRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMlservingVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionK8sRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMlServingAppRequest) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("appName", "body", m.AppName); err != nil {
		return err
	}

	return nil
}

func (m *CreateMlServingAppRequest) validateClusterCrn(formats strfmt.Registry) error {

	if err := validate.Required("clusterCrn", "body", m.ClusterCrn); err != nil {
		return err
	}

	return nil
}

func (m *CreateMlServingAppRequest) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *CreateMlServingAppRequest) validateMlservingVersion(formats strfmt.Registry) error {

	if err := validate.Required("mlservingVersion", "body", m.MlservingVersion); err != nil {
		return err
	}

	return nil
}

func (m *CreateMlServingAppRequest) validateProvisionK8sRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisionK8sRequest) { // not required
		return nil
	}

	if m.ProvisionK8sRequest != nil {
		if err := m.ProvisionK8sRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionK8sRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionK8sRequest")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create ml serving app request based on the context it is used
func (m *CreateMlServingAppRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProvisionK8sRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMlServingAppRequest) contextValidateProvisionK8sRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvisionK8sRequest != nil {

		if swag.IsZero(m.ProvisionK8sRequest) { // not required
			return nil
		}

		if err := m.ProvisionK8sRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionK8sRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionK8sRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMlServingAppRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMlServingAppRequest) UnmarshalBinary(b []byte) error {
	var res CreateMlServingAppRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
