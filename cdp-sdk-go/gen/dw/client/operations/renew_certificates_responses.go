// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/dw/models"
)

// RenewCertificatesReader is a Reader for the RenewCertificates structure.
type RenewCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenewCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenewCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 405:
		result := NewRenewCertificatesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRenewCertificatesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRenewCertificatesOK creates a RenewCertificatesOK with default headers values
func NewRenewCertificatesOK() *RenewCertificatesOK {
	return &RenewCertificatesOK{}
}

/*
RenewCertificatesOK describes a response with status code 200, with default header values.

Expected response to a valid request.
*/
type RenewCertificatesOK struct {
	Payload models.RenewCertificatesResponse
}

// IsSuccess returns true when this renew certificates o k response has a 2xx status code
func (o *RenewCertificatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this renew certificates o k response has a 3xx status code
func (o *RenewCertificatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew certificates o k response has a 4xx status code
func (o *RenewCertificatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this renew certificates o k response has a 5xx status code
func (o *RenewCertificatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this renew certificates o k response a status code equal to that given
func (o *RenewCertificatesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the renew certificates o k response
func (o *RenewCertificatesOK) Code() int {
	return 200
}

func (o *RenewCertificatesOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificatesOK  %+v", 200, o.Payload)
}

func (o *RenewCertificatesOK) String() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificatesOK  %+v", 200, o.Payload)
}

func (o *RenewCertificatesOK) GetPayload() models.RenewCertificatesResponse {
	return o.Payload
}

func (o *RenewCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenewCertificatesMethodNotAllowed creates a RenewCertificatesMethodNotAllowed with default headers values
func NewRenewCertificatesMethodNotAllowed() *RenewCertificatesMethodNotAllowed {
	return &RenewCertificatesMethodNotAllowed{}
}

/*
RenewCertificatesMethodNotAllowed describes a response with status code 405, with default header values.

Operation not allowed on non-Azure clusters.
*/
type RenewCertificatesMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this renew certificates method not allowed response has a 2xx status code
func (o *RenewCertificatesMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this renew certificates method not allowed response has a 3xx status code
func (o *RenewCertificatesMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this renew certificates method not allowed response has a 4xx status code
func (o *RenewCertificatesMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this renew certificates method not allowed response has a 5xx status code
func (o *RenewCertificatesMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this renew certificates method not allowed response a status code equal to that given
func (o *RenewCertificatesMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the renew certificates method not allowed response
func (o *RenewCertificatesMethodNotAllowed) Code() int {
	return 405
}

func (o *RenewCertificatesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificatesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RenewCertificatesMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificatesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *RenewCertificatesMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RenewCertificatesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenewCertificatesDefault creates a RenewCertificatesDefault with default headers values
func NewRenewCertificatesDefault(code int) *RenewCertificatesDefault {
	return &RenewCertificatesDefault{
		_statusCode: code,
	}
}

/*
RenewCertificatesDefault describes a response with status code -1, with default header values.

The default response on an error.
*/
type RenewCertificatesDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this renew certificates default response has a 2xx status code
func (o *RenewCertificatesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this renew certificates default response has a 3xx status code
func (o *RenewCertificatesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this renew certificates default response has a 4xx status code
func (o *RenewCertificatesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this renew certificates default response has a 5xx status code
func (o *RenewCertificatesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this renew certificates default response a status code equal to that given
func (o *RenewCertificatesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the renew certificates default response
func (o *RenewCertificatesDefault) Code() int {
	return o._statusCode
}

func (o *RenewCertificatesDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificates default  %+v", o._statusCode, o.Payload)
}

func (o *RenewCertificatesDefault) String() string {
	return fmt.Sprintf("[POST /api/v1/dw/renewCertificates][%d] renewCertificates default  %+v", o._statusCode, o.Payload)
}

func (o *RenewCertificatesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RenewCertificatesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
