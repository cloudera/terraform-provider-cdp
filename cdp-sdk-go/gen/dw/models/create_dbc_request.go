// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDbcRequest Request object for the createDbc method.
//
// swagger:model CreateDbcRequest
type CreateDbcRequest struct {

	// ID of cluster where Database Catalog should be created.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// DEPRECATED: Current Private Cloud releases only support embedded database, the value of this field is ignored. The name of the DAS database. Not required for embedded databases.
	DbDas string `json:"dbDas,omitempty"`

	// DEPRECATED: Current Private Cloud releases only support embedded database, the value of this field is ignored. The name of the HUE database. Not required for embedded databases.
	DbHue string `json:"dbHue,omitempty"`

	// DEPRECATED: Current Private Cloud releases only support embedded database, the value of this field is ignored. The name of the Metastore database.
	DbMetastore string `json:"dbMetastore,omitempty"`

	// Version of the Database Catalog.
	ImageVersion string `json:"imageVersion,omitempty"`

	// NOTE: creating Default Database Catalogs is deprecated and explicitly disabled. Denotes if Default Database Catalog creation needed.
	IsDefault *bool `json:"isDefault,omitempty"`

	// Load demo data into the Database Catalog?
	LoadDemoData bool `json:"loadDemoData,omitempty"`

	// Name of the Database Catalog.
	// Required: true
	Name *string `json:"name"`

	// The resource template of the Database Catalog.
	ResourceTemplateID string `json:"resourceTemplateId,omitempty"`
}

// Validate validates this create dbc request
func (m *CreateDbcRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDbcRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *CreateDbcRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create dbc request based on context it is used
func (m *CreateDbcRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateDbcRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDbcRequest) UnmarshalBinary(b []byte) error {
	var res CreateDbcRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
