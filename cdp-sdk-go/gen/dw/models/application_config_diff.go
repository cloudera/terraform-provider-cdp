// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationConfigDiff Differences between two ApplicationConfigs.
//
// swagger:model ApplicationConfigDiff
type ApplicationConfigDiff struct {

	// Differences between the two sets of ConfigBlocks.
	ConfigBlocksDiffs *ConfigBlocksDiffs `json:"configBlocksDiffs,omitempty"`

	// Has any of the configurations changed?
	// Required: true
	IsChanged *bool `json:"isChanged"`
}

// Validate validates this application config diff
func (m *ApplicationConfigDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigBlocksDiffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsChanged(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationConfigDiff) validateConfigBlocksDiffs(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigBlocksDiffs) { // not required
		return nil
	}

	if m.ConfigBlocksDiffs != nil {
		if err := m.ConfigBlocksDiffs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configBlocksDiffs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configBlocksDiffs")
			}
			return err
		}
	}

	return nil
}

func (m *ApplicationConfigDiff) validateIsChanged(formats strfmt.Registry) error {

	if err := validate.Required("isChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this application config diff based on the context it is used
func (m *ApplicationConfigDiff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigBlocksDiffs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationConfigDiff) contextValidateConfigBlocksDiffs(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigBlocksDiffs != nil {
		if err := m.ConfigBlocksDiffs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configBlocksDiffs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configBlocksDiffs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationConfigDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationConfigDiff) UnmarshalBinary(b []byte) error {
	var res ApplicationConfigDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
