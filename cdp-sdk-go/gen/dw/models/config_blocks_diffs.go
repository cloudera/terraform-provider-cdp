// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigBlocksDiffs Differences between two sets of ConfigBlocks.
//
// swagger:model ConfigBlocksDiffs
type ConfigBlocksDiffs struct {

	// Config blocks that are only present in the new configuration.
	Added []*ConfigBlockResp `json:"added"`

	// Config blocks that are different between the two configurations.
	Changed []*ConfigBlockDiff `json:"changed"`

	// Has any of the config blocks changed?
	// Required: true
	IsChanged *bool `json:"isChanged"`

	// Config blocks that are only present in the old configuration.
	Removed []*ConfigBlockResp `json:"removed"`

	// Config blocks that are the same in both configurations.
	Same []*ConfigBlockResp `json:"same"`
}

// Validate validates this config blocks diffs
func (m *ConfigBlocksDiffs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsChanged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSame(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBlocksDiffs) validateAdded(formats strfmt.Registry) error {
	if swag.IsZero(m.Added) { // not required
		return nil
	}

	for i := 0; i < len(m.Added); i++ {
		if swag.IsZero(m.Added[i]) { // not required
			continue
		}

		if m.Added[i] != nil {
			if err := m.Added[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("added" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("added" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) validateChanged(formats strfmt.Registry) error {
	if swag.IsZero(m.Changed) { // not required
		return nil
	}

	for i := 0; i < len(m.Changed); i++ {
		if swag.IsZero(m.Changed[i]) { // not required
			continue
		}

		if m.Changed[i] != nil {
			if err := m.Changed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) validateIsChanged(formats strfmt.Registry) error {

	if err := validate.Required("isChanged", "body", m.IsChanged); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBlocksDiffs) validateRemoved(formats strfmt.Registry) error {
	if swag.IsZero(m.Removed) { // not required
		return nil
	}

	for i := 0; i < len(m.Removed); i++ {
		if swag.IsZero(m.Removed[i]) { // not required
			continue
		}

		if m.Removed[i] != nil {
			if err := m.Removed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) validateSame(formats strfmt.Registry) error {
	if swag.IsZero(m.Same) { // not required
		return nil
	}

	for i := 0; i < len(m.Same); i++ {
		if swag.IsZero(m.Same[i]) { // not required
			continue
		}

		if m.Same[i] != nil {
			if err := m.Same[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("same" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("same" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this config blocks diffs based on the context it is used
func (m *ConfigBlocksDiffs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSame(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBlocksDiffs) contextValidateAdded(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Added); i++ {

		if m.Added[i] != nil {
			if err := m.Added[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("added" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("added" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) contextValidateChanged(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Changed); i++ {

		if m.Changed[i] != nil {
			if err := m.Changed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) contextValidateRemoved(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Removed); i++ {

		if m.Removed[i] != nil {
			if err := m.Removed[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("removed" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("removed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBlocksDiffs) contextValidateSame(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Same); i++ {

		if m.Same[i] != nil {
			if err := m.Same[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("same" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("same" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigBlocksDiffs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigBlocksDiffs) UnmarshalBinary(b []byte) error {
	var res ConfigBlocksDiffs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
