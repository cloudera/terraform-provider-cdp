// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdwHue Details of a Hue Query Editor.
//
// swagger:model CdwHue
type CdwHue struct {

	// Config for the Hue Query Editor.
	Config *ServiceConfigResp `json:"config,omitempty"`

	// The CRN of the user who created the Hue Query Editor.
	CreatorCrn string `json:"creatorCrn,omitempty"`

	// Database initialization strategy for Hue Query Editor.
	// Enum: ["CLONE_VW_DB","FLUSH","CREATE_OR_REUSE"]
	DbInitStrategy string `json:"dbInitStrategy,omitempty"`

	// Name of the database backing the Hue Query Editor.
	DbName string `json:"dbName,omitempty"`

	// Description for the Hue Query Editor.
	Description string `json:"description,omitempty"`

	// Current version of the Hue Query Editor.
	HueVersion string `json:"hueVersion,omitempty"`

	// Unique ID of Hue Query Editor.
	ID string `json:"id,omitempty"`

	// Number of Hue Query Editor backend pods.
	InstanceCount int32 `json:"instanceCount,omitempty"`

	// Name of the Hue Query Editor.
	Name string `json:"name,omitempty"`

	// The name of the Resource Pool the Hue Query Editor is in.
	ResourcePool string `json:"resourcePool,omitempty"`

	// Status of the Hue Query Editor.
	Status string `json:"status,omitempty"`

	// List of tags to apply on compute instances.
	Tags []*TagResponse `json:"tags"`

	// User groups that are allowed to access to Hue Query Editor.
	UserGroups []string `json:"userGroups"`
}

// Validate validates this cdw hue
func (m *CdwHue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbInitStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdwHue) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

var cdwHueTypeDbInitStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLONE_VW_DB","FLUSH","CREATE_OR_REUSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdwHueTypeDbInitStrategyPropEnum = append(cdwHueTypeDbInitStrategyPropEnum, v)
	}
}

const (

	// CdwHueDbInitStrategyCLONEVWDB captures enum value "CLONE_VW_DB"
	CdwHueDbInitStrategyCLONEVWDB string = "CLONE_VW_DB"

	// CdwHueDbInitStrategyFLUSH captures enum value "FLUSH"
	CdwHueDbInitStrategyFLUSH string = "FLUSH"

	// CdwHueDbInitStrategyCREATEORREUSE captures enum value "CREATE_OR_REUSE"
	CdwHueDbInitStrategyCREATEORREUSE string = "CREATE_OR_REUSE"
)

// prop value enum
func (m *CdwHue) validateDbInitStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdwHueTypeDbInitStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdwHue) validateDbInitStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DbInitStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDbInitStrategyEnum("dbInitStrategy", "body", m.DbInitStrategy); err != nil {
		return err
	}

	return nil
}

func (m *CdwHue) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cdw hue based on the context it is used
func (m *CdwHue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdwHue) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *CdwHue) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdwHue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdwHue) UnmarshalBinary(b []byte) error {
	var res CdwHue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
