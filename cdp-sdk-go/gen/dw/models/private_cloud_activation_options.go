// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrivateCloudActivationOptions Options for activating a Private Cloud environment.
//
// swagger:model PrivateCloudActivationOptions
type PrivateCloudActivationOptions struct {

	// The name of the DAS database. Not required for embedded databases
	DbDas string `json:"dbDas,omitempty"`

	// The name of the HUE database. Not required for embedded databases.
	DbHue string `json:"dbHue,omitempty"`

	// Password of delegation user.
	// Required: true
	DelegationPassword *string `json:"delegationPassword"`

	// Name of delegation user. This user is used between Hue - Impala to create a session, as Hue should not pass the user credentials, instead Hue authenticates with the delegation user, then this user will impersonate the logged in user. This means that the Delegation User and Password should be able to authenticate through LDAP.
	// Required: true
	DelegationUsername *string `json:"delegationUsername"`

	// The name of the Hive Security Context Constraint.
	SecurityContextConstraintName string `json:"securityContextConstraintName,omitempty"`

	// The storage class for the Local Storage Operator.
	StorageClass string `json:"storageClass,omitempty"`
}

// Validate validates this private cloud activation options
func (m *PrivateCloudActivationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelegationPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegationUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCloudActivationOptions) validateDelegationPassword(formats strfmt.Registry) error {

	if err := validate.Required("delegationPassword", "body", m.DelegationPassword); err != nil {
		return err
	}

	return nil
}

func (m *PrivateCloudActivationOptions) validateDelegationUsername(formats strfmt.Registry) error {

	if err := validate.Required("delegationUsername", "body", m.DelegationUsername); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this private cloud activation options based on context it is used
func (m *PrivateCloudActivationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrivateCloudActivationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateCloudActivationOptions) UnmarshalBinary(b []byte) error {
	var res PrivateCloudActivationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
