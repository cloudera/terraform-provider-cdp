// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivateCloudActivationOptions Options for activating a Private Cloud environment.
//
// swagger:model PrivateCloudActivationOptions
type PrivateCloudActivationOptions struct {

	// A certificate and private key pair belonging together for mutual SSL handshake when Database Catalog (aka DBC) connects to the metastore database.
	DbClientCredentials *KeyPairCredentials `json:"dbClientCredentials,omitempty"`

	// DEPRECATED: As of 1.5.5, this feature flag can be set as an advanced configuration. Enable to use dedicated nodes exclusively for executors and coordinators, and improve performance. You can enable this only if you reserved nodes while adding a CDP Private Cloud containerized ECS cluster. When disabled, non-compute pods such as MetaStore and Data Visualization can also use the reserved nodes.
	DedicatedExecutorNodes *bool `json:"dedicatedExecutorNodes,omitempty"`

	// DEPRECATED: As of PVC 1.5.4 we no longer use delegation user. Password of delegation user.
	DelegationPassword string `json:"delegationPassword,omitempty"`

	// DEPRECATED: As of PVC 1.5.4 we no longer use delegation user. Name of delegation user. This user is used between Hue - Impala to create a session, as Hue should not pass the user credentials, instead Hue authenticates with the delegation user, then this user will impersonate the logged in user. This means that the Delegation User and Password should be able to authenticate through LDAP.
	DelegationUsername string `json:"delegationUsername,omitempty"`

	// The storage class for the Local Storage Operator.
	StorageClass string `json:"storageClass,omitempty"`
}

// Validate validates this private cloud activation options
func (m *PrivateCloudActivationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbClientCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCloudActivationOptions) validateDbClientCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.DbClientCredentials) { // not required
		return nil
	}

	if m.DbClientCredentials != nil {
		if err := m.DbClientCredentials.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dbClientCredentials")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dbClientCredentials")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this private cloud activation options based on the context it is used
func (m *PrivateCloudActivationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbClientCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateCloudActivationOptions) contextValidateDbClientCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.DbClientCredentials != nil {

		if swag.IsZero(m.DbClientCredentials) { // not required
			return nil
		}

		if err := m.DbClientCredentials.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("dbClientCredentials")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("dbClientCredentials")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateCloudActivationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateCloudActivationOptions) UnmarshalBinary(b []byte) error {
	var res PrivateCloudActivationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
