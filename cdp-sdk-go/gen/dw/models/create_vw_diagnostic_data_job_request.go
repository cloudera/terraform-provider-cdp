// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVwDiagnosticDataJobRequest Request object for the createVwDiagnosticDataJob method.
//
// swagger:model CreateVwDiagnosticDataJobRequest
type CreateVwDiagnosticDataJobRequest struct {

	// Additional user-defined metadata information which is attached to resulting bundle-info.json when posting the bundle.
	BundleMetadata map[string]string `json:"bundleMetadata,omitempty"`

	// Optional support case number in case of UPLOAD_TO_CLOUDERA destination, otherwise only act as additional data.
	CaseNumber string `json:"caseNumber,omitempty"`

	// ID of cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Destination of the diagnostics collection.
	// Required: true
	// Enum: [UPLOAD_TO_CLOUDERA DOWNLOAD]
	Destination *string `json:"destination"`

	// The resulting bundle will contain logs/metrics before the specified end time. If not indicated, then the current time is taken as the end time.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// Forced recreation of the diagnostic job.
	Force *bool `json:"force,omitempty"`

	// Hive diagnostic options. If not provided, everything will be included into the Diagnostic Data.
	HiveDownloadOptions *HiveCreateDiagnosticDataDownloadOptions `json:"hiveDownloadOptions,omitempty"`

	// Impala diagnostic options. If not provided, everything will be included into the Diagnostic Data.
	ImpalaDownloadOptions *ImpalaCreateDiagnosticDataDownloadOptions `json:"impalaDownloadOptions,omitempty"`

	// The resulting bundle will contain logs/metrics after the specified start time. If not indicated, then 30 minutes ago from now is taken as the start time.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// ID of the Virtual Warehouse.
	// Required: true
	VwID *string `json:"vwId"`
}

// Validate validates this create vw diagnostic data job request
func (m *CreateVwDiagnosticDataJobRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveDownloadOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpalaDownloadOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVwID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

var createVwDiagnosticDataJobRequestTypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UPLOAD_TO_CLOUDERA","DOWNLOAD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createVwDiagnosticDataJobRequestTypeDestinationPropEnum = append(createVwDiagnosticDataJobRequestTypeDestinationPropEnum, v)
	}
}

const (

	// CreateVwDiagnosticDataJobRequestDestinationUPLOADTOCLOUDERA captures enum value "UPLOAD_TO_CLOUDERA"
	CreateVwDiagnosticDataJobRequestDestinationUPLOADTOCLOUDERA string = "UPLOAD_TO_CLOUDERA"

	// CreateVwDiagnosticDataJobRequestDestinationDOWNLOAD captures enum value "DOWNLOAD"
	CreateVwDiagnosticDataJobRequestDestinationDOWNLOAD string = "DOWNLOAD"
)

// prop value enum
func (m *CreateVwDiagnosticDataJobRequest) validateDestinationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createVwDiagnosticDataJobRequestTypeDestinationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationEnum("destination", "body", *m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateHiveDownloadOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveDownloadOptions) { // not required
		return nil
	}

	if m.HiveDownloadOptions != nil {
		if err := m.HiveDownloadOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveDownloadOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveDownloadOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateImpalaDownloadOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ImpalaDownloadOptions) { // not required
		return nil
	}

	if m.ImpalaDownloadOptions != nil {
		if err := m.ImpalaDownloadOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impalaDownloadOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impalaDownloadOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) validateVwID(formats strfmt.Registry) error {

	if err := validate.Required("vwId", "body", m.VwID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create vw diagnostic data job request based on the context it is used
func (m *CreateVwDiagnosticDataJobRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHiveDownloadOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpalaDownloadOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) contextValidateHiveDownloadOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveDownloadOptions != nil {
		if err := m.HiveDownloadOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveDownloadOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveDownloadOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CreateVwDiagnosticDataJobRequest) contextValidateImpalaDownloadOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ImpalaDownloadOptions != nil {
		if err := m.ImpalaDownloadOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("impalaDownloadOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("impalaDownloadOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVwDiagnosticDataJobRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVwDiagnosticDataJobRequest) UnmarshalBinary(b []byte) error {
	var res CreateVwDiagnosticDataJobRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
