// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DescribeServerSettingItemRequiresUpdate Indicates an update requirement for the change to take effect. `ENVIRONMENT` - Means that the environments need to be updated/recreated for the setting change to take effect. `DBC` - Means that the Database Catalogs need an update/recreation. `IMPALA` - Means that the Impala Virtual Warehouses need the update/recreation. `HIVE` - Means that the Hive Virtual Warehouses need the update/recreation. `TRINO` - Means that the Trino Virtual Warehouses need the update/recreation. `VIZ` - Means that the Dataviz need the update/recreation. `CDW_HUE` - Means that the CDW Hues need an update/recreation.
//
// swagger:model DescribeServerSettingItemRequiresUpdate
type DescribeServerSettingItemRequiresUpdate string

func NewDescribeServerSettingItemRequiresUpdate(value DescribeServerSettingItemRequiresUpdate) *DescribeServerSettingItemRequiresUpdate {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DescribeServerSettingItemRequiresUpdate.
func (m DescribeServerSettingItemRequiresUpdate) Pointer() *DescribeServerSettingItemRequiresUpdate {
	return &m
}

const (

	// DescribeServerSettingItemRequiresUpdateENVIRONMENT captures enum value "ENVIRONMENT"
	DescribeServerSettingItemRequiresUpdateENVIRONMENT DescribeServerSettingItemRequiresUpdate = "ENVIRONMENT"

	// DescribeServerSettingItemRequiresUpdateDBC captures enum value "DBC"
	DescribeServerSettingItemRequiresUpdateDBC DescribeServerSettingItemRequiresUpdate = "DBC"

	// DescribeServerSettingItemRequiresUpdateIMPALA captures enum value "IMPALA"
	DescribeServerSettingItemRequiresUpdateIMPALA DescribeServerSettingItemRequiresUpdate = "IMPALA"

	// DescribeServerSettingItemRequiresUpdateHIVE captures enum value "HIVE"
	DescribeServerSettingItemRequiresUpdateHIVE DescribeServerSettingItemRequiresUpdate = "HIVE"

	// DescribeServerSettingItemRequiresUpdateTRINO captures enum value "TRINO"
	DescribeServerSettingItemRequiresUpdateTRINO DescribeServerSettingItemRequiresUpdate = "TRINO"

	// DescribeServerSettingItemRequiresUpdateVIZ captures enum value "VIZ"
	DescribeServerSettingItemRequiresUpdateVIZ DescribeServerSettingItemRequiresUpdate = "VIZ"

	// DescribeServerSettingItemRequiresUpdateCDWHUE captures enum value "CDW_HUE"
	DescribeServerSettingItemRequiresUpdateCDWHUE DescribeServerSettingItemRequiresUpdate = "CDW_HUE"
)

// for schema
var describeServerSettingItemRequiresUpdateEnum []any

func init() {
	var res []DescribeServerSettingItemRequiresUpdate
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","DBC","IMPALA","HIVE","TRINO","VIZ","CDW_HUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		describeServerSettingItemRequiresUpdateEnum = append(describeServerSettingItemRequiresUpdateEnum, v)
	}
}

func (m DescribeServerSettingItemRequiresUpdate) validateDescribeServerSettingItemRequiresUpdateEnum(path, location string, value DescribeServerSettingItemRequiresUpdate) error {
	if err := validate.EnumCase(path, location, value, describeServerSettingItemRequiresUpdateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this describe server setting item requires update
func (m DescribeServerSettingItemRequiresUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDescribeServerSettingItemRequiresUpdateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this describe server setting item requires update based on context it is used
func (m DescribeServerSettingItemRequiresUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
