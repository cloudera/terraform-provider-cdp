// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAwsClusterRequest Request object for the updateAwsCluster method.
//
// swagger:model UpdateAwsClusterRequest
type UpdateAwsClusterRequest struct {

	// The ID of the AWS cluster to update.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Cluster description.
	Description string `json:"description,omitempty"`

	// Cluster external bucket definition to update.
	ExternalBuckets map[string]UpdateClusterExternalBucketAccessInfo `json:"externalBuckets,omitempty"`

	// Cluster observability configurations to update. You can forward logs from environments activated in Cloudera Data Warehouse (CDW) to observability and monitoring systems such as Datadog, New Relic, or Splunk. Please refer to the following Cloudera documentation for more info. https://docs.cloudera.com/data-warehouse/cloud/monitoring/topics/dw-observability-log-forwarding.html
	ObservabilityConfig *UpdateClusterObservabilityConfig `json:"observabilityConfig,omitempty"`

	// List of IP address CIDRs to whitelist for kubernetes cluster access.
	WhitelistK8sClusterAccessIPCIDRs []string `json:"whitelistK8sClusterAccessIpCIDRs"`

	// List of IP address CIDRs to whitelist for workload access.
	WhitelistWorkloadAccessIPCIDRs []string `json:"whitelistWorkloadAccessIpCIDRs"`
}

// Validate validates this update aws cluster request
func (m *UpdateAwsClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObservabilityConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAwsClusterRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAwsClusterRequest) validateExternalBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalBuckets) { // not required
		return nil
	}

	for k := range m.ExternalBuckets {

		if err := validate.Required("externalBuckets"+"."+k, "body", m.ExternalBuckets[k]); err != nil {
			return err
		}
		if val, ok := m.ExternalBuckets[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalBuckets" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalBuckets" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateAwsClusterRequest) validateObservabilityConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ObservabilityConfig) { // not required
		return nil
	}

	if m.ObservabilityConfig != nil {
		if err := m.ObservabilityConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("observabilityConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("observabilityConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update aws cluster request based on the context it is used
func (m *UpdateAwsClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObservabilityConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAwsClusterRequest) contextValidateExternalBuckets(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ExternalBuckets {

		if val, ok := m.ExternalBuckets[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *UpdateAwsClusterRequest) contextValidateObservabilityConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ObservabilityConfig != nil {

		if swag.IsZero(m.ObservabilityConfig) { // not required
			return nil
		}

		if err := m.ObservabilityConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("observabilityConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("observabilityConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAwsClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAwsClusterRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAwsClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
