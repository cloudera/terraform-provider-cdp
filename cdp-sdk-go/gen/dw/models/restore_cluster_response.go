// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreClusterResponse Response object for the restoreCluster method.
//
// swagger:model RestoreClusterResponse
type RestoreClusterResponse struct {

	// The the ID of the cluster.
	ClusterID string `json:"clusterId,omitempty"`

	// Information about the restore-plan of the DbCatalogs.
	DbcRestorePlans []*RestoreClusterEntityPlan `json:"dbcRestorePlans"`

	// Information about the restore-plan of the Hive Virtual Warehouses.
	HiveRestorePlans []*RestoreClusterEntityPlan `json:"hiveRestorePlans"`

	// Information about the restore-plan of the Impala Virtual Warehouses.
	ImpalaRestorePlans []*RestoreClusterEntityPlan `json:"impalaRestorePlans"`

	// The the ID of the restore operation.
	OperationID string `json:"operationId,omitempty"`

	// Information about the restore-plan of the Data Visualization Apps.
	VizRestorePlans []*RestoreClusterEntityPlan `json:"vizRestorePlans"`
}

// Validate validates this restore cluster response
func (m *RestoreClusterResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbcRestorePlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveRestorePlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpalaRestorePlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVizRestorePlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreClusterResponse) validateDbcRestorePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.DbcRestorePlans) { // not required
		return nil
	}

	for i := 0; i < len(m.DbcRestorePlans); i++ {
		if swag.IsZero(m.DbcRestorePlans[i]) { // not required
			continue
		}

		if m.DbcRestorePlans[i] != nil {
			if err := m.DbcRestorePlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbcRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbcRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) validateHiveRestorePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveRestorePlans) { // not required
		return nil
	}

	for i := 0; i < len(m.HiveRestorePlans); i++ {
		if swag.IsZero(m.HiveRestorePlans[i]) { // not required
			continue
		}

		if m.HiveRestorePlans[i] != nil {
			if err := m.HiveRestorePlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hiveRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hiveRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) validateImpalaRestorePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.ImpalaRestorePlans) { // not required
		return nil
	}

	for i := 0; i < len(m.ImpalaRestorePlans); i++ {
		if swag.IsZero(m.ImpalaRestorePlans[i]) { // not required
			continue
		}

		if m.ImpalaRestorePlans[i] != nil {
			if err := m.ImpalaRestorePlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("impalaRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("impalaRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) validateVizRestorePlans(formats strfmt.Registry) error {
	if swag.IsZero(m.VizRestorePlans) { // not required
		return nil
	}

	for i := 0; i < len(m.VizRestorePlans); i++ {
		if swag.IsZero(m.VizRestorePlans[i]) { // not required
			continue
		}

		if m.VizRestorePlans[i] != nil {
			if err := m.VizRestorePlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vizRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vizRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restore cluster response based on the context it is used
func (m *RestoreClusterResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDbcRestorePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveRestorePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpalaRestorePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVizRestorePlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreClusterResponse) contextValidateDbcRestorePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DbcRestorePlans); i++ {

		if m.DbcRestorePlans[i] != nil {
			if err := m.DbcRestorePlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dbcRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dbcRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) contextValidateHiveRestorePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HiveRestorePlans); i++ {

		if m.HiveRestorePlans[i] != nil {
			if err := m.HiveRestorePlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hiveRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hiveRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) contextValidateImpalaRestorePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImpalaRestorePlans); i++ {

		if m.ImpalaRestorePlans[i] != nil {
			if err := m.ImpalaRestorePlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("impalaRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("impalaRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RestoreClusterResponse) contextValidateVizRestorePlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VizRestorePlans); i++ {

		if m.VizRestorePlans[i] != nil {
			if err := m.VizRestorePlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vizRestorePlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vizRestorePlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreClusterResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreClusterResponse) UnmarshalBinary(b []byte) error {
	var res RestoreClusterResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
