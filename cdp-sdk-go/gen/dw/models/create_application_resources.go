// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateApplicationResources The resource requirements of a component.
//
// swagger:model CreateApplicationResources
type CreateApplicationResources struct {

	// Breakdown of the service memory requirements.
	Breakdown *CreateApplicationResourcesBreakdown `json:"breakdown,omitempty"`

	// Overall CPU requirements.
	CPU float32 `json:"cpu,omitempty"`

	// Temporary storage for CDW pods, used for storing configurations and temporary data needed during a process. The lifespan of ephemeral storage is tied to the pod.
	EphemeralStorage *string `json:"ephemeralStorage,omitempty"`

	// Local disk size requirements.
	LocalStorageSize *CreateApplicationResourcesLocalStorageSize `json:"localStorageSize,omitempty"`

	// Overall memory requirements.
	Memory string `json:"memory,omitempty"`
}

// Validate validates this create application resources
func (m *CreateApplicationResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalStorageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApplicationResources) validateBreakdown(formats strfmt.Registry) error {
	if swag.IsZero(m.Breakdown) { // not required
		return nil
	}

	if m.Breakdown != nil {
		if err := m.Breakdown.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdown")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdown")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationResources) validateLocalStorageSize(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalStorageSize) { // not required
		return nil
	}

	if m.LocalStorageSize != nil {
		if err := m.LocalStorageSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localStorageSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localStorageSize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create application resources based on the context it is used
func (m *CreateApplicationResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakdown(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalStorageSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateApplicationResources) contextValidateBreakdown(ctx context.Context, formats strfmt.Registry) error {

	if m.Breakdown != nil {

		if swag.IsZero(m.Breakdown) { // not required
			return nil
		}

		if err := m.Breakdown.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdown")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdown")
			}
			return err
		}
	}

	return nil
}

func (m *CreateApplicationResources) contextValidateLocalStorageSize(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalStorageSize != nil {

		if swag.IsZero(m.LocalStorageSize) { // not required
			return nil
		}

		if err := m.LocalStorageSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localStorageSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localStorageSize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateApplicationResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateApplicationResources) UnmarshalBinary(b []byte) error {
	var res CreateApplicationResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
