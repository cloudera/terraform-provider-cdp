// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiagnosticDataJobStatus Represents the possible status values of a Diagnostic Data Job.
//
// swagger:model DiagnosticDataJobStatus
type DiagnosticDataJobStatus string

func NewDiagnosticDataJobStatus(value DiagnosticDataJobStatus) *DiagnosticDataJobStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DiagnosticDataJobStatus.
func (m DiagnosticDataJobStatus) Pointer() *DiagnosticDataJobStatus {
	return &m
}

const (

	// DiagnosticDataJobStatusStarting captures enum value "Starting"
	DiagnosticDataJobStatusStarting DiagnosticDataJobStatus = "Starting"

	// DiagnosticDataJobStatusSucceeded captures enum value "Succeeded"
	DiagnosticDataJobStatusSucceeded DiagnosticDataJobStatus = "Succeeded"

	// DiagnosticDataJobStatusFailed captures enum value "Failed"
	DiagnosticDataJobStatusFailed DiagnosticDataJobStatus = "Failed"

	// DiagnosticDataJobStatusRunning captures enum value "Running"
	DiagnosticDataJobStatusRunning DiagnosticDataJobStatus = "Running"

	// DiagnosticDataJobStatusUnknown captures enum value "Unknown"
	DiagnosticDataJobStatusUnknown DiagnosticDataJobStatus = "Unknown"

	// DiagnosticDataJobStatusDeleted captures enum value "Deleted"
	DiagnosticDataJobStatusDeleted DiagnosticDataJobStatus = "Deleted"
)

// for schema
var diagnosticDataJobStatusEnum []interface{}

func init() {
	var res []DiagnosticDataJobStatus
	if err := json.Unmarshal([]byte(`["Starting","Succeeded","Failed","Running","Unknown","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diagnosticDataJobStatusEnum = append(diagnosticDataJobStatusEnum, v)
	}
}

func (m DiagnosticDataJobStatus) validateDiagnosticDataJobStatusEnum(path, location string, value DiagnosticDataJobStatus) error {
	if err := validate.EnumCase(path, location, value, diagnosticDataJobStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this diagnostic data job status
func (m DiagnosticDataJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiagnosticDataJobStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this diagnostic data job status based on context it is used
func (m DiagnosticDataJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
