// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateHueRequest Request object for the createHue call.
//
// swagger:model CreateHueRequest
type CreateHueRequest struct {

	// Cluster of the Hue Query Editor.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Config for Hue Query Editor.
	Config *ServiceConfigReq `json:"config,omitempty"`

	// Database initialization strategy for Hue Query Editor.
	// Enum: ["CLONE_VW_DB","FLUSH","CREATE_OR_REUSE"]
	DbInitStrategy string `json:"dbInitStrategy,omitempty"`

	// Name of the database backing the Hue Query Editor.
	DbName string `json:"dbName,omitempty"`

	// Description for the Hue Query Editor.
	Description string `json:"description,omitempty"`

	// Version of the Hue Query Editor.
	HueVersion string `json:"hueVersion,omitempty"`

	// Number of Hue Query Editor backend pods.
	// Minimum: 1
	InstanceCount *int32 `json:"instanceCount,omitempty"`

	// Name of the Hue Query Editor.
	// Required: true
	Name *string `json:"name"`

	// The Resource Pool of the Hue Query Editor.
	ResourcePool string `json:"resourcePool,omitempty"`

	// List of tags to apply on compute instances.
	Tags []*TagRequest `json:"tags"`

	// User groups that are allowed to access to Hue Query Editor.
	UserGroups []string `json:"userGroups"`
}

// Validate validates this create hue request
func (m *CreateHueRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbInitStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateHueRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *CreateHueRequest) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

var createHueRequestTypeDbInitStrategyPropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLONE_VW_DB","FLUSH","CREATE_OR_REUSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createHueRequestTypeDbInitStrategyPropEnum = append(createHueRequestTypeDbInitStrategyPropEnum, v)
	}
}

const (

	// CreateHueRequestDbInitStrategyCLONEVWDB captures enum value "CLONE_VW_DB"
	CreateHueRequestDbInitStrategyCLONEVWDB string = "CLONE_VW_DB"

	// CreateHueRequestDbInitStrategyFLUSH captures enum value "FLUSH"
	CreateHueRequestDbInitStrategyFLUSH string = "FLUSH"

	// CreateHueRequestDbInitStrategyCREATEORREUSE captures enum value "CREATE_OR_REUSE"
	CreateHueRequestDbInitStrategyCREATEORREUSE string = "CREATE_OR_REUSE"
)

// prop value enum
func (m *CreateHueRequest) validateDbInitStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createHueRequestTypeDbInitStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateHueRequest) validateDbInitStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.DbInitStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateDbInitStrategyEnum("dbInitStrategy", "body", m.DbInitStrategy); err != nil {
		return err
	}

	return nil
}

func (m *CreateHueRequest) validateInstanceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("instanceCount", "body", int64(*m.InstanceCount), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateHueRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateHueRequest) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create hue request based on the context it is used
func (m *CreateHueRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateHueRequest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

func (m *CreateHueRequest) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateHueRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateHueRequest) UnmarshalBinary(b []byte) error {
	var res CreateHueRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
