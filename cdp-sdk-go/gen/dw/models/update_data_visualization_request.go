// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDataVisualizationRequest Request object for the updateDataVisualization method.
//
// swagger:model UpdateDataVisualizationRequest
type UpdateDataVisualizationRequest struct {

	// ID of the Cloudera Data Visualization's cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// The service configuration to update the DataVisualization with. This will be applied on top of the existing configuration so there's no need to list configurations that stay the same.
	Config *VizConfig `json:"config,omitempty"`

	// ID of the Cloudera Data Visualization.
	// Required: true
	DataVisualizationID *string `json:"dataVisualizationId"`
}

// Validate validates this update data visualization request
func (m *UpdateDataVisualizationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataVisualizationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDataVisualizationRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateDataVisualizationRequest) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateDataVisualizationRequest) validateDataVisualizationID(formats strfmt.Registry) error {

	if err := validate.Required("dataVisualizationId", "body", m.DataVisualizationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update data visualization request based on the context it is used
func (m *UpdateDataVisualizationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDataVisualizationRequest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDataVisualizationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDataVisualizationRequest) UnmarshalBinary(b []byte) error {
	var res UpdateDataVisualizationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
