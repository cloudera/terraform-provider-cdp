// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImpalaOptionsCreateRequest Impala specific options. It cannot be provided for Virtual Warehouse types other than Impala.
//
// swagger:model ImpalaOptionsCreateRequest
type ImpalaOptionsCreateRequest struct {

	// Defines the limit for scratch space in GiB needed by Impala for spilling queries. If this is set, "spillToS3Uri" cannot be set. The valid values are between 1-16000 for AWS and 1-16684 for Azure. It will choose the first valid value for which the total disk space is greater than or equal to the specified scratch space limit. The valid scratch space limit values per node in GiBs for AWS are [300, 634, 968, 1302, 1636, 1970, 2304, 2638, 2972, 6550, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000]. Valid values for Azure are [300, 684, 812, 1068, 1324, 1836, 2348, 3372, 4396, 8492, 16684].
	ScratchSpaceLimit int32 `json:"scratchSpaceLimit,omitempty"`

	// Set S3 URI in "s3://bucket/path" format and enable spilling to S3. If this is set, "scratchSpaceLimit" cannot be set. Spilling to a remote storage is not supported on Azure, it is available on AWS and PvC platforms. If your workload results in large volumes of intermediate data being written, it is recommended to configure the heavy spilling queries to use a remote storage location rather than the local one since Impala occasionally needs to use persistent storage for writing intermediate files during large sorts, joins, aggregations, or analytic function operations. Note that this value is ignored if the Impala version does not support spilling to S3.
	SpillToS3URI string `json:"spillToS3Uri,omitempty"`
}

// Validate validates this impala options create request
func (m *ImpalaOptionsCreateRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this impala options create request based on context it is used
func (m *ImpalaOptionsCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImpalaOptionsCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImpalaOptionsCreateRequest) UnmarshalBinary(b []byte) error {
	var res ImpalaOptionsCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
