// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyValuesDiff Different between keyValues of two ConfigContents.
//
// swagger:model KeyValuesDiff
type KeyValuesDiff struct {

	// Keys that are only present in the new configuration.
	Added map[string]string `json:"added,omitempty"`

	// Keys with different values.
	Changed map[string]StringDiff `json:"changed,omitempty"`

	// Keys that are only present in the old configuration.
	Removed map[string]string `json:"removed,omitempty"`

	// Keys that are present in both configurations.
	Same map[string]string `json:"same,omitempty"`
}

// Validate validates this key values diff
func (m *KeyValuesDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChanged(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyValuesDiff) validateChanged(formats strfmt.Registry) error {
	if swag.IsZero(m.Changed) { // not required
		return nil
	}

	for k := range m.Changed {

		if err := validate.Required("changed"+"."+k, "body", m.Changed[k]); err != nil {
			return err
		}
		if val, ok := m.Changed[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("changed" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("changed" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this key values diff based on the context it is used
func (m *KeyValuesDiff) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChanged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyValuesDiff) contextValidateChanged(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Changed {

		if val, ok := m.Changed[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyValuesDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyValuesDiff) UnmarshalBinary(b []byte) error {
	var res KeyValuesDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
