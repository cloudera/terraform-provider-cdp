// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateHueRequest Request object for the updateHue method.
//
// swagger:model UpdateHueRequest
type UpdateHueRequest struct {

	// ID of the Hue Query Editor's cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// The service configuration to update the Hue Query Editor with. This will be applied on top of the existing configuration so there's no need to list configurations that stay the same.
	Config *ServiceConfigReq `json:"config,omitempty"`

	// ID of the Hue Query Editor.
	// Required: true
	HueID *string `json:"hueId"`

	// Number of Hue Query Editor backend pods.
	// Minimum: 1
	InstanceCount *int32 `json:"instanceCount,omitempty"`

	// DEPRECATED: This functionality will be removed in the next release. The Resource Pool of the Hue Query Editor.
	ResourcePool string `json:"resourcePool,omitempty"`

	// User groups that are allowed to access to Hue Query Editor.
	UserGroups []string `json:"userGroups"`
}

// Validate validates this update hue request
func (m *UpdateHueRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateHueRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateHueRequest) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

func (m *UpdateHueRequest) validateHueID(formats strfmt.Registry) error {

	if err := validate.Required("hueId", "body", m.HueID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateHueRequest) validateInstanceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("instanceCount", "body", int64(*m.InstanceCount), 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update hue request based on the context it is used
func (m *UpdateHueRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateHueRequest) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("config")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("config")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateHueRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateHueRequest) UnmarshalBinary(b []byte) error {
	var res UpdateHueRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
