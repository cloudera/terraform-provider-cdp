// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AwsActivationOptions Options for activating an AWS environment.
//
// swagger:model AwsActivationOptions
type AwsActivationOptions struct {

	// Custom AMI ID.
	CustomAmiID string `json:"customAmiId,omitempty"`

	// Use this option to set up AWS EKS cluster in private only mode with restricted access only from internal/peered networks. Ensure you have ccmv2 setup functional to achieve this integration.
	EnablePrivateEKS *bool `json:"enablePrivateEKS,omitempty"`

	// Whether to enable Spot instances for Virtual warehouses. It cannot be updated later. If the aws-options is not provided it defaults to false.
	EnableSpotInstances *bool `json:"enableSpotInstances,omitempty"`

	// IDs of AWS subnets where the cluster load balancer should be deployed.
	LbSubnetIds []string `json:"lbSubnetIds"`

	// Managed Policy Arn to be attached to the Node Instance Role.
	NodeRoleCDWManagedPolicyArn string `json:"nodeRoleCDWManagedPolicyArn,omitempty"`

	// Non-transparent proxy settings. Read more: https://docs.cloudera.com/data-warehouse/cloud/aws-environments/topics/dw-aws-use-non-transparent-proxy.html
	NonTransparentProxy *AwsActivationOptionsNonTransparentProxy `json:"nonTransparentProxy,omitempty"`

	// Use this option to activate the environment with fewer than half of the standard required IAM permissions on your AWS cross-account IAM role.
	ReducedPermissionMode bool `json:"reducedPermissionMode,omitempty"`

	// IDs of AWS subnets where the cluster worker nodes should be deployed.
	WorkerSubnetIds []string `json:"workerSubnetIds"`
}

// Validate validates this aws activation options
func (m *AwsActivationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonTransparentProxy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsActivationOptions) validateNonTransparentProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.NonTransparentProxy) { // not required
		return nil
	}

	if m.NonTransparentProxy != nil {
		if err := m.NonTransparentProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nonTransparentProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nonTransparentProxy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aws activation options based on the context it is used
func (m *AwsActivationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNonTransparentProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsActivationOptions) contextValidateNonTransparentProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.NonTransparentProxy != nil {

		if swag.IsZero(m.NonTransparentProxy) { // not required
			return nil
		}

		if err := m.NonTransparentProxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nonTransparentProxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nonTransparentProxy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AwsActivationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsActivationOptions) UnmarshalBinary(b []byte) error {
	var res AwsActivationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
