// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListDbcEventsRequest Request object for the listDbcEvents method.
//
// swagger:model ListDbcEventsRequest
type ListDbcEventsRequest struct {

	// Provide the result in ascending order, default is descending.
	Ascending *bool `json:"ascending,omitempty"`

	// ID of cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// ID of the Database Catalog.
	// Required: true
	DbcID *string `json:"dbcId"`

	// Limit the number of returned rows. If not specified all the events will be returned. Please note the DWX only stores the last 50 events.
	Limit int32 `json:"limit,omitempty"`
}

// Validate validates this list dbc events request
func (m *ListDbcEventsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbcID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListDbcEventsRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ListDbcEventsRequest) validateDbcID(formats strfmt.Registry) error {

	if err := validate.Required("dbcId", "body", m.DbcID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list dbc events request based on context it is used
func (m *ListDbcEventsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListDbcEventsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListDbcEventsRequest) UnmarshalBinary(b []byte) error {
	var res ListDbcEventsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
