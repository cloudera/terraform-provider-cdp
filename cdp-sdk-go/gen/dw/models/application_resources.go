// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationResources The resource requirements of a component.
//
// swagger:model ApplicationResources
type ApplicationResources struct {

	// Breakdown of the service memory requirements.
	Breakdown *ApplicationResourcesBreakdown `json:"breakdown,omitempty"`

	// Overall CPU requirements.
	CPU float32 `json:"cpu,omitempty"`

	// Temporary storage for CDW pods, used for storing configurations and temporary data needed during a process. The lifespan of ephemeral storage is tied to the pod.
	EphemeralStorage *string `json:"ephemeralStorage,omitempty"`

	// Local disk size requirements.
	LocalStorageSize *ApplicationResourcesLocalStorageSize `json:"localStorageSize,omitempty"`

	// Overall memory requirements.
	Memory string `json:"memory,omitempty"`
}

// Validate validates this application resources
func (m *ApplicationResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalStorageSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationResources) validateBreakdown(formats strfmt.Registry) error {
	if swag.IsZero(m.Breakdown) { // not required
		return nil
	}

	if m.Breakdown != nil {
		if err := m.Breakdown.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("breakdown")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("breakdown")
			}

			return err
		}
	}

	return nil
}

func (m *ApplicationResources) validateLocalStorageSize(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalStorageSize) { // not required
		return nil
	}

	if m.LocalStorageSize != nil {
		if err := m.LocalStorageSize.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("localStorageSize")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("localStorageSize")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this application resources based on the context it is used
func (m *ApplicationResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakdown(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalStorageSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationResources) contextValidateBreakdown(ctx context.Context, formats strfmt.Registry) error {

	if m.Breakdown != nil {

		if swag.IsZero(m.Breakdown) { // not required
			return nil
		}

		if err := m.Breakdown.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("breakdown")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("breakdown")
			}

			return err
		}
	}

	return nil
}

func (m *ApplicationResources) contextValidateLocalStorageSize(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalStorageSize != nil {

		if swag.IsZero(m.LocalStorageSize) { // not required
			return nil
		}

		if err := m.LocalStorageSize.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("localStorageSize")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("localStorageSize")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationResources) UnmarshalBinary(b []byte) error {
	var res ApplicationResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
