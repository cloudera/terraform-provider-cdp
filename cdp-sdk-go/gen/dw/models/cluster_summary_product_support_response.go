// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSummaryProductSupportResponse Support lifecycle details of the given Cluster version (see version field). Learn more at Support lifecycle site: https://www.cloudera.com/services-and-support/support-lifecycle-policy.html.
//
// swagger:model ClusterSummaryProductSupportResponse
type ClusterSummaryProductSupportResponse struct {

	// Shows the expiration date of the support for this Cluster version.
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"expiryDate,omitempty"`

	// Message.
	Message string `json:"message,omitempty"`

	// Status of the support lifecycle. *COVERED*: The Cluster version has active support. *EXPIRED*: The Cluster version is no-longer supported. *UNKNOWN*: The Cluster version is missing or incorrect.
	Status string `json:"status,omitempty"`
}

// Validate validates this cluster summary product support response
func (m *ClusterSummaryProductSupportResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSummaryProductSupportResponse) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryDate", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster summary product support response based on context it is used
func (m *ClusterSummaryProductSupportResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSummaryProductSupportResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSummaryProductSupportResponse) UnmarshalBinary(b []byte) error {
	var res ClusterSummaryProductSupportResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
