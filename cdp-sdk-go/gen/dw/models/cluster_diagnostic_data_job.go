// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDiagnosticDataJob Represents a Diagnostic Data Job.
//
// swagger:model ClusterDiagnosticDataJob
type ClusterDiagnosticDataJob struct {

	// The finish time of the Diagnostic Data Job.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// The unique identifier of the Diagnostic Data Job.
	JobID string `json:"jobId,omitempty"`

	// Additional key-value pair attributes associated with the Diagnostic Data Job.
	Labels map[string]string `json:"labels,omitempty"`

	// The start time of the Diagnostic Data Job.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// The job status.
	Status DiagnosticDataJobStatus `json:"status,omitempty"`

	// This URL points to a download location if the destination is DOWNLOAD.
	URL string `json:"url,omitempty"`
}

// Validate validates this cluster diagnostic data job
func (m *ClusterDiagnosticDataJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDiagnosticDataJob) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDiagnosticDataJob) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDiagnosticDataJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this cluster diagnostic data job based on the context it is used
func (m *ClusterDiagnosticDataJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDiagnosticDataJob) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDiagnosticDataJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDiagnosticDataJob) UnmarshalBinary(b []byte) error {
	var res ClusterDiagnosticDataJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
