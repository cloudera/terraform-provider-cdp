// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImpalaHighAvailabilityMode Set Impala High Availability mode. If not provided, the default will apply. DISABLED - Disables Impala coordinator and Database Catalog high availability. ACTIVE_PASSIVE - Runs multiple coordinators (one active, one passive) and Database Catalogs (one active, one passive). ACTIVE_ACTIVE - Runs multiple coordinators (both active) and Database Catalogs (one active, one passive). If Unified Analytics is enabled, then this cannot be set to ACTIVE_ACTIVE.
//
// swagger:model ImpalaHighAvailabilityMode
type ImpalaHighAvailabilityMode string

func NewImpalaHighAvailabilityMode(value ImpalaHighAvailabilityMode) *ImpalaHighAvailabilityMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImpalaHighAvailabilityMode.
func (m ImpalaHighAvailabilityMode) Pointer() *ImpalaHighAvailabilityMode {
	return &m
}

const (

	// ImpalaHighAvailabilityModeACTIVEPASSIVE captures enum value "ACTIVE_PASSIVE"
	ImpalaHighAvailabilityModeACTIVEPASSIVE ImpalaHighAvailabilityMode = "ACTIVE_PASSIVE"

	// ImpalaHighAvailabilityModeACTIVEACTIVE captures enum value "ACTIVE_ACTIVE"
	ImpalaHighAvailabilityModeACTIVEACTIVE ImpalaHighAvailabilityMode = "ACTIVE_ACTIVE"

	// ImpalaHighAvailabilityModeDISABLED captures enum value "DISABLED"
	ImpalaHighAvailabilityModeDISABLED ImpalaHighAvailabilityMode = "DISABLED"
)

// for schema
var impalaHighAvailabilityModeEnum []interface{}

func init() {
	var res []ImpalaHighAvailabilityMode
	if err := json.Unmarshal([]byte(`["ACTIVE_PASSIVE","ACTIVE_ACTIVE","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		impalaHighAvailabilityModeEnum = append(impalaHighAvailabilityModeEnum, v)
	}
}

func (m ImpalaHighAvailabilityMode) validateImpalaHighAvailabilityModeEnum(path, location string, value ImpalaHighAvailabilityMode) error {
	if err := validate.EnumCase(path, location, value, impalaHighAvailabilityModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this impala high availability mode
func (m ImpalaHighAvailabilityMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImpalaHighAvailabilityModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this impala high availability mode based on context it is used
func (m ImpalaHighAvailabilityMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
