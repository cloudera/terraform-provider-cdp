// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSummaryResponse A Cloudera Data Warehouse cluster.
//
// swagger:model ClusterSummaryResponse
type ClusterSummaryResponse struct {

	// Response object of AWS related cluster options.
	AwsOptions *AwsOptionsResponse `json:"awsOptions,omitempty"`

	// Response object of Azure related cluster options.
	AzureOptions *AzureOptionsResponse `json:"azureOptions,omitempty"`

	// The cloud platform of the environment that was used to create this cluster.
	CloudPlatform string `json:"cloudPlatform,omitempty"`

	// DEPRECATED: The cluster level instance type selection will be replaced by virtual warehouse level selection. Compute instance types that the environment is restricted to use. This affects the creation of the virtual warehouses where this restriction will apply.
	ComputeInstanceTypes []string `json:"computeInstanceTypes"`

	// Creation date of cluster.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// The creator of the cluster.
	Creator *ActorResponse `json:"creator,omitempty"`

	// The CRN of the cluster.
	Crn string `json:"crn,omitempty"`

	// Cluster description.
	Description string `json:"description,omitempty"`

	// Denotes whether the private load balancer is enabled for the cluster.
	EnablePrivateLoadBalancer *bool `json:"enablePrivateLoadBalancer,omitempty"`

	// Denotes whether the spot instances have been enabled for the cluster. This value is only available for AWS and Azure clusters.
	EnableSpotInstances bool `json:"enableSpotInstances,omitempty"`

	// The CRN of the environment where the cluster is located.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// External buckets attached to the environment.
	ExternalBuckets []*ExternalBucket `json:"externalBuckets"`

	// The ID of the cluster.
	ID string `json:"id,omitempty"`

	// Name of the cluster (same as the name of the environment).
	Name string `json:"name,omitempty"`

	// Support lifecycle details of the given Cluster version (see version field). Learn more at Support lifecycle site: https://www.cloudera.com/services-and-support/support-lifecycle-policy.html.
	ProductSupport *ClusterSummaryProductSupportResponse `json:"productSupport,omitempty"`

	// DEPRECATED - will be removed in future releases. Number of additional reserved nodes for executors and coordinators to use during autoscaling.
	ReservedComputeNodes int32 `json:"reservedComputeNodes,omitempty"`

	// DEPRECATED - will be removed in future releases. Number of additional reserved nodes for other services in the cluster.
	ReservedSharedServicesNodes int32 `json:"reservedSharedServicesNodes,omitempty"`

	// The name of the Resource Pool the cluster is in.
	ResourcePool string `json:"resourcePool,omitempty"`

	// Status of the cluster. Possible values are: Creating, Created, Accepted, Starting, Running, Stopping, Stopped, Updating, PreUpdate, Upgrading, PreUpgrade, Restarting, Deleting, Waiting, Failed, Error.
	Status string `json:"status,omitempty"`

	// Denotes whether the overlay network is being used for the cluster.
	UseOverlayNetwork *bool `json:"useOverlayNetwork,omitempty"`

	// The version of the deployed CDW cluster.
	Version string `json:"version,omitempty"`

	// List of IP address CIDRs to whitelist for kubernetes cluster access.
	WhitelistK8sClusterAccessIPCIDRs string `json:"whitelistK8sClusterAccessIpCIDRs,omitempty"`

	// List of IP address CIDRs to whitelist for workload access.
	WhitelistWorkloadAccessIPCIDRs string `json:"whitelistWorkloadAccessIpCIDRs,omitempty"`
}

// Validate validates this cluster summary response
func (m *ClusterSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSupport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSummaryResponse) validateAwsOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsOptions) { // not required
		return nil
	}

	if m.AwsOptions != nil {
		if err := m.AwsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) validateAzureOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureOptions) { // not required
		return nil
	}

	if m.AzureOptions != nil {
		if err := m.AzureOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSummaryResponse) validateCreator(formats strfmt.Registry) error {
	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) validateExternalBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalBuckets); i++ {
		if swag.IsZero(m.ExternalBuckets[i]) { // not required
			continue
		}

		if m.ExternalBuckets[i] != nil {
			if err := m.ExternalBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterSummaryResponse) validateProductSupport(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductSupport) { // not required
		return nil
	}

	if m.ProductSupport != nil {
		if err := m.ProductSupport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productSupport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productSupport")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster summary response based on the context it is used
func (m *ClusterSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductSupport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSummaryResponse) contextValidateAwsOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsOptions != nil {

		if swag.IsZero(m.AwsOptions) { // not required
			return nil
		}

		if err := m.AwsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) contextValidateAzureOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureOptions != nil {

		if swag.IsZero(m.AzureOptions) { // not required
			return nil
		}

		if err := m.AzureOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if m.Creator != nil {

		if swag.IsZero(m.Creator) { // not required
			return nil
		}

		if err := m.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSummaryResponse) contextValidateExternalBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalBuckets); i++ {

		if m.ExternalBuckets[i] != nil {

			if swag.IsZero(m.ExternalBuckets[i]) { // not required
				return nil
			}

			if err := m.ExternalBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalBuckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalBuckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterSummaryResponse) contextValidateProductSupport(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductSupport != nil {

		if swag.IsZero(m.ProductSupport) { // not required
			return nil
		}

		if err := m.ProductSupport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productSupport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productSupport")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSummaryResponse) UnmarshalBinary(b []byte) error {
	var res ClusterSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
