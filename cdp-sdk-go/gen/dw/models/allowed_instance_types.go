// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AllowedInstanceTypes Allowed compute instance type values and default compute instance type value.
//
// swagger:model AllowedInstanceTypes
type AllowedInstanceTypes struct {

	// Allowed values for the instance type. This setting is Cluster-wide.
	Allowed []string `json:"allowed"`

	// Default value for the compute instance type usage. This setting is Cluster-wide.
	Default []string `json:"default"`

	// Allowed instance types for Hive Virtual Warehouses.
	Hive *AllowedInstanceTypesWithDefault `json:"hive,omitempty"`

	// Allowed instance types for Impala Virtual Warehouses.
	Impala *AllowedInstanceTypesWithDefault `json:"impala,omitempty"`

	// Allowed instance types for Trino Virtual Warehouses.
	Trino *AllowedInstanceTypesWithDefault `json:"trino,omitempty"`
}

// Validate validates this allowed instance types
func (m *AllowedInstanceTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpala(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrino(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllowedInstanceTypes) validateHive(formats strfmt.Registry) error {
	if swag.IsZero(m.Hive) { // not required
		return nil
	}

	if m.Hive != nil {
		if err := m.Hive.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("hive")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("hive")
			}

			return err
		}
	}

	return nil
}

func (m *AllowedInstanceTypes) validateImpala(formats strfmt.Registry) error {
	if swag.IsZero(m.Impala) { // not required
		return nil
	}

	if m.Impala != nil {
		if err := m.Impala.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("impala")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("impala")
			}

			return err
		}
	}

	return nil
}

func (m *AllowedInstanceTypes) validateTrino(formats strfmt.Registry) error {
	if swag.IsZero(m.Trino) { // not required
		return nil
	}

	if m.Trino != nil {
		if err := m.Trino.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("trino")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("trino")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this allowed instance types based on the context it is used
func (m *AllowedInstanceTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImpala(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrino(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllowedInstanceTypes) contextValidateHive(ctx context.Context, formats strfmt.Registry) error {

	if m.Hive != nil {

		if swag.IsZero(m.Hive) { // not required
			return nil
		}

		if err := m.Hive.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("hive")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("hive")
			}

			return err
		}
	}

	return nil
}

func (m *AllowedInstanceTypes) contextValidateImpala(ctx context.Context, formats strfmt.Registry) error {

	if m.Impala != nil {

		if swag.IsZero(m.Impala) { // not required
			return nil
		}

		if err := m.Impala.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("impala")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("impala")
			}

			return err
		}
	}

	return nil
}

func (m *AllowedInstanceTypes) contextValidateTrino(ctx context.Context, formats strfmt.Registry) error {

	if m.Trino != nil {

		if swag.IsZero(m.Trino) { // not required
			return nil
		}

		if err := m.Trino.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("trino")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("trino")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllowedInstanceTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllowedInstanceTypes) UnmarshalBinary(b []byte) error {
	var res AllowedInstanceTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
