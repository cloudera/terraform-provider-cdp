// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateVwConfigRequest Request object for the updateVwConfig method.
//
// swagger:model UpdateVwConfigRequest
type UpdateVwConfigRequest struct {

	// ID of the cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Configuration component to update. Hive components are [DasWebapp, Hiveserver2, QueryCoordinator, QueryExecutor, StandaloneQueryExecutor, TokenAuth, Hue]. Impala components are [Hue, ImpalaAutoscaler, ImpalaCatalogd, ImpalaCoordinator, ImpalaExecutor, ImpalaProxy, ImpalaStatestored, ImpalaTokenAuth].
	// Required: true
	// Enum: [DasWebapp Hiveserver2 QueryCoordinator QueryExecutor StandaloneQueryExecutor TokenAuth Hue ImpalaAutoscaler ImpalaCatalogd ImpalaCoordinator ImpalaExecutor ImpalaProxy ImpalaStatestored ImpalaTokenAuth]
	Component *string `json:"component"`

	// Configuration files of the selected component to update.
	Set []*ConfigBlock `json:"set"`

	// ID of the Virtual Warehouse.
	// Required: true
	VwID *string `json:"vwId"`
}

// Validate validates this update vw config request
func (m *UpdateVwConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVwID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVwConfigRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

var updateVwConfigRequestTypeComponentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DasWebapp","Hiveserver2","QueryCoordinator","QueryExecutor","StandaloneQueryExecutor","TokenAuth","Hue","ImpalaAutoscaler","ImpalaCatalogd","ImpalaCoordinator","ImpalaExecutor","ImpalaProxy","ImpalaStatestored","ImpalaTokenAuth"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateVwConfigRequestTypeComponentPropEnum = append(updateVwConfigRequestTypeComponentPropEnum, v)
	}
}

const (

	// UpdateVwConfigRequestComponentDasWebapp captures enum value "DasWebapp"
	UpdateVwConfigRequestComponentDasWebapp string = "DasWebapp"

	// UpdateVwConfigRequestComponentHiveserver2 captures enum value "Hiveserver2"
	UpdateVwConfigRequestComponentHiveserver2 string = "Hiveserver2"

	// UpdateVwConfigRequestComponentQueryCoordinator captures enum value "QueryCoordinator"
	UpdateVwConfigRequestComponentQueryCoordinator string = "QueryCoordinator"

	// UpdateVwConfigRequestComponentQueryExecutor captures enum value "QueryExecutor"
	UpdateVwConfigRequestComponentQueryExecutor string = "QueryExecutor"

	// UpdateVwConfigRequestComponentStandaloneQueryExecutor captures enum value "StandaloneQueryExecutor"
	UpdateVwConfigRequestComponentStandaloneQueryExecutor string = "StandaloneQueryExecutor"

	// UpdateVwConfigRequestComponentTokenAuth captures enum value "TokenAuth"
	UpdateVwConfigRequestComponentTokenAuth string = "TokenAuth"

	// UpdateVwConfigRequestComponentHue captures enum value "Hue"
	UpdateVwConfigRequestComponentHue string = "Hue"

	// UpdateVwConfigRequestComponentImpalaAutoscaler captures enum value "ImpalaAutoscaler"
	UpdateVwConfigRequestComponentImpalaAutoscaler string = "ImpalaAutoscaler"

	// UpdateVwConfigRequestComponentImpalaCatalogd captures enum value "ImpalaCatalogd"
	UpdateVwConfigRequestComponentImpalaCatalogd string = "ImpalaCatalogd"

	// UpdateVwConfigRequestComponentImpalaCoordinator captures enum value "ImpalaCoordinator"
	UpdateVwConfigRequestComponentImpalaCoordinator string = "ImpalaCoordinator"

	// UpdateVwConfigRequestComponentImpalaExecutor captures enum value "ImpalaExecutor"
	UpdateVwConfigRequestComponentImpalaExecutor string = "ImpalaExecutor"

	// UpdateVwConfigRequestComponentImpalaProxy captures enum value "ImpalaProxy"
	UpdateVwConfigRequestComponentImpalaProxy string = "ImpalaProxy"

	// UpdateVwConfigRequestComponentImpalaStatestored captures enum value "ImpalaStatestored"
	UpdateVwConfigRequestComponentImpalaStatestored string = "ImpalaStatestored"

	// UpdateVwConfigRequestComponentImpalaTokenAuth captures enum value "ImpalaTokenAuth"
	UpdateVwConfigRequestComponentImpalaTokenAuth string = "ImpalaTokenAuth"
)

// prop value enum
func (m *UpdateVwConfigRequest) validateComponentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateVwConfigRequestTypeComponentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateVwConfigRequest) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	// value enum
	if err := m.validateComponentEnum("component", "body", *m.Component); err != nil {
		return err
	}

	return nil
}

func (m *UpdateVwConfigRequest) validateSet(formats strfmt.Registry) error {
	if swag.IsZero(m.Set) { // not required
		return nil
	}

	for i := 0; i < len(m.Set); i++ {
		if swag.IsZero(m.Set[i]) { // not required
			continue
		}

		if m.Set[i] != nil {
			if err := m.Set[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateVwConfigRequest) validateVwID(formats strfmt.Registry) error {

	if err := validate.Required("vwId", "body", m.VwID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update vw config request based on the context it is used
func (m *UpdateVwConfigRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVwConfigRequest) contextValidateSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Set); i++ {

		if m.Set[i] != nil {
			if err := m.Set[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("set" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("set" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVwConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVwConfigRequest) UnmarshalBinary(b []byte) error {
	var res UpdateVwConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
