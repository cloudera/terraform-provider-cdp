// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListVwDiagnosticDataJobsRequest Request object for the listVwDiagnosticDataJobsRequest method.
//
// swagger:model ListVwDiagnosticDataJobsRequest
type ListVwDiagnosticDataJobsRequest struct {

	// ID of cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// The size of each page.
	// Maximum: 100
	// Minimum: 1
	PageSize int32 `json:"pageSize,omitempty"`

	// A token to specify where to start paginating. This is the nextToken from a previously truncated response.
	StartingToken string `json:"startingToken,omitempty"`

	// Filter for job type
	Status DiagnosticDataJobStatus `json:"status,omitempty"`

	// ID of the Virtual Warehouse.
	// Required: true
	VwID *string `json:"vwId"`
}

// Validate validates this list vw diagnostic data jobs request
func (m *ListVwDiagnosticDataJobsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVwID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListVwDiagnosticDataJobsRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *ListVwDiagnosticDataJobsRequest) validatePageSize(formats strfmt.Registry) error {
	if swag.IsZero(m.PageSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("pageSize", "body", int64(m.PageSize), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "body", int64(m.PageSize), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ListVwDiagnosticDataJobsRequest) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *ListVwDiagnosticDataJobsRequest) validateVwID(formats strfmt.Registry) error {

	if err := validate.Required("vwId", "body", m.VwID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list vw diagnostic data jobs request based on the context it is used
func (m *ListVwDiagnosticDataJobsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListVwDiagnosticDataJobsRequest) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListVwDiagnosticDataJobsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListVwDiagnosticDataJobsRequest) UnmarshalBinary(b []byte) error {
	var res ListVwDiagnosticDataJobsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
