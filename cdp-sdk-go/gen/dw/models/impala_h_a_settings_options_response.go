// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImpalaHASettingsOptionsResponse Impala High Availability settings for a Virtual Warehouse.
//
// swagger:model ImpalaHASettingsOptionsResponse
type ImpalaHASettingsOptionsResponse struct {

	// Denotes whether a backup instance for Impala catalog is enabled.
	EnableCatalogHighAvailability bool `json:"enableCatalogHighAvailability,omitempty"`

	// Whether a shutdown of the coordinator is enabled.
	EnableShutdownOfCoordinator bool `json:"enableShutdownOfCoordinator,omitempty"`

	// High Availability mode. DISABLED - Impala coordinator and Database Catalog high availability is disabled. ACTIVE_PASSIVE - Multiple coordinators (one active, one passive) and Database Catalogs (one active, one passive) are run. ACTIVE_ACTIVE - Multiple coordinators (both active) and Database Catalogs (one active, one passive) are run.
	HighAvailabilityMode ImpalaHighAvailabilityMode `json:"highAvailabilityMode,omitempty"`

	// Number of the active coordinators.
	NumOfActiveCoordinators int32 `json:"numOfActiveCoordinators,omitempty"`

	// Delay in seconds before the shutdown of coordinator event happens.
	ShutdownOfCoordinatorDelaySeconds int32 `json:"shutdownOfCoordinatorDelaySeconds,omitempty"`
}

// Validate validates this impala h a settings options response
func (m *ImpalaHASettingsOptionsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHighAvailabilityMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImpalaHASettingsOptionsResponse) validateHighAvailabilityMode(formats strfmt.Registry) error {
	if swag.IsZero(m.HighAvailabilityMode) { // not required
		return nil
	}

	if err := m.HighAvailabilityMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("highAvailabilityMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("highAvailabilityMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this impala h a settings options response based on the context it is used
func (m *ImpalaHASettingsOptionsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHighAvailabilityMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImpalaHASettingsOptionsResponse) contextValidateHighAvailabilityMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HighAvailabilityMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("highAvailabilityMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("highAvailabilityMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImpalaHASettingsOptionsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImpalaHASettingsOptionsResponse) UnmarshalBinary(b []byte) error {
	var res ImpalaHASettingsOptionsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
