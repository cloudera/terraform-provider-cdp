// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListClustersRequest Request object for the listClusters method.
//
// swagger:model ListClustersRequest
type ListClustersRequest struct {

	// Filter returned clusters by hosting platform.
	// Enum: [AWS AZURE]
	CloudPlatform string `json:"cloudPlatform,omitempty"`

	// Filter returned clusters by cluster ID.
	ClusterID string `json:"clusterId,omitempty"`

	// Filter returned clusters for the belonging Environment CRN.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// Filter returned clusters by name.
	Name string `json:"name,omitempty"`

	// Filter returned clusters by cluster status.
	// Enum: [Creating Created Accepted Starting Running Stopping Stopped Updating PreUpdate PreUpgrade Restarting Deleting Upgrading Waiting Error Failed]
	Status string `json:"status,omitempty"`
}

// Validate validates this list clusters request
func (m *ListClustersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listClustersRequestTypeCloudPlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","AZURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersRequestTypeCloudPlatformPropEnum = append(listClustersRequestTypeCloudPlatformPropEnum, v)
	}
}

const (

	// ListClustersRequestCloudPlatformAWS captures enum value "AWS"
	ListClustersRequestCloudPlatformAWS string = "AWS"

	// ListClustersRequestCloudPlatformAZURE captures enum value "AZURE"
	ListClustersRequestCloudPlatformAZURE string = "AZURE"
)

// prop value enum
func (m *ListClustersRequest) validateCloudPlatformEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersRequestTypeCloudPlatformPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListClustersRequest) validateCloudPlatform(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudPlatform) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudPlatformEnum("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

var listClustersRequestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Creating","Created","Accepted","Starting","Running","Stopping","Stopped","Updating","PreUpdate","PreUpgrade","Restarting","Deleting","Upgrading","Waiting","Error","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listClustersRequestTypeStatusPropEnum = append(listClustersRequestTypeStatusPropEnum, v)
	}
}

const (

	// ListClustersRequestStatusCreating captures enum value "Creating"
	ListClustersRequestStatusCreating string = "Creating"

	// ListClustersRequestStatusCreated captures enum value "Created"
	ListClustersRequestStatusCreated string = "Created"

	// ListClustersRequestStatusAccepted captures enum value "Accepted"
	ListClustersRequestStatusAccepted string = "Accepted"

	// ListClustersRequestStatusStarting captures enum value "Starting"
	ListClustersRequestStatusStarting string = "Starting"

	// ListClustersRequestStatusRunning captures enum value "Running"
	ListClustersRequestStatusRunning string = "Running"

	// ListClustersRequestStatusStopping captures enum value "Stopping"
	ListClustersRequestStatusStopping string = "Stopping"

	// ListClustersRequestStatusStopped captures enum value "Stopped"
	ListClustersRequestStatusStopped string = "Stopped"

	// ListClustersRequestStatusUpdating captures enum value "Updating"
	ListClustersRequestStatusUpdating string = "Updating"

	// ListClustersRequestStatusPreUpdate captures enum value "PreUpdate"
	ListClustersRequestStatusPreUpdate string = "PreUpdate"

	// ListClustersRequestStatusPreUpgrade captures enum value "PreUpgrade"
	ListClustersRequestStatusPreUpgrade string = "PreUpgrade"

	// ListClustersRequestStatusRestarting captures enum value "Restarting"
	ListClustersRequestStatusRestarting string = "Restarting"

	// ListClustersRequestStatusDeleting captures enum value "Deleting"
	ListClustersRequestStatusDeleting string = "Deleting"

	// ListClustersRequestStatusUpgrading captures enum value "Upgrading"
	ListClustersRequestStatusUpgrading string = "Upgrading"

	// ListClustersRequestStatusWaiting captures enum value "Waiting"
	ListClustersRequestStatusWaiting string = "Waiting"

	// ListClustersRequestStatusError captures enum value "Error"
	ListClustersRequestStatusError string = "Error"

	// ListClustersRequestStatusFailed captures enum value "Failed"
	ListClustersRequestStatusFailed string = "Failed"
)

// prop value enum
func (m *ListClustersRequest) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listClustersRequestTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListClustersRequest) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list clusters request based on context it is used
func (m *ListClustersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListClustersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListClustersRequest) UnmarshalBinary(b []byte) error {
	var res ListClustersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
