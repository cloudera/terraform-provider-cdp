// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceConfigReq Configurations for a service (DBC or VW)
//
// swagger:model ServiceConfigReq
type ServiceConfigReq struct {

	// Application specific configurations.
	ApplicationConfigs map[string]ApplicationConfigReq `json:"applicationConfigs,omitempty"`

	// Configurations that are applied to every application in the service.
	CommonConfigs *ApplicationConfigReq `json:"commonConfigs,omitempty"`

	// Should SSO be enabled for this VW.
	EnableSSO bool `json:"enableSSO,omitempty"`

	// LDAP Groupnames to be enabled for auth.
	LdapGroups []string `json:"ldapGroups"`
}

// Validate validates this service config req
func (m *ServiceConfigReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceConfigReq) validateApplicationConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationConfigs) { // not required
		return nil
	}

	for k := range m.ApplicationConfigs {

		if err := validate.Required("applicationConfigs"+"."+k, "body", m.ApplicationConfigs[k]); err != nil {
			return err
		}
		if val, ok := m.ApplicationConfigs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationConfigs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("applicationConfigs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceConfigReq) validateCommonConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.CommonConfigs) { // not required
		return nil
	}

	if m.CommonConfigs != nil {
		if err := m.CommonConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonConfigs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonConfigs")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service config req based on the context it is used
func (m *ServiceConfigReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommonConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceConfigReq) contextValidateApplicationConfigs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ApplicationConfigs {

		if val, ok := m.ApplicationConfigs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ServiceConfigReq) contextValidateCommonConfigs(ctx context.Context, formats strfmt.Registry) error {

	if m.CommonConfigs != nil {
		if err := m.CommonConfigs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commonConfigs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commonConfigs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceConfigReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceConfigReq) UnmarshalBinary(b []byte) error {
	var res ServiceConfigReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
