// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepairClusterRequest Request object for repair cluster request.
//
// swagger:model RepairClusterRequest
type RepairClusterRequest struct {

	// The name or CRN of the cluster to be repaired.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// List of instance groups where the failed instances will be repaired.
	InstanceGroupNames []string `json:"instanceGroupNames"`

	// List of instances.
	Instances *RepairInstancesRequest `json:"instances,omitempty"`

	// If true, the failed instances will only be removed, otherwise the failed instances will be removed and new instances will be started.
	RemoveOnly bool `json:"removeOnly,omitempty"`
}

// Validate validates this repair cluster request
func (m *RepairClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepairClusterRequest) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *RepairClusterRequest) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	if m.Instances != nil {
		if err := m.Instances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instances")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this repair cluster request based on the context it is used
func (m *RepairClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepairClusterRequest) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	if m.Instances != nil {
		if err := m.Instances.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instances")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepairClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepairClusterRequest) UnmarshalBinary(b []byte) error {
	var res RepairClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
