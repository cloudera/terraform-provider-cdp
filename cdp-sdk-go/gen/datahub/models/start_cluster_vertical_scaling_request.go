// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StartClusterVerticalScalingRequest The request object for Data Hub vertical scaling.
//
// swagger:model StartClusterVerticalScalingRequest
type StartClusterVerticalScalingRequest struct {

	// The name or CRN of the Data Hub cluster.
	// Required: true
	Datahub *string `json:"datahub"`

	// Disk options for vertical scaling. Available options are - add, remove, or modify.
	DiskOptions *DiskOptions `json:"diskOptions,omitempty"`

	// The target group that reqested for vertical scaling.
	// Required: true
	Group *string `json:"group"`

	// Instance template that specifies the core information for the vertical scale.
	InstanceTemplate *InstanceTemplate `json:"instanceTemplate,omitempty"`
}

// Validate validates this start cluster vertical scaling request
func (m *StartClusterVerticalScalingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatahub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartClusterVerticalScalingRequest) validateDatahub(formats strfmt.Registry) error {

	if err := validate.Required("datahub", "body", m.Datahub); err != nil {
		return err
	}

	return nil
}

func (m *StartClusterVerticalScalingRequest) validateDiskOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskOptions) { // not required
		return nil
	}

	if m.DiskOptions != nil {
		if err := m.DiskOptions.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("diskOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("diskOptions")
			}

			return err
		}
	}

	return nil
}

func (m *StartClusterVerticalScalingRequest) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *StartClusterVerticalScalingRequest) validateInstanceTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceTemplate) { // not required
		return nil
	}

	if m.InstanceTemplate != nil {
		if err := m.InstanceTemplate.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("instanceTemplate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("instanceTemplate")
			}

			return err
		}
	}

	return nil
}

// ContextValidate validate this start cluster vertical scaling request based on the context it is used
func (m *StartClusterVerticalScalingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartClusterVerticalScalingRequest) contextValidateDiskOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskOptions != nil {

		if swag.IsZero(m.DiskOptions) { // not required
			return nil
		}

		if err := m.DiskOptions.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("diskOptions")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("diskOptions")
			}

			return err
		}
	}

	return nil
}

func (m *StartClusterVerticalScalingRequest) contextValidateInstanceTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceTemplate != nil {

		if swag.IsZero(m.InstanceTemplate) { // not required
			return nil
		}

		if err := m.InstanceTemplate.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("instanceTemplate")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("instanceTemplate")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StartClusterVerticalScalingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StartClusterVerticalScalingRequest) UnmarshalBinary(b []byte) error {
	var res StartClusterVerticalScalingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
