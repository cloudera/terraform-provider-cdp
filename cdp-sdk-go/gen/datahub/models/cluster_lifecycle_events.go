// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterLifecycleEvents Related events for the stack.
//
// swagger:model ClusterLifecycleEvents
type ClusterLifecycleEvents struct {

	// Cloud provider availability zone for the region in which the cluster is deployed.
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// Blueprint ID for the blueprint deployed on the cluster.
	BlueprintID int64 `json:"blueprintId,omitempty"`

	// Blueprint name for the blueprint deployed on the cluster.
	BlueprintName string `json:"blueprintName,omitempty"`

	// Cloud provider type.
	CloudType string `json:"cloudType,omitempty"`

	// ID of the cluster.
	ClusterID int64 `json:"clusterId,omitempty"`

	// Name of the cluster.
	ClusterName string `json:"clusterName,omitempty"`

	// Status of the cluster.
	ClusterStatus StackStatus `json:"clusterStatus,omitempty"`

	// Message from this event.
	EventMessage string `json:"eventMessage,omitempty"`

	// Timestamp of this event.
	// Format: date-time
	EventTimestamp strfmt.DateTime `json:"eventTimestamp,omitempty"`

	// Type of the event.
	EventType string `json:"eventType,omitempty"`

	// Name of the instance group.
	InstanceGroup string `json:"instanceGroup,omitempty"`

	// Details of the LDAP.
	LdapDetails *ClusterLdapDetails `json:"ldapDetails,omitempty"`

	// Current node count for the nodes in the cluster.
	NodeCount int32 `json:"nodeCount,omitempty"`

	// Type of notification as identified in the UI.
	NotificationType string `json:"notificationType,omitempty"`

	// Details of the RDS.
	RdsDetails *ClusterRdsDetails `json:"rdsDetails,omitempty"`

	// Cloud provider region in which the cluster is deployed.
	Region string `json:"region,omitempty"`

	// The unique CRN of the resource.
	StackCrn string `json:"stackCrn,omitempty"`

	// Name of the stack.
	StackName string `json:"stackName,omitempty"`

	// Current status of the stack.
	StackStatus StackStatus `json:"stackStatus,omitempty"`

	// Name of the current tenant.
	TenantName string `json:"tenantName,omitempty"`

	// User ID.
	UserID string `json:"userId,omitempty"`

	// Workspace ID of the resource.
	WorkspaceID int64 `json:"workspaceId,omitempty"`
}

// Validate validates this cluster lifecycle events
func (m *ClusterLifecycleEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterLifecycleEvents) validateClusterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterStatus) { // not required
		return nil
	}

	if err := m.ClusterStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterStatus")
		}
		return err
	}

	return nil
}

func (m *ClusterLifecycleEvents) validateEventTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EventTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("eventTimestamp", "body", "date-time", m.EventTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterLifecycleEvents) validateLdapDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.LdapDetails) { // not required
		return nil
	}

	if m.LdapDetails != nil {
		if err := m.LdapDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterLifecycleEvents) validateRdsDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.RdsDetails) { // not required
		return nil
	}

	if m.RdsDetails != nil {
		if err := m.RdsDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterLifecycleEvents) validateStackStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.StackStatus) { // not required
		return nil
	}

	if err := m.StackStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stackStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stackStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this cluster lifecycle events based on the context it is used
func (m *ClusterLifecycleEvents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLdapDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRdsDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterLifecycleEvents) contextValidateClusterStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ClusterStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clusterStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clusterStatus")
		}
		return err
	}

	return nil
}

func (m *ClusterLifecycleEvents) contextValidateLdapDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.LdapDetails != nil {
		if err := m.LdapDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ldapDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterLifecycleEvents) contextValidateRdsDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.RdsDetails != nil {
		if err := m.RdsDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rdsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rdsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterLifecycleEvents) contextValidateStackStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StackStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stackStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stackStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterLifecycleEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterLifecycleEvents) UnmarshalBinary(b []byte) error {
	var res ClusterLifecycleEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
