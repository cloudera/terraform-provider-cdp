// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopInstancesRequest Request object to stop instances of a host group on a Data Hub.
//
// swagger:model StopInstancesRequest
type StopInstancesRequest struct {

	// The name or CRN of the cluster whose instances are to be stopped.
	// Required: true
	Cluster *string `json:"cluster"`

	// Whether the stop instances operation should be forced or not. Defaults to false.
	Forced bool `json:"forced,omitempty"`

	// The list of instance IDs.
	// Required: true
	InstanceIds []string `json:"instanceIds"`
}

// Validate validates this stop instances request
func (m *StopInstancesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopInstancesRequest) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	return nil
}

func (m *StopInstancesRequest) validateInstanceIds(formats strfmt.Registry) error {

	if err := validate.Required("instanceIds", "body", m.InstanceIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stop instances request based on context it is used
func (m *StopInstancesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StopInstancesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopInstancesRequest) UnmarshalBinary(b []byte) error {
	var res StopInstancesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
