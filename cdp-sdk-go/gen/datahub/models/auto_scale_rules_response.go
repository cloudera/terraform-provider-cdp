// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoScaleRulesResponse Autoscale configuration
//
// swagger:model AutoScaleRulesResponse
type AutoScaleRulesResponse struct {

	// The actual scaling policy(ies) for the cluster
	// Required: true
	AutoScalePolicies []*AutoScalePolicyResponse `json:"autoScalePolicies"`

	// The name or CRN of the cluster.
	// Required: true
	// Max Length: 500
	// Min Length: 5
	ClusterName *string `json:"clusterName"`

	// Whether autoscaling is enabled or not for the cluster
	// Required: true
	Enabled *bool `json:"enabled"`

	// Whether StopStart scaling mechanism is enabled for the cluster.
	UseStopStartMechanism bool `json:"useStopStartMechanism,omitempty"`
}

// Validate validates this auto scale rules response
func (m *AutoScaleRulesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScalePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoScaleRulesResponse) validateAutoScalePolicies(formats strfmt.Registry) error {

	if err := validate.Required("autoScalePolicies", "body", m.AutoScalePolicies); err != nil {
		return err
	}

	for i := 0; i < len(m.AutoScalePolicies); i++ {
		if swag.IsZero(m.AutoScalePolicies[i]) { // not required
			continue
		}

		if m.AutoScalePolicies[i] != nil {
			if err := m.AutoScalePolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("autoScalePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("autoScalePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AutoScaleRulesResponse) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	if err := validate.MinLength("clusterName", "body", *m.ClusterName, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterName", "body", *m.ClusterName, 500); err != nil {
		return err
	}

	return nil
}

func (m *AutoScaleRulesResponse) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this auto scale rules response based on the context it is used
func (m *AutoScaleRulesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoScalePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoScaleRulesResponse) contextValidateAutoScalePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AutoScalePolicies); i++ {

		if m.AutoScalePolicies[i] != nil {
			if err := m.AutoScalePolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("autoScalePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("autoScalePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoScaleRulesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoScaleRulesResponse) UnmarshalBinary(b []byte) error {
	var res AutoScaleRulesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
