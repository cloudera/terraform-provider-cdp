// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Endpoint Object which holds the exposed endpoint.
//
// swagger:model Endpoint
type Endpoint struct {

	// The more consumable name of the exposed service.
	// Required: true
	DisplayName *string `json:"displayName"`

	// The related knox entry.
	// Required: true
	KnoxService *string `json:"knoxService"`

	// The SSO mode of the given service.
	// Required: true
	Mode *string `json:"mode"`

	// The access status of the given endpoint. Whether its open or not.
	// Required: true
	Open *bool `json:"open"`

	// The name of the exposed service
	// Required: true
	ServiceName *string `json:"serviceName"`

	// The server url for the given exposed service's API.
	// Required: true
	ServiceURL *string `json:"serviceUrl"`
}

// Validate validates this endpoint
func (m *Endpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnoxService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateKnoxService(formats strfmt.Registry) error {

	if err := validate.Required("knoxService", "body", m.KnoxService); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("open", "body", m.Open); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *Endpoint) validateServiceURL(formats strfmt.Registry) error {

	if err := validate.Required("serviceUrl", "body", m.ServiceURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this endpoint based on context it is used
func (m *Endpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Endpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Endpoint) UnmarshalBinary(b []byte) error {
	var res Endpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
