// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateClusterDefinitionRequest Request object for create cluster definition request.
//
// swagger:model CreateClusterDefinitionRequest
type CreateClusterDefinitionRequest struct {

	// The name of the cluster definition. This name must be unique, must have between 5 and 100 characters, and must contain only lowercase letters, numbers and hyphens. Names are case-sensitive.
	// Required: true
	// Max Length: 1000
	// Min Length: 5
	ClusterDefinitionName *string `json:"clusterDefinitionName"`

	// The description of the cluster definition. The description can have a maximum of 1000 characters.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// The cluster creation JSON. This must contain the name of a running environment.
	// Required: true
	WorkloadTemplate *string `json:"workloadTemplate"`
}

// Validate validates this create cluster definition request
func (m *CreateClusterDefinitionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterDefinitionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateClusterDefinitionRequest) validateClusterDefinitionName(formats strfmt.Registry) error {

	if err := validate.Required("clusterDefinitionName", "body", m.ClusterDefinitionName); err != nil {
		return err
	}

	if err := validate.MinLength("clusterDefinitionName", "body", *m.ClusterDefinitionName, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterDefinitionName", "body", *m.ClusterDefinitionName, 1000); err != nil {
		return err
	}

	return nil
}

func (m *CreateClusterDefinitionRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *CreateClusterDefinitionRequest) validateWorkloadTemplate(formats strfmt.Registry) error {

	if err := validate.Required("workloadTemplate", "body", m.WorkloadTemplate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create cluster definition request based on context it is used
func (m *CreateClusterDefinitionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateClusterDefinitionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateClusterDefinitionRequest) UnmarshalBinary(b []byte) error {
	var res CreateClusterDefinitionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
