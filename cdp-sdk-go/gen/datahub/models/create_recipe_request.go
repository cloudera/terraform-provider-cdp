// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRecipeRequest Request object for create recipe request.
//
// swagger:model CreateRecipeRequest
type CreateRecipeRequest struct {

	// The description of the recipe. The description can have a maximum of 1000 characters.
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// The content of the recipe.
	// Required: true
	RecipeContent *string `json:"recipeContent"`

	// The name of the recipe. This name must be unique, must have between 5 and 100 characters, and must contain only lowercase letters, numbers and hyphens. Names are case-sensitive.
	// Required: true
	// Max Length: 1000
	// Min Length: 5
	RecipeName *string `json:"recipeName"`

	// The type of recipe. Supported values are : PRE_CLOUDERA_MANAGER_START, PRE_TERMINATION, POST_CLOUDERA_MANAGER_START, POST_CLUSTER_INSTALL.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this create recipe request
func (m *CreateRecipeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRecipeRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecipeRequest) validateRecipeContent(formats strfmt.Registry) error {

	if err := validate.Required("recipeContent", "body", m.RecipeContent); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecipeRequest) validateRecipeName(formats strfmt.Registry) error {

	if err := validate.Required("recipeName", "body", m.RecipeName); err != nil {
		return err
	}

	if err := validate.MinLength("recipeName", "body", *m.RecipeName, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("recipeName", "body", *m.RecipeName, 1000); err != nil {
		return err
	}

	return nil
}

func (m *CreateRecipeRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create recipe request based on context it is used
func (m *CreateRecipeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateRecipeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRecipeRequest) UnmarshalBinary(b []byte) error {
	var res CreateRecipeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
