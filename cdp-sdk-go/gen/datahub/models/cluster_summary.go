// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSummary Information about a cluster.
//
// swagger:model ClusterSummary
type ClusterSummary struct {

	// Indicates the certificate status on the cluster.
	// Enum: [VALID HOST_CERT_EXPIRING]
	CertificateExpirationState string `json:"certificateExpirationState,omitempty"`

	// The name of the cloud platform.
	CloudPlatform string `json:"cloudPlatform,omitempty"`

	// The name of the cluster.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// The CRN of the cluster template used for the cluster creation.
	ClusterTemplateCrn string `json:"clusterTemplateCrn,omitempty"`

	// The date when the cluster was created.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// The CRN of the cluster.
	// Required: true
	Crn *string `json:"crn"`

	// The CRN of the attached datalake.
	DatalakeCrn string `json:"datalakeCrn,omitempty"`

	// The CRN of the environment.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// The cluster node count.
	NodeCount int32 `json:"nodeCount,omitempty"`

	// The status of the cluster.
	Status string `json:"status,omitempty"`

	// The type of cluster.
	WorkloadType string `json:"workloadType,omitempty"`
}

// Validate validates this cluster summary
func (m *ClusterSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateExpirationState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterSummaryTypeCertificateExpirationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","HOST_CERT_EXPIRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterSummaryTypeCertificateExpirationStatePropEnum = append(clusterSummaryTypeCertificateExpirationStatePropEnum, v)
	}
}

const (

	// ClusterSummaryCertificateExpirationStateVALID captures enum value "VALID"
	ClusterSummaryCertificateExpirationStateVALID string = "VALID"

	// ClusterSummaryCertificateExpirationStateHOSTCERTEXPIRING captures enum value "HOST_CERT_EXPIRING"
	ClusterSummaryCertificateExpirationStateHOSTCERTEXPIRING string = "HOST_CERT_EXPIRING"
)

// prop value enum
func (m *ClusterSummary) validateCertificateExpirationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterSummaryTypeCertificateExpirationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterSummary) validateCertificateExpirationState(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateExpirationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateExpirationStateEnum("certificateExpirationState", "body", m.CertificateExpirationState); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSummary) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSummary) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSummary) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster summary based on context it is used
func (m *ClusterSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSummary) UnmarshalBinary(b []byte) error {
	var res ClusterSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
