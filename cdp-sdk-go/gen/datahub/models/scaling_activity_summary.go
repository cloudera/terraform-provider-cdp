// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScalingActivitySummary Information about a Scaling activity.
//
// swagger:model ScalingActivitySummary
type ScalingActivitySummary struct {

	// The status of the scaling activity. Supported values- ACTIVITY_PENDING - If scaling activity is in pending state, METRICS_COLLECTION_SUCCESS/FAILED - for success/failure of metrics collection, UPSCALE_TRIGGER_SUCCESS/FAILED - for success/failure at the time of upscaling, DOWNSCALE_TRIGGER_SUCCESS/FAILED for success/failure at the time of downscaling, SCHEDULE_BASED_UPSCALE/DOWNSCALE - if schedule based scaling is used, SCALING_FLOW_IN_PROGRESS/SUCCESS/FAILED - State at which the scaling has reached, POLICY_ADJUSTMENT - if policy adjustment is taking place, UNKNOWN - if the state is not known.
	// Required: true
	ActivityStatus *string `json:"activityStatus"`

	// The end time of the scaling activity.
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"endTime"`

	// The operation ID of the scaling activity.
	// Required: true
	OperationID *string `json:"operationId"`

	// The reason of the scaling activity.
	// Required: true
	ScalingActivityReason *string `json:"scalingActivityReason"`

	// The start time of the scaling activity.
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"startTime"`
}

// Validate validates this scaling activity summary
func (m *ScalingActivitySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScalingActivityReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScalingActivitySummary) validateActivityStatus(formats strfmt.Registry) error {

	if err := validate.Required("activityStatus", "body", m.ActivityStatus); err != nil {
		return err
	}

	return nil
}

func (m *ScalingActivitySummary) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScalingActivitySummary) validateOperationID(formats strfmt.Registry) error {

	if err := validate.Required("operationId", "body", m.OperationID); err != nil {
		return err
	}

	return nil
}

func (m *ScalingActivitySummary) validateScalingActivityReason(formats strfmt.Registry) error {

	if err := validate.Required("scalingActivityReason", "body", m.ScalingActivityReason); err != nil {
		return err
	}

	return nil
}

func (m *ScalingActivitySummary) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scaling activity summary based on context it is used
func (m *ScalingActivitySummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScalingActivitySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScalingActivitySummary) UnmarshalBinary(b []byte) error {
	var res ScalingActivitySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
