// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImageInfo Basic information about an image.
//
// swagger:model ImageInfo
type ImageInfo struct {

	// Version of the image components.
	ComponentVersions *ImageComponentVersions `json:"componentVersions,omitempty"`

	// Image creation timestamp.
	Created int64 `json:"created,omitempty"`

	// Name of the image catalog, the image is from.
	ImageCatalogName string `json:"imageCatalogName,omitempty"`

	// The id of the image.
	ImageID string `json:"imageId,omitempty"`

	// The name of the image.
	ImageName string `json:"imageName,omitempty"`
}

// Validate validates this image info
func (m *ImageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponentVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInfo) validateComponentVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentVersions) { // not required
		return nil
	}

	if m.ComponentVersions != nil {
		if err := m.ComponentVersions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentVersions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentVersions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image info based on the context it is used
func (m *ImageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComponentVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInfo) contextValidateComponentVersions(ctx context.Context, formats strfmt.Registry) error {

	if m.ComponentVersions != nil {
		if err := m.ComponentVersions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentVersions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("componentVersions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInfo) UnmarshalBinary(b []byte) error {
	var res ImageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
