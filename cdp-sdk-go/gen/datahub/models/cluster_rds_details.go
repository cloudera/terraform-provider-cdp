// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterRdsDetails Details of the RDS attached to cluster.
//
// swagger:model ClusterRdsDetails
type ClusterRdsDetails struct {

	// Connection driver.
	ConnectionDriver string `json:"connectionDriver,omitempty"`

	// Connection URL of RDS.
	ConnectionURL string `json:"connectionURL,omitempty"`

	// Connector Jar URL.
	ConnectorJarURL string `json:"connectorJarUrl,omitempty"`

	// RDS creation date.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Database engine.
	DatabaseEngine string `json:"databaseEngine,omitempty"`

	// Description of RDS.
	Description string `json:"description,omitempty"`

	// Set to true if RDS is external.
	External bool `json:"external,omitempty"`

	// ID of RDS.
	ID int64 `json:"id,omitempty"`

	// Name of RDS.
	Name string `json:"name,omitempty"`

	// SSL mode.
	SslMode string `json:"sslMode,omitempty"`

	// Stack version.
	StackVersion string `json:"stackVersion,omitempty"`

	// Status of RDS.
	Status string `json:"status,omitempty"`

	// RDS tenant name.
	TenantName string `json:"tenantName,omitempty"`

	// Type of RDS.
	Type string `json:"type,omitempty"`

	// User ID.
	UserID string `json:"userId,omitempty"`

	// User name.
	UserName string `json:"userName,omitempty"`

	// Workspace ID.
	WorkspaceID int64 `json:"workspaceId,omitempty"`
}

// Validate validates this cluster rds details
func (m *ClusterRdsDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterRdsDetails) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster rds details based on context it is used
func (m *ClusterRdsDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterRdsDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterRdsDetails) UnmarshalBinary(b []byte) error {
	var res ClusterRdsDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
