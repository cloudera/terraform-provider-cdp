// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeClusterRequest Request object to upgrade datahub.
//
// swagger:model UpgradeClusterRequest
type UpgradeClusterRequest struct {

	// The name or CRN of the datahub.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// Checks the eligibility of an image to upgrade but do not perform the upgrade.
	DryRun bool `json:"dryRun,omitempty"`

	// The id of an image to upgrade to.
	ImageID string `json:"imageId,omitempty"`

	// Perform an os upgrade only.
	LockComponents bool `json:"lockComponents,omitempty"`

	// Enables the ability to perform rolling runtime upgrade.
	RollingUpgradeEnabled bool `json:"rollingUpgradeEnabled,omitempty"`

	// The runtime version to upgrade to.
	Runtime string `json:"runtime,omitempty"`

	// Returns the list of images that are eligible for the upgrade.
	ShowAvailableImages bool `json:"showAvailableImages,omitempty"`

	// Returns the latest image that is eligible for the upgrade for each runtime version with at least one available upgrade candidate.
	ShowLatestAvailableImagePerRuntime bool `json:"showLatestAvailableImagePerRuntime,omitempty"`
}

// Validate validates this upgrade cluster request
func (m *UpgradeClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeClusterRequest) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgrade cluster request based on context it is used
func (m *UpgradeClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeClusterRequest) UnmarshalBinary(b []byte) error {
	var res UpgradeClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
