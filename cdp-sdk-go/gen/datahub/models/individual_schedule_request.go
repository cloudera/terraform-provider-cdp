// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IndividualScheduleRequest An individual schedule based policy
//
// swagger:model IndividualScheduleRequest
type IndividualScheduleRequest struct {

	// configuration
	// Required: true
	Configuration *IndividualScheduleRequestConfiguration `json:"configuration"`

	// An optional description for the specific schedule.
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// An optional identifier for the specific schedule. Generally useful for debugging. Will be auto-generated if none provided.
	// Max Length: 200
	// Min Length: 5
	Identifier string `json:"identifier,omitempty"`
}

// Validate validates this individual schedule request
func (m *IndividualScheduleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndividualScheduleRequest) validateConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("configuration", "body", m.Configuration); err != nil {
		return err
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *IndividualScheduleRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *IndividualScheduleRequest) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if err := validate.MinLength("identifier", "body", m.Identifier, 5); err != nil {
		return err
	}

	if err := validate.MaxLength("identifier", "body", m.Identifier, 200); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this individual schedule request based on the context it is used
func (m *IndividualScheduleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndividualScheduleRequest) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndividualScheduleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndividualScheduleRequest) UnmarshalBinary(b []byte) error {
	var res IndividualScheduleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IndividualScheduleRequestConfiguration The schedule configuration
//
// swagger:model IndividualScheduleRequestConfiguration
type IndividualScheduleRequestConfiguration struct {

	// action
	// Required: true
	Action *IndividualScheduleRequestConfigurationAction `json:"action"`

	// trigger
	// Required: true
	Trigger *IndividualScheduleRequestConfigurationTrigger `json:"trigger"`
}

// Validate validates this individual schedule request configuration
func (m *IndividualScheduleRequestConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndividualScheduleRequestConfiguration) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("configuration"+"."+"action", "body", m.Action); err != nil {
		return err
	}

	if m.Action != nil {
		if err := m.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration" + "." + "action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration" + "." + "action")
			}
			return err
		}
	}

	return nil
}

func (m *IndividualScheduleRequestConfiguration) validateTrigger(formats strfmt.Registry) error {

	if err := validate.Required("configuration"+"."+"trigger", "body", m.Trigger); err != nil {
		return err
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration" + "." + "trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration" + "." + "trigger")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this individual schedule request configuration based on the context it is used
func (m *IndividualScheduleRequestConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndividualScheduleRequestConfiguration) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if m.Action != nil {
		if err := m.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration" + "." + "action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration" + "." + "action")
			}
			return err
		}
	}

	return nil
}

func (m *IndividualScheduleRequestConfiguration) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {
		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration" + "." + "trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration" + "." + "trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndividualScheduleRequestConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndividualScheduleRequestConfiguration) UnmarshalBinary(b []byte) error {
	var res IndividualScheduleRequestConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IndividualScheduleRequestConfigurationAction The scaling action to take when triggered
//
// swagger:model IndividualScheduleRequestConfigurationAction
type IndividualScheduleRequestConfigurationAction struct {

	// The type of resource adjustment. Only ABSOLUTE_COUNT supported at the moment.
	// Enum: [ABSOLUTE_COUNT]
	ResourceAdjustmentType string `json:"resourceAdjustmentType,omitempty"`

	// The target value for the resource based on the AdjustmentType
	// Required: true
	// Minimum: 0
	ResourceAdjustmentValue *int32 `json:"resourceAdjustmentValue"`
}

// Validate validates this individual schedule request configuration action
func (m *IndividualScheduleRequestConfigurationAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceAdjustmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceAdjustmentValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var individualScheduleRequestConfigurationActionTypeResourceAdjustmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ABSOLUTE_COUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		individualScheduleRequestConfigurationActionTypeResourceAdjustmentTypePropEnum = append(individualScheduleRequestConfigurationActionTypeResourceAdjustmentTypePropEnum, v)
	}
}

const (

	// IndividualScheduleRequestConfigurationActionResourceAdjustmentTypeABSOLUTECOUNT captures enum value "ABSOLUTE_COUNT"
	IndividualScheduleRequestConfigurationActionResourceAdjustmentTypeABSOLUTECOUNT string = "ABSOLUTE_COUNT"
)

// prop value enum
func (m *IndividualScheduleRequestConfigurationAction) validateResourceAdjustmentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, individualScheduleRequestConfigurationActionTypeResourceAdjustmentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IndividualScheduleRequestConfigurationAction) validateResourceAdjustmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceAdjustmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceAdjustmentTypeEnum("configuration"+"."+"action"+"."+"resourceAdjustmentType", "body", m.ResourceAdjustmentType); err != nil {
		return err
	}

	return nil
}

func (m *IndividualScheduleRequestConfigurationAction) validateResourceAdjustmentValue(formats strfmt.Registry) error {

	if err := validate.Required("configuration"+"."+"action"+"."+"resourceAdjustmentValue", "body", m.ResourceAdjustmentValue); err != nil {
		return err
	}

	if err := validate.MinimumInt("configuration"+"."+"action"+"."+"resourceAdjustmentValue", "body", int64(*m.ResourceAdjustmentValue), 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this individual schedule request configuration action based on context it is used
func (m *IndividualScheduleRequestConfigurationAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IndividualScheduleRequestConfigurationAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndividualScheduleRequestConfigurationAction) UnmarshalBinary(b []byte) error {
	var res IndividualScheduleRequestConfigurationAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IndividualScheduleRequestConfigurationTrigger The trigger for this rule
//
// swagger:model IndividualScheduleRequestConfigurationTrigger
type IndividualScheduleRequestConfigurationTrigger struct {

	// The cron expression for this schedule
	// Required: true
	// Max Length: 100
	// Min Length: 1
	CronExpression *string `json:"cronExpression"`

	// The time zone for the cron expression
	// Required: true
	// Max Length: 50
	// Min Length: 1
	TimeZone *string `json:"timeZone"`
}

// Validate validates this individual schedule request configuration trigger
func (m *IndividualScheduleRequestConfigurationTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCronExpression(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndividualScheduleRequestConfigurationTrigger) validateCronExpression(formats strfmt.Registry) error {

	if err := validate.Required("configuration"+"."+"trigger"+"."+"cronExpression", "body", m.CronExpression); err != nil {
		return err
	}

	if err := validate.MinLength("configuration"+"."+"trigger"+"."+"cronExpression", "body", *m.CronExpression, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("configuration"+"."+"trigger"+"."+"cronExpression", "body", *m.CronExpression, 100); err != nil {
		return err
	}

	return nil
}

func (m *IndividualScheduleRequestConfigurationTrigger) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("configuration"+"."+"trigger"+"."+"timeZone", "body", m.TimeZone); err != nil {
		return err
	}

	if err := validate.MinLength("configuration"+"."+"trigger"+"."+"timeZone", "body", *m.TimeZone, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("configuration"+"."+"trigger"+"."+"timeZone", "body", *m.TimeZone, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this individual schedule request configuration trigger based on context it is used
func (m *IndividualScheduleRequestConfigurationTrigger) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IndividualScheduleRequestConfigurationTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndividualScheduleRequestConfigurationTrigger) UnmarshalBinary(b []byte) error {
	var res IndividualScheduleRequestConfigurationTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
