// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoScalePolicyRequest An individual AutoScale Policy
//
// swagger:model AutoScalePolicyRequest
type AutoScalePolicyRequest struct {

	// A single hostgroup, or a comma separated list of hostGroups to which the rules apply
	// Required: true
	// Max Length: 200
	// Min Length: 1
	HostGroups *string `json:"hostGroups"`

	// Load based policy
	LoadBasedPolicy *AutoScaleLoadRequest `json:"loadBasedPolicy,omitempty"`

	// Scheduled based policy
	ScheduleBasedPolicy *AutoScaleScheduleRequest `json:"scheduleBasedPolicy,omitempty"`
}

// Validate validates this auto scale policy request
func (m *AutoScalePolicyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBasedPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleBasedPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoScalePolicyRequest) validateHostGroups(formats strfmt.Registry) error {

	if err := validate.Required("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	if err := validate.MinLength("hostGroups", "body", *m.HostGroups, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostGroups", "body", *m.HostGroups, 200); err != nil {
		return err
	}

	return nil
}

func (m *AutoScalePolicyRequest) validateLoadBasedPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.LoadBasedPolicy) { // not required
		return nil
	}

	if m.LoadBasedPolicy != nil {
		if err := m.LoadBasedPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loadBasedPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loadBasedPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *AutoScalePolicyRequest) validateScheduleBasedPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleBasedPolicy) { // not required
		return nil
	}

	if m.ScheduleBasedPolicy != nil {
		if err := m.ScheduleBasedPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleBasedPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleBasedPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auto scale policy request based on the context it is used
func (m *AutoScalePolicyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoadBasedPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduleBasedPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoScalePolicyRequest) contextValidateLoadBasedPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.LoadBasedPolicy != nil {
		if err := m.LoadBasedPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loadBasedPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loadBasedPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *AutoScalePolicyRequest) contextValidateScheduleBasedPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduleBasedPolicy != nil {
		if err := m.ScheduleBasedPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduleBasedPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduleBasedPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoScalePolicyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoScalePolicyRequest) UnmarshalBinary(b []byte) error {
	var res AutoScalePolicyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
