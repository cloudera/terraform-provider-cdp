// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatahubLoadBalancerSkuType Represents the Azure load balancer SKU type. The current default is BASIC. To disable the load balancer, use type NONE.
//
// swagger:model DatahubLoadBalancerSkuType
type DatahubLoadBalancerSkuType string

func NewDatahubLoadBalancerSkuType(value DatahubLoadBalancerSkuType) *DatahubLoadBalancerSkuType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatahubLoadBalancerSkuType.
func (m DatahubLoadBalancerSkuType) Pointer() *DatahubLoadBalancerSkuType {
	return &m
}

const (

	// DatahubLoadBalancerSkuTypeBASIC captures enum value "BASIC"
	DatahubLoadBalancerSkuTypeBASIC DatahubLoadBalancerSkuType = "BASIC"

	// DatahubLoadBalancerSkuTypeSTANDARD captures enum value "STANDARD"
	DatahubLoadBalancerSkuTypeSTANDARD DatahubLoadBalancerSkuType = "STANDARD"

	// DatahubLoadBalancerSkuTypeNONE captures enum value "NONE"
	DatahubLoadBalancerSkuTypeNONE DatahubLoadBalancerSkuType = "NONE"
)

// for schema
var datahubLoadBalancerSkuTypeEnum []interface{}

func init() {
	var res []DatahubLoadBalancerSkuType
	if err := json.Unmarshal([]byte(`["BASIC","STANDARD","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datahubLoadBalancerSkuTypeEnum = append(datahubLoadBalancerSkuTypeEnum, v)
	}
}

func (m DatahubLoadBalancerSkuType) validateDatahubLoadBalancerSkuTypeEnum(path, location string, value DatahubLoadBalancerSkuType) error {
	if err := validate.EnumCase(path, location, value, datahubLoadBalancerSkuTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datahub load balancer sku type
func (m DatahubLoadBalancerSkuType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatahubLoadBalancerSkuTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datahub load balancer sku type based on context it is used
func (m DatahubLoadBalancerSkuType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
