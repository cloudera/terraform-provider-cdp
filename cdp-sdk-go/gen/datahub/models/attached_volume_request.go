// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachedVolumeRequest Configurations for additional attached volumes.
//
// swagger:model AttachedVolumeRequest
type AttachedVolumeRequest struct {

	// The attached volume count.
	// Required: true
	VolumeCount *int32 `json:"volumeCount"`

	// The attached volume size.
	// Required: true
	VolumeSize *int32 `json:"volumeSize"`

	// The attached volume type.
	// Required: true
	VolumeType *string `json:"volumeType"`
}

// Validate validates this attached volume request
func (m *AttachedVolumeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachedVolumeRequest) validateVolumeCount(formats strfmt.Registry) error {

	if err := validate.Required("volumeCount", "body", m.VolumeCount); err != nil {
		return err
	}

	return nil
}

func (m *AttachedVolumeRequest) validateVolumeSize(formats strfmt.Registry) error {

	if err := validate.Required("volumeSize", "body", m.VolumeSize); err != nil {
		return err
	}

	return nil
}

func (m *AttachedVolumeRequest) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attached volume request based on context it is used
func (m *AttachedVolumeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttachedVolumeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachedVolumeRequest) UnmarshalBinary(b []byte) error {
	var res AttachedVolumeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
