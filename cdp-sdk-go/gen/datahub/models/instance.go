// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance Object which holds some details of an instance for the given cluster.
//
// swagger:model Instance
type Instance struct {

	// List of volumes attached to this instance.
	AttachedVolumes []*AttachedVolumeDetail `json:"attachedVolumes"`

	// The availability zone of the instance.
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// Whether the instance has Cloudera Manager deployed or not.
	ClouderaManagerServer bool `json:"clouderaManagerServer,omitempty"`

	// The FQDN of the instance.
	Fqdn string `json:"fqdn,omitempty"`

	// The ID of the given instance.
	// Required: true
	ID *string `json:"id"`

	// The name of the instance group this instance belongs to.
	InstanceGroup string `json:"instanceGroup,omitempty"`

	// The type of the given instance (either GATEWAY, GATEWAY_PRIMARY, or CORE).
	// Required: true
	InstanceType *string `json:"instanceType"`

	// The VM type of the instance. Supported values depend on the cloud platform.
	InstanceVMType string `json:"instanceVmType,omitempty"`

	// The private IP of the given instance.
	PrivateIP string `json:"privateIp,omitempty"`

	// The public IP of the given instance.
	PublicIP string `json:"publicIp,omitempty"`

	// The rack ID of the instance in Cloudera Manager.
	RackID string `json:"rackId,omitempty"`

	// The SSH port for the instance.
	SSHPort int32 `json:"sshPort,omitempty"`

	// The health state of the instance. UNHEALTHY represents instances with unhealthy services, lost instances, or failed operations.
	// Required: true
	State *string `json:"state"`

	// The status of the instance. This includes information like whether the instance is being provisioned, stopped, decommissioning failures etc.
	Status string `json:"status,omitempty"`

	// The reason for the current status of this instance.
	StatusReason string `json:"statusReason,omitempty"`

	// The subnet ID of the instance.
	SubnetID string `json:"subnetId,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateAttachedVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachedVolumes); i++ {
		if swag.IsZero(m.AttachedVolumes[i]) { // not required
			continue
		}

		if m.AttachedVolumes[i] != nil {
			if err := m.AttachedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachedVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateAttachedVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachedVolumes); i++ {

		if m.AttachedVolumes[i] != nil {

			if swag.IsZero(m.AttachedVolumes[i]) { // not required
				return nil
			}

			if err := m.AttachedVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
