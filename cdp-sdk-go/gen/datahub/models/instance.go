// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance Object which holds some details of an instance for the given cluster.
//
// swagger:model Instance
type Instance struct {

	// The FQDN of the instance.
	Fqdn string `json:"fqdn,omitempty"`

	// The ID of the given instance.
	// Required: true
	ID *string `json:"id"`

	// The type of the given instance (either GATEWAY, GATEWAY_PRIMARY, or CORE).
	// Required: true
	InstanceType *string `json:"instanceType"`

	// The private IP of the given instance.
	PrivateIP string `json:"privateIp,omitempty"`

	// The public IP of the given instance.
	PublicIP string `json:"publicIp,omitempty"`

	// The health state of the instance. UNHEALTHY represents instances with unhealthy services, lost instances, or failed operations.
	// Required: true
	State *string `json:"state"`

	// The status of the instance. This includes information like whether the instance is being provisioned, stopped, decommissioning failures etc.
	Status string `json:"status,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this instance based on context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
