// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelDatahubDiagnostics(params *CancelDatahubDiagnosticsParams, opts ...ClientOption) (*CancelDatahubDiagnosticsOK, error)

	CollectCmDiagnostics(params *CollectCmDiagnosticsParams, opts ...ClientOption) (*CollectCmDiagnosticsOK, error)

	CollectDatahubDiagnostics(params *CollectDatahubDiagnosticsParams, opts ...ClientOption) (*CollectDatahubDiagnosticsOK, error)

	CreateAWSCluster(params *CreateAWSClusterParams, opts ...ClientOption) (*CreateAWSClusterOK, error)

	CreateAutoScaleRules(params *CreateAutoScaleRulesParams, opts ...ClientOption) (*CreateAutoScaleRulesOK, error)

	CreateAzureCluster(params *CreateAzureClusterParams, opts ...ClientOption) (*CreateAzureClusterOK, error)

	CreateClusterDefinition(params *CreateClusterDefinitionParams, opts ...ClientOption) (*CreateClusterDefinitionOK, error)

	CreateClusterTemplate(params *CreateClusterTemplateParams, opts ...ClientOption) (*CreateClusterTemplateOK, error)

	CreateCustomConfigurations(params *CreateCustomConfigurationsParams, opts ...ClientOption) (*CreateCustomConfigurationsOK, error)

	CreateGCPCluster(params *CreateGCPClusterParams, opts ...ClientOption) (*CreateGCPClusterOK, error)

	CreateRecipe(params *CreateRecipeParams, opts ...ClientOption) (*CreateRecipeOK, error)

	DeleteAutoScaleRules(params *DeleteAutoScaleRulesParams, opts ...ClientOption) (*DeleteAutoScaleRulesOK, error)

	DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error)

	DeleteClusterDefinitions(params *DeleteClusterDefinitionsParams, opts ...ClientOption) (*DeleteClusterDefinitionsOK, error)

	DeleteClusterTemplates(params *DeleteClusterTemplatesParams, opts ...ClientOption) (*DeleteClusterTemplatesOK, error)

	DeleteCustomConfigurations(params *DeleteCustomConfigurationsParams, opts ...ClientOption) (*DeleteCustomConfigurationsOK, error)

	DeleteInstances(params *DeleteInstancesParams, opts ...ClientOption) (*DeleteInstancesOK, error)

	DeleteRecipes(params *DeleteRecipesParams, opts ...ClientOption) (*DeleteRecipesOK, error)

	DescribeAutoScaleRules(params *DescribeAutoScaleRulesParams, opts ...ClientOption) (*DescribeAutoScaleRulesOK, error)

	DescribeCluster(params *DescribeClusterParams, opts ...ClientOption) (*DescribeClusterOK, error)

	DescribeClusterDefinition(params *DescribeClusterDefinitionParams, opts ...ClientOption) (*DescribeClusterDefinitionOK, error)

	DescribeClusterTemplate(params *DescribeClusterTemplateParams, opts ...ClientOption) (*DescribeClusterTemplateOK, error)

	DescribeCustomConfigurations(params *DescribeCustomConfigurationsParams, opts ...ClientOption) (*DescribeCustomConfigurationsOK, error)

	DescribeRecipe(params *DescribeRecipeParams, opts ...ClientOption) (*DescribeRecipeOK, error)

	GetClusterHostStatus(params *GetClusterHostStatusParams, opts ...ClientOption) (*GetClusterHostStatusOK, error)

	GetClusterServiceStatus(params *GetClusterServiceStatusParams, opts ...ClientOption) (*GetClusterServiceStatusOK, error)

	GetCmRoles(params *GetCmRolesParams, opts ...ClientOption) (*GetCmRolesOK, error)

	GetDatahubLogDescriptors(params *GetDatahubLogDescriptorsParams, opts ...ClientOption) (*GetDatahubLogDescriptorsOK, error)

	ListAutoScaleHistory(params *ListAutoScaleHistoryParams, opts ...ClientOption) (*ListAutoScaleHistoryOK, error)

	ListClusterDefinitions(params *ListClusterDefinitionsParams, opts ...ClientOption) (*ListClusterDefinitionsOK, error)

	ListClusterLifecycleEvents(params *ListClusterLifecycleEventsParams, opts ...ClientOption) (*ListClusterLifecycleEventsOK, error)

	ListClusterTemplates(params *ListClusterTemplatesParams, opts ...ClientOption) (*ListClusterTemplatesOK, error)

	ListClusters(params *ListClustersParams, opts ...ClientOption) (*ListClustersOK, error)

	ListCustomConfigurations(params *ListCustomConfigurationsParams, opts ...ClientOption) (*ListCustomConfigurationsOK, error)

	ListDatahubDiagnostics(params *ListDatahubDiagnosticsParams, opts ...ClientOption) (*ListDatahubDiagnosticsOK, error)

	ListRecipes(params *ListRecipesParams, opts ...ClientOption) (*ListRecipesOK, error)

	PrepareClusterUpgrade(params *PrepareClusterUpgradeParams, opts ...ClientOption) (*PrepareClusterUpgradeOK, error)

	RenewCertificate(params *RenewCertificateParams, opts ...ClientOption) (*RenewCertificateOK, error)

	RenewPublicCertificate(params *RenewPublicCertificateParams, opts ...ClientOption) (*RenewPublicCertificateOK, error)

	RepairCluster(params *RepairClusterParams, opts ...ClientOption) (*RepairClusterOK, error)

	ReplaceRecipes(params *ReplaceRecipesParams, opts ...ClientOption) (*ReplaceRecipesOK, error)

	RetryCluster(params *RetryClusterParams, opts ...ClientOption) (*RetryClusterOK, error)

	RotateAutoTLSCertificates(params *RotateAutoTLSCertificatesParams, opts ...ClientOption) (*RotateAutoTLSCertificatesOK, error)

	RotatePrivateCertificates(params *RotatePrivateCertificatesParams, opts ...ClientOption) (*RotatePrivateCertificatesOK, error)

	RotateSaltPassword(params *RotateSaltPasswordParams, opts ...ClientOption) (*RotateSaltPasswordOK, error)

	ScaleCluster(params *ScaleClusterParams, opts ...ClientOption) (*ScaleClusterOK, error)

	SetCatalog(params *SetCatalogParams, opts ...ClientOption) (*SetCatalogOK, error)

	StartCluster(params *StartClusterParams, opts ...ClientOption) (*StartClusterOK, error)

	StartClusterVerticalScaling(params *StartClusterVerticalScalingParams, opts ...ClientOption) (*StartClusterVerticalScalingOK, error)

	StartDatabaseUpgrade(params *StartDatabaseUpgradeParams, opts ...ClientOption) (*StartDatabaseUpgradeOK, error)

	StartInstances(params *StartInstancesParams, opts ...ClientOption) (*StartInstancesOK, error)

	StopCluster(params *StopClusterParams, opts ...ClientOption) (*StopClusterOK, error)

	StopInstances(params *StopInstancesParams, opts ...ClientOption) (*StopInstancesOK, error)

	SyncCluster(params *SyncClusterParams, opts ...ClientOption) (*SyncClusterOK, error)

	SyncComponentVersionsFromCm(params *SyncComponentVersionsFromCmParams, opts ...ClientOption) (*SyncComponentVersionsFromCmOK, error)

	UpdateAutoScaleRules(params *UpdateAutoScaleRulesParams, opts ...ClientOption) (*UpdateAutoScaleRulesOK, error)

	UpdateOrchestratorState(params *UpdateOrchestratorStateParams, opts ...ClientOption) (*UpdateOrchestratorStateOK, error)

	UpgradeCluster(params *UpgradeClusterParams, opts ...ClientOption) (*UpgradeClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelDatahubDiagnostics cancels running datahub diagnostics collections

Cancel running Datahub diagnostics collection
*/
func (a *Client) CancelDatahubDiagnostics(params *CancelDatahubDiagnosticsParams, opts ...ClientOption) (*CancelDatahubDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelDatahubDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelDatahubDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/cancelDatahubDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelDatahubDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelDatahubDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelDatahubDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectCmDiagnostics starts datahub cloudera manager based diagnostics collection

Start Datahub Cloudera Manager based diagnostics collection
*/
func (a *Client) CollectCmDiagnostics(params *CollectCmDiagnosticsParams, opts ...ClientOption) (*CollectCmDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectCmDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "collectCmDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/collectCmDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CollectCmDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectCmDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectCmDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectDatahubDiagnostics starts data hub diagnostics collection

Start DataHub diagnostics collection
*/
func (a *Client) CollectDatahubDiagnostics(params *CollectDatahubDiagnosticsParams, opts ...ClientOption) (*CollectDatahubDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDatahubDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "collectDatahubDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/collectDatahubDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CollectDatahubDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectDatahubDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectDatahubDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAWSCluster creates an a w s workload cluster

Creates an AWS workload cluster.
*/
func (a *Client) CreateAWSCluster(params *CreateAWSClusterParams, opts ...ClientOption) (*CreateAWSClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAWSCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAWSCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAutoScaleRules creates auto scaling rules for a data hub cluster

Create Auto Scaling rules for a DataHub cluster.
*/
func (a *Client) CreateAutoScaleRules(params *CreateAutoScaleRulesParams, opts ...ClientOption) (*CreateAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAutoScaleRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAzureCluster creates an azure workload cluster

Creates an Azure workload cluster.
*/
func (a *Client) CreateAzureCluster(params *CreateAzureClusterParams, opts ...ClientOption) (*CreateAzureClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createAzureCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateClusterDefinition creates a cluster definition a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

Creates a cluster definition. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) CreateClusterDefinition(params *CreateClusterDefinitionParams, opts ...ClientOption) (*CreateClusterDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterDefinition",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createClusterDefinition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClusterDefinitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateClusterTemplate creates a cluster template a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

Creates a cluster template. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) CreateClusterTemplate(params *CreateClusterTemplateParams, opts ...ClientOption) (*CreateClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClusterTemplate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createClusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClusterTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateClusterTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCustomConfigurations creates custom configurations custom configurations are sets of properties or name value pairs that belong to any of the services present in cluster templates these can be used to override and or append properties to the corresponding cluster template while launching data hub clusters

Creates custom configurations. Custom Configurations are sets of properties or name-value pairs that belong to any of the services present in cluster templates. These can be used to override and/or append properties to the corresponding cluster template while launching DataHub clusters.
*/
func (a *Client) CreateCustomConfigurations(params *CreateCustomConfigurationsParams, opts ...ClientOption) (*CreateCustomConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCustomConfigurations",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createCustomConfigurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCustomConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGCPCluster creates a g c p workload cluster

Creates a GCP workload cluster.
*/
func (a *Client) CreateGCPCluster(params *CreateGCPClusterParams, opts ...ClientOption) (*CreateGCPClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGCPClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGCPCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createGCPCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGCPClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGCPClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGCPClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateRecipe creates recipe a recipe is a script that runs on all nodes of a specified instance group

Creates recipe. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) CreateRecipe(params *CreateRecipeParams, opts ...ClientOption) (*CreateRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecipeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRecipe",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/createRecipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAutoScaleRules deletes auto scaling policies for a data hub cluster

Delete AutoScaling policies for a DataHub cluster
*/
func (a *Client) DeleteAutoScaleRules(params *DeleteAutoScaleRulesParams, opts ...ClientOption) (*DeleteAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAutoScaleRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCluster deletes a workload cluster

Deletes a workload cluster.
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClusterDefinitions deletes cluster definitions a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

Deletes cluster definitions. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) DeleteClusterDefinitions(params *DeleteClusterDefinitionsParams, opts ...ClientOption) (*DeleteClusterDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterDefinitions",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteClusterDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteClusterTemplates deletes cluster templates a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

Deletes cluster templates. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) DeleteClusterTemplates(params *DeleteClusterTemplatesParams, opts ...ClientOption) (*DeleteClusterTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClusterTemplates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteClusterTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClusterTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteClusterTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCustomConfigurations deletes custom configurations custom configurations are sets of properties or name value pairs that belong to any of the services present in cluster templates these can be used to override and or append properties to the corresponding cluster template while launching data hub clusters

Deletes custom configurations. Custom Configurations are sets of properties or name-value pairs that belong to any of the services present in cluster templates. These can be used to override and/or append properties to the corresponding cluster template while launching DataHub clusters.
*/
func (a *Client) DeleteCustomConfigurations(params *DeleteCustomConfigurationsParams, opts ...ClientOption) (*DeleteCustomConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomConfigurations",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteCustomConfigurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCustomConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInstances deletes instances for the specified cluster

Deletes instances for the specified cluster.
*/
func (a *Client) DeleteInstances(params *DeleteInstancesParams, opts ...ClientOption) (*DeleteInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteRecipes deletes recipes a recipe is a script that runs on all nodes of a specified instance group

Deletes recipes. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) DeleteRecipes(params *DeleteRecipesParams, opts ...ClientOption) (*DeleteRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/deleteRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeAutoScaleRules describes the auto scaling policies for a data hub cluster

Describe the AutoScaling policies for a DataHub cluster
*/
func (a *Client) DescribeAutoScaleRules(params *DescribeAutoScaleRulesParams, opts ...ClientOption) (*DescribeAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeAutoScaleRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeCluster describes a workload cluster

Describes a workload cluster.
*/
func (a *Client) DescribeCluster(params *DescribeClusterParams, opts ...ClientOption) (*DescribeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeClusterDefinition describes a cluster definition a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

Describes a cluster definition. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) DescribeClusterDefinition(params *DescribeClusterDefinitionParams, opts ...ClientOption) (*DescribeClusterDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeClusterDefinition",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeClusterDefinition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterDefinitionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeClusterTemplate describes a cluster template a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

Describes a cluster template. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) DescribeClusterTemplate(params *DescribeClusterTemplateParams, opts ...ClientOption) (*DescribeClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeClusterTemplate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeClusterTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClusterTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClusterTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeCustomConfigurations describes custom configurations custom configurations are sets of properties or name value pairs that belong to any of the services present in cluster templates these can be used to override and or append properties to the corresponding cluster template while launching data hub clusters

Describes custom configurations. Custom Configurations are sets of properties or name-value pairs that belong to any of the services present in cluster templates. These can be used to override and/or append properties to the corresponding cluster template while launching DataHub clusters.
*/
func (a *Client) DescribeCustomConfigurations(params *DescribeCustomConfigurationsParams, opts ...ClientOption) (*DescribeCustomConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeCustomConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeCustomConfigurations",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeCustomConfigurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeCustomConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeCustomConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeCustomConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeRecipe describes recipe a recipe is a script that runs on all nodes of a specified instance group

Describes recipe. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) DescribeRecipe(params *DescribeRecipeParams, opts ...ClientOption) (*DescribeRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRecipeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeRecipe",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/describeRecipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeRecipeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeRecipeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterHostStatus gets cluster host status

Gets the status of the hosts in a cluster.
*/
func (a *Client) GetClusterHostStatus(params *GetClusterHostStatusParams, opts ...ClientOption) (*GetClusterHostStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHostStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterHostStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getClusterHostStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterHostStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterHostStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterHostStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetClusterServiceStatus gets cluster service status

Gets the status of the services in a cluster.
*/
func (a *Client) GetClusterServiceStatus(params *GetClusterServiceStatusParams, opts ...ClientOption) (*GetClusterServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterServiceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClusterServiceStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getClusterServiceStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClusterServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClusterServiceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCmRoles gathers cloudera manager roles that can be used for filtering in c m based diagnostics collection

Gather Cloudera Manager roles that can be used for filtering in CM based diagnostics collection.
*/
func (a *Client) GetCmRoles(params *GetCmRolesParams, opts ...ClientOption) (*GetCmRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCmRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCmRoles",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getCmRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCmRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCmRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCmRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDatahubLogDescriptors gathers log descriptors that are used for diagnostics collection

Gather log descriptors that are used for diagnostics collection.
*/
func (a *Client) GetDatahubLogDescriptors(params *GetDatahubLogDescriptorsParams, opts ...ClientOption) (*GetDatahubLogDescriptorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatahubLogDescriptorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatahubLogDescriptors",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/getDatahubLogDescriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatahubLogDescriptorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatahubLogDescriptorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDatahubLogDescriptorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListAutoScaleHistory lists auto scale history activity for a data hub cluster

List AutoScale history activity for a DataHub cluster.
*/
func (a *Client) ListAutoScaleHistory(params *ListAutoScaleHistoryParams, opts ...ClientOption) (*ListAutoScaleHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAutoScaleHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAutoScaleHistory",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listAutoScaleHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAutoScaleHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAutoScaleHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAutoScaleHistoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClusterDefinitions lists cluster definitions a cluster definition is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloud provider settings

Lists cluster definitions. A cluster definition is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical cloud provider settings.
*/
func (a *Client) ListClusterDefinitions(params *ListClusterDefinitionsParams, opts ...ClientOption) (*ListClusterDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClusterDefinitions",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusterDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClusterDefinitionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClusterLifecycleEvents lists workload cluster lifecycle events

Lists Workload cluster lifecycle events.
*/
func (a *Client) ListClusterLifecycleEvents(params *ListClusterLifecycleEventsParams, opts ...ClientOption) (*ListClusterLifecycleEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterLifecycleEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClusterLifecycleEvents",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusterLifecycleEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterLifecycleEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterLifecycleEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClusterLifecycleEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClusterTemplates lists cluster templates a cluster template is a reusable template in JSON format that can be used for creating multiple data hub clusters with identical cloudera runtime settings

Lists cluster templates. A cluster template is a reusable template in JSON format that can be used for creating multiple Data Hub clusters with identical Cloudera Runtime settings.
*/
func (a *Client) ListClusterTemplates(params *ListClusterTemplatesParams, opts ...ClientOption) (*ListClusterTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClusterTemplates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusterTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClusterTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClusterTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListClusters lists workload clusters

Lists workload clusters.
*/
func (a *Client) ListClusters(params *ListClustersParams, opts ...ClientOption) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClusters",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listClusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCustomConfigurations lists custom configurations custom configurations are sets of properties or name value pairs that belong to any of the services present in cluster templates these can be used to override and or append properties to the corresponding cluster template while launching data hub clusters

Lists custom configurations. Custom Configurations are sets of properties or name-value pairs that belong to any of the services present in cluster templates. These can be used to override and/or append properties to the corresponding cluster template while launching DataHub clusters.
*/
func (a *Client) ListCustomConfigurations(params *ListCustomConfigurationsParams, opts ...ClientOption) (*ListCustomConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomConfigurationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCustomConfigurations",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listCustomConfigurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomConfigurationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCustomConfigurationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDatahubDiagnostics lists recent datahub diagnostics collections

List recent Datahub diagnostics collection
*/
func (a *Client) ListDatahubDiagnostics(params *ListDatahubDiagnosticsParams, opts ...ClientOption) (*ListDatahubDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatahubDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDatahubDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listDatahubDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDatahubDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatahubDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatahubDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRecipes lists recipes a recipe is a script that runs on all nodes of a specified instance group

Lists recipes. A recipe is a script that runs on all nodes of a specified instance group.
*/
func (a *Client) ListRecipes(params *ListRecipesParams, opts ...ClientOption) (*ListRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/listRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrepareClusterUpgrade runnings upgrade related validations and prepares the required parcels for the upgrade

In order to reduce the chance of upgrade failures, we're introducing a preparation phase for runtime upgrades. During this phase, we're running all validations and downloading the required parcels for the machines. You can track the progress of the parcel preparation on the Cloudera Manager UI or you can check on the Management Console as well.
*/
func (a *Client) PrepareClusterUpgrade(params *PrepareClusterUpgradeParams, opts ...ClientOption) (*PrepareClusterUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareClusterUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "prepareClusterUpgrade",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/prepareClusterUpgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrepareClusterUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrepareClusterUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrepareClusterUpgradeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RenewCertificate renews certificate on datahub cluster by name or c r n

Deprecated, please use renew-public-certificate command instead. Renew certificate on datahub cluster by name or CRN
*/
func (a *Client) RenewCertificate(params *RenewCertificateParams, opts ...ClientOption) (*RenewCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renewCertificate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/renewCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenewCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenewCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RenewCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RenewPublicCertificate renews public certificate on a datahub cluster by name or c r n

Renews public certificate on a Datahub cluster by name or CRN.
*/
func (a *Client) RenewPublicCertificate(params *RenewPublicCertificateParams, opts ...ClientOption) (*RenewPublicCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewPublicCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renewPublicCertificate",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/renewPublicCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenewPublicCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenewPublicCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RenewPublicCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepairCluster repairs a cluster

Repairs a cluster.
*/
func (a *Client) RepairCluster(params *RepairClusterParams, opts ...ClientOption) (*RepairClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "repairCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/repairCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RepairClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepairClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepairClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReplaceRecipes replaces recipes for the given instance groups

Replaces recipes for the given instance groups.
*/
func (a *Client) ReplaceRecipes(params *ReplaceRecipesParams, opts ...ClientOption) (*ReplaceRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/replaceRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RetryCluster retries creation of a failed workload cluster

When stack provisioning or cluster creation fails, retryCluster allows you to resume the process from the last failed step.
*/
func (a *Client) RetryCluster(params *RetryClusterParams, opts ...ClientOption) (*RetryClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retryCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/retryCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetryClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetryClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RetryClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RotateAutoTLSCertificates rotates autotls certificates on the datahub s hosts

Deprecated, please use rotate-private-certificates command instead. Rotate autotls certificates on the datahub's hosts
*/
func (a *Client) RotateAutoTLSCertificates(params *RotateAutoTLSCertificatesParams, opts ...ClientOption) (*RotateAutoTLSCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateAutoTLSCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotateAutoTlsCertificates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/rotateAutoTlsCertificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateAutoTLSCertificatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotateAutoTLSCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RotateAutoTLSCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RotatePrivateCertificates rotates private certificates on the hosts of datahub

Rotates private certificates on the hosts of Datahub.
*/
func (a *Client) RotatePrivateCertificates(params *RotatePrivateCertificatesParams, opts ...ClientOption) (*RotatePrivateCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotatePrivateCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotatePrivateCertificates",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/rotatePrivateCertificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotatePrivateCertificatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotatePrivateCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RotatePrivateCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RotateSaltPassword rotates salt stack user password on data hub instances

Rotate SaltStack user password on Data Hub instances.
*/
func (a *Client) RotateSaltPassword(params *RotateSaltPasswordParams, opts ...ClientOption) (*RotateSaltPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateSaltPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotateSaltPassword",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/rotateSaltPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateSaltPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotateSaltPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RotateSaltPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScaleCluster scales a cluster by adding or removing cluster nodes

Scales a cluster by adding or removing cluster nodes.
*/
func (a *Client) ScaleCluster(params *ScaleClusterParams, opts ...ClientOption) (*ScaleClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScaleClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scaleCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/scaleCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScaleClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScaleClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScaleClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetCatalog sets a catalog for a data hub

Sets a catalog for a DataHub.
*/
func (a *Client) SetCatalog(params *SetCatalogParams, opts ...ClientOption) (*SetCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setCatalog",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/setCatalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartCluster starts a stopped workload cluster

Starts a stopped workload cluster.
*/
func (a *Client) StartCluster(params *StartClusterParams, opts ...ClientOption) (*StartClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/startCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartClusterVerticalScaling initiates the vertical scaling on data hub cluster

Initiates the vertical scaling on Data Hub cluster.
*/
func (a *Client) StartClusterVerticalScaling(params *StartClusterVerticalScalingParams, opts ...ClientOption) (*StartClusterVerticalScalingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartClusterVerticalScalingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startClusterVerticalScaling",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/startClusterVerticalScaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartClusterVerticalScalingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartClusterVerticalScalingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartClusterVerticalScalingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartDatabaseUpgrade upgrades the database of the data hub cluster

This command initiates the upgrade of the database of the Data Hub cluster.
*/
func (a *Client) StartDatabaseUpgrade(params *StartDatabaseUpgradeParams, opts ...ClientOption) (*StartDatabaseUpgradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDatabaseUpgradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startDatabaseUpgrade",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/startDatabaseUpgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDatabaseUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDatabaseUpgradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartDatabaseUpgradeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartInstances starts instances of a particular host group in the data hub cluster

Starts instances of a particular host group in the Data Hub cluster.
*/
func (a *Client) StartInstances(params *StartInstancesParams, opts ...ClientOption) (*StartInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/startInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopCluster stops a workload cluster

Stops a workload cluster. When a cluster is put in the stopped state, cluster VMs are given back to the cloud provider. To provision new VMs, start the cluster.
*/
func (a *Client) StopCluster(params *StopClusterParams, opts ...ClientOption) (*StopClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/stopCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopInstances stops instances of particular host group in the data hub cluster

Stops instances of a particular host group in the Data Hub cluster.
*/
func (a *Client) StopInstances(params *StopInstancesParams, opts ...ClientOption) (*StopInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopInstances",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/stopInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncCluster synchronizes the state of a cluster with the cloud provider and cloudera manager

Synchronizes the state of a cluster with the cloud provider and Cloudera Manager.
*/
func (a *Client) SyncCluster(params *SyncClusterParams, opts ...ClientOption) (*SyncClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/syncCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncComponentVersionsFromCm syncs component versions from c m after a failed upgrade

Syncs component versions from CM after a failed upgrade.
*/
func (a *Client) SyncComponentVersionsFromCm(params *SyncComponentVersionsFromCmParams, opts ...ClientOption) (*SyncComponentVersionsFromCmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncComponentVersionsFromCmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncComponentVersionsFromCm",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/syncComponentVersionsFromCm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncComponentVersionsFromCmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncComponentVersionsFromCmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncComponentVersionsFromCmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAutoScaleRules modifies auto scaling for a data hub cluster

Modify AutoScaling for a DataHub cluster
*/
func (a *Client) UpdateAutoScaleRules(params *UpdateAutoScaleRulesParams, opts ...ClientOption) (*UpdateAutoScaleRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAutoScaleRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAutoScaleRules",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/updateAutoScaleRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAutoScaleRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAutoScaleRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAutoScaleRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateOrchestratorState runs orchestrator engine state update on the data hub cluster

Run orchestrator engine state update on the Data Hub cluster.
*/
func (a *Client) UpdateOrchestratorState(params *UpdateOrchestratorStateParams, opts ...ClientOption) (*UpdateOrchestratorStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrchestratorStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrchestratorState",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/updateOrchestratorState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrchestratorStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrchestratorStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOrchestratorStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeCluster upgrades the o s or data platform on a datahub cluster

Upgrades the OS or data platform on a datahub cluster. You have the option to either specify one of 'imageId', 'runtime' or 'lockComponents' or both 'imageId' and 'lockComponents' or none of the parameters.
*/
func (a *Client) UpgradeCluster(params *UpgradeClusterParams, opts ...ClientOption) (*UpgradeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/datahub/upgradeCluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeClusterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
