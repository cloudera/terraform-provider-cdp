// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddCoprocessor(params *AddCoprocessorParams, opts ...ClientOption) (*AddCoprocessorOK, error)

	CollectDiagnostics(params *CollectDiagnosticsParams, opts ...ClientOption) (*CollectDiagnosticsOK, error)

	CreateDatabase(params *CreateDatabaseParams, opts ...ClientOption) (*CreateDatabaseOK, error)

	CreateSnapshot(params *CreateSnapshotParams, opts ...ClientOption) (*CreateSnapshotOK, error)

	DeleteSnapshot(params *DeleteSnapshotParams, opts ...ClientOption) (*DeleteSnapshotOK, error)

	DescribeClientConnectivity(params *DescribeClientConnectivityParams, opts ...ClientOption) (*DescribeClientConnectivityOK, error)

	DescribeDatabase(params *DescribeDatabaseParams, opts ...ClientOption) (*DescribeDatabaseOK, error)

	DescribeHbaseConfiguration(params *DescribeHbaseConfigurationParams, opts ...ClientOption) (*DescribeHbaseConfigurationOK, error)

	DescribeUpgradeDatabase(params *DescribeUpgradeDatabaseParams, opts ...ClientOption) (*DescribeUpgradeDatabaseOK, error)

	DropDatabase(params *DropDatabaseParams, opts ...ClientOption) (*DropDatabaseOK, error)

	ListCoprocessors(params *ListCoprocessorsParams, opts ...ClientOption) (*ListCoprocessorsOK, error)

	ListDatabases(params *ListDatabasesParams, opts ...ClientOption) (*ListDatabasesOK, error)

	ListDiagnostics(params *ListDiagnosticsParams, opts ...ClientOption) (*ListDiagnosticsOK, error)

	ListEdgeNodes(params *ListEdgeNodesParams, opts ...ClientOption) (*ListEdgeNodesOK, error)

	ListEvents(params *ListEventsParams, opts ...ClientOption) (*ListEventsOK, error)

	ListRestoreSnapshots(params *ListRestoreSnapshotsParams, opts ...ClientOption) (*ListRestoreSnapshotsOK, error)

	ListScalingEvents(params *ListScalingEventsParams, opts ...ClientOption) (*ListScalingEventsOK, error)

	ListSnapshots(params *ListSnapshotsParams, opts ...ClientOption) (*ListSnapshotsOK, error)

	ListSupportedEnvironments(params *ListSupportedEnvironmentsParams, opts ...ClientOption) (*ListSupportedEnvironmentsOK, error)

	PrepareUpgradeDatabase(params *PrepareUpgradeDatabaseParams, opts ...ClientOption) (*PrepareUpgradeDatabaseOK, error)

	RemoveCoprocessor(params *RemoveCoprocessorParams, opts ...ClientOption) (*RemoveCoprocessorOK, error)

	RestoreSnapshot(params *RestoreSnapshotParams, opts ...ClientOption) (*RestoreSnapshotOK, error)

	StartDatabase(params *StartDatabaseParams, opts ...ClientOption) (*StartDatabaseOK, error)

	StopDatabase(params *StopDatabaseParams, opts ...ClientOption) (*StopDatabaseOK, error)

	UpdateDatabase(params *UpdateDatabaseParams, opts ...ClientOption) (*UpdateDatabaseOK, error)

	UpdateEdgeNodes(params *UpdateEdgeNodesParams, opts ...ClientOption) (*UpdateEdgeNodesOK, error)

	UpdateHbaseConfiguration(params *UpdateHbaseConfigurationParams, opts ...ClientOption) (*UpdateHbaseConfigurationOK, error)

	UpgradeDatabase(params *UpgradeDatabaseParams, opts ...ClientOption) (*UpgradeDatabaseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddCoprocessor adds a coprocessor for a specific table

Adds a coprocessor for a specific table.
*/
func (a *Client) AddCoprocessor(params *AddCoprocessorParams, opts ...ClientOption) (*AddCoprocessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCoprocessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCoprocessor",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/addCoprocessor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCoprocessorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCoprocessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCoprocessorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectDiagnostics collects diagnostic data bundles from the database

returns details of running command
*/
func (a *Client) CollectDiagnostics(params *CollectDiagnosticsParams, opts ...ClientOption) (*CollectDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "collectDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/collectDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CollectDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateDatabase creates op db

Create a operational database in a environment
*/
func (a *Client) CreateDatabase(params *CreateDatabaseParams, opts ...ClientOption) (*CreateDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/createDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSnapshot creates a snapshot for a specific table

Returns id state and creation time
*/
func (a *Client) CreateSnapshot(params *CreateSnapshotParams, opts ...ClientOption) (*CreateSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSnapshot",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/createSnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSnapshot deletes a snapshot

Returns state of operation
*/
func (a *Client) DeleteSnapshot(params *DeleteSnapshotParams, opts ...ClientOption) (*DeleteSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSnapshot",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/deleteSnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeClientConnectivity returns client connectivity details

Returns details to enable programmatic client connectivity for a database
*/
func (a *Client) DescribeClientConnectivity(params *DescribeClientConnectivityParams, opts ...ClientOption) (*DescribeClientConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClientConnectivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeClientConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/describeClientConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeClientConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClientConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeClientConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeDatabase describes a op db

Details about the operational database
*/
func (a *Client) DescribeDatabase(params *DescribeDatabaseParams, opts ...ClientOption) (*DescribeDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/describeDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeHbaseConfiguration describes the configuration of h base

Describes the selected configuration of the HBase cluster of an operational database in the environment.
*/
func (a *Client) DescribeHbaseConfiguration(params *DescribeHbaseConfigurationParams, opts ...ClientOption) (*DescribeHbaseConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeHbaseConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeHbaseConfiguration",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/describeHbaseConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeHbaseConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeHbaseConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeHbaseConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeUpgradeDatabase describes the upgrade availability

Describes the upgrade availability for an operational database.
*/
func (a *Client) DescribeUpgradeDatabase(params *DescribeUpgradeDatabaseParams, opts ...ClientOption) (*DescribeUpgradeDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeUpgradeDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeUpgradeDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/describeUpgradeDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeUpgradeDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeUpgradeDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeUpgradeDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DropDatabase drops a op db

drop the operational database
*/
func (a *Client) DropDatabase(params *DropDatabaseParams, opts ...ClientOption) (*DropDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDropDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dropDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/dropDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DropDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DropDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DropDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCoprocessors lists coprocessors in a database

Lists coprocessors in a database.
*/
func (a *Client) ListCoprocessors(params *ListCoprocessorsParams, opts ...ClientOption) (*ListCoprocessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoprocessorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCoprocessors",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listCoprocessors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCoprocessorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoprocessorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCoprocessorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDatabases lists all op dbs in an environment

Fetch a list of all operational databases in an environment
*/
func (a *Client) ListDatabases(params *ListDatabasesParams, opts ...ClientOption) (*ListDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDatabases",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listDatabases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDatabasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDatabasesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListDiagnostics lists all diagnostics associated to the database

returns list of diagnostics collections
*/
func (a *Client) ListDiagnostics(params *ListDiagnosticsParams, opts ...ClientOption) (*ListDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEdgeNodes lists edge nodes in a database

Lists edge nodes in a database.
*/
func (a *Client) ListEdgeNodes(params *ListEdgeNodesParams, opts ...ClientOption) (*ListEdgeNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEdgeNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEdgeNodes",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listEdgeNodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEdgeNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEdgeNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEdgeNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEvents lists events

Lists events in reverse chronological order for an operational database.
*/
func (a *Client) ListEvents(params *ListEventsParams, opts ...ClientOption) (*ListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEvents",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRestoreSnapshots lists instances when a snapshot was restored to a database

Returns a list of snapshots restored into a database.
*/
func (a *Client) ListRestoreSnapshots(params *ListRestoreSnapshotsParams, opts ...ClientOption) (*ListRestoreSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRestoreSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRestoreSnapshots",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listRestoreSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRestoreSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRestoreSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRestoreSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListScalingEvents lists scaling events

Lists scaling events in reverse chronological order for an operational database.
*/
func (a *Client) ListScalingEvents(params *ListScalingEventsParams, opts ...ClientOption) (*ListScalingEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScalingEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScalingEvents",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listScalingEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScalingEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScalingEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListScalingEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSnapshots shows snapshot for a table name in a specific location

Returns list of snapshot names
*/
func (a *Client) ListSnapshots(params *ListSnapshotsParams, opts ...ClientOption) (*ListSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSnapshots",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listSnapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSupportedEnvironments lists of environments available for the database creation

Fetches a list of environments available for the database creation
*/
func (a *Client) ListSupportedEnvironments(params *ListSupportedEnvironmentsParams, opts ...ClientOption) (*ListSupportedEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSupportedEnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSupportedEnvironments",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/listSupportedEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSupportedEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSupportedEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSupportedEnvironmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PrepareUpgradeDatabase prepares database upgrade

Running upgrade related validations and prepares the required parcels for the upgrade.
*/
func (a *Client) PrepareUpgradeDatabase(params *PrepareUpgradeDatabaseParams, opts ...ClientOption) (*PrepareUpgradeDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareUpgradeDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "prepareUpgradeDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/prepareUpgradeDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PrepareUpgradeDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrepareUpgradeDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PrepareUpgradeDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveCoprocessor removes a coprocessor for a specific table

Removes a coprocessor for a specific table.
*/
func (a *Client) RemoveCoprocessor(params *RemoveCoprocessorParams, opts ...ClientOption) (*RemoveCoprocessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCoprocessorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeCoprocessor",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/removeCoprocessor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveCoprocessorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveCoprocessorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveCoprocessorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestoreSnapshot restores a snapshot

Returns state of operation
*/
func (a *Client) RestoreSnapshot(params *RestoreSnapshotParams, opts ...ClientOption) (*RestoreSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreSnapshot",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/restoreSnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestoreSnapshotDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartDatabase starts the database

Starts a previously stopped database
*/
func (a *Client) StartDatabase(params *StartDatabaseParams, opts ...ClientOption) (*StartDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/startDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopDatabase stops the database

Stops a running database
*/
func (a *Client) StopDatabase(params *StopDatabaseParams, opts ...ClientOption) (*StopDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/stopDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateDatabase updates the database

Update an operational database in an environment
*/
func (a *Client) UpdateDatabase(params *UpdateDatabaseParams, opts ...ClientOption) (*UpdateDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/updateDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateEdgeNodes updates edge nodes in a database

Update edge nodes in a database.
*/
func (a *Client) UpdateEdgeNodes(params *UpdateEdgeNodesParams, opts ...ClientOption) (*UpdateEdgeNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEdgeNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEdgeNodes",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/updateEdgeNodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEdgeNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEdgeNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateEdgeNodesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateHbaseConfiguration updates the configuration of h base

Updates the selected configuration of the HBase cluster of an operational database in the environment.
*/
func (a *Client) UpdateHbaseConfiguration(params *UpdateHbaseConfigurationParams, opts ...ClientOption) (*UpdateHbaseConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHbaseConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateHbaseConfiguration",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/updateHbaseConfiguration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHbaseConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHbaseConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateHbaseConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeDatabase upgrades the database

Upgrades an operational database in an environment to a given runtime.
*/
func (a *Client) UpgradeDatabase(params *UpgradeDatabaseParams, opts ...ClientOption) (*UpgradeDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeDatabase",
		Method:             "POST",
		PathPattern:        "/api/v1/opdb/upgradeDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeDatabaseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
