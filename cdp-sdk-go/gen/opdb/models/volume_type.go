// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VolumeType Volume Type.
//
//	`HDD` - Hard disk drives (HDD) volume type. Default is HDD. `SSD` - Solid disk drives (SSD) volume type. `LOCAL_SSD` - Local SSD volume type.
//
// swagger:model VolumeType
type VolumeType string

func NewVolumeType(value VolumeType) *VolumeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VolumeType.
func (m VolumeType) Pointer() *VolumeType {
	return &m
}

const (

	// VolumeTypeHDD captures enum value "HDD"
	VolumeTypeHDD VolumeType = "HDD"

	// VolumeTypeSSD captures enum value "SSD"
	VolumeTypeSSD VolumeType = "SSD"

	// VolumeTypeLOCALSSD captures enum value "LOCAL_SSD"
	VolumeTypeLOCALSSD VolumeType = "LOCAL_SSD"
)

// for schema
var volumeTypeEnum []interface{}

func init() {
	var res []VolumeType
	if err := json.Unmarshal([]byte(`["HDD","SSD","LOCAL_SSD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeTypeEnum = append(volumeTypeEnum, v)
	}
}

func (m VolumeType) validateVolumeTypeEnum(path, location string, value VolumeType) error {
	if err := validate.EnumCase(path, location, value, volumeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this volume type
func (m VolumeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVolumeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this volume type based on context it is used
func (m VolumeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
