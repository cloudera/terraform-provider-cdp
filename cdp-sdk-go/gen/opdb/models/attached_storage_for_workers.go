// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachedStorageForWorkers Attached storage for the worker nodes for AWS, Azure, and GCP cloud providers.
//
// swagger:model AttachedStorageForWorkers
type AttachedStorageForWorkers struct {

	// The number of Volumes. Default is 4. Valid Range: Minimum value of 1, maximum value 8.
	// Maximum: 8
	// Minimum: 1
	VolumeCount int32 `json:"volumeCount,omitempty"`

	// The target size of the volume, in GiB. Default is 2048.
	VolumeSize int32 `json:"volumeSize,omitempty"`

	// The volume type. This parameter can be HDD or SSD. Default is HDD.
	VolumeType VolumeType `json:"volumeType,omitempty"`
}

// Validate validates this attached storage for workers
func (m *AttachedStorageForWorkers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachedStorageForWorkers) validateVolumeCount(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("volumeCount", "body", int64(m.VolumeCount), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("volumeCount", "body", int64(m.VolumeCount), 8, false); err != nil {
		return err
	}

	return nil
}

func (m *AttachedStorageForWorkers) validateVolumeType(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeType) { // not required
		return nil
	}

	if err := m.VolumeType.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("volumeType")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("volumeType")
		}

		return err
	}

	return nil
}

// ContextValidate validate this attached storage for workers based on the context it is used
func (m *AttachedStorageForWorkers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachedStorageForWorkers) contextValidateVolumeType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeType) { // not required
		return nil
	}

	if err := m.VolumeType.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("volumeType")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("volumeType")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachedStorageForWorkers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachedStorageForWorkers) UnmarshalBinary(b []byte) error {
	var res AttachedStorageForWorkers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
