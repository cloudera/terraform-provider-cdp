// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDatabaseRequest A request to create the database
//
// swagger:model CreateDatabaseRequest
type CreateDatabaseRequest struct {

	// Attached storage for the worker nodes for AWS, Azure, and GCP cloud providers.
	AttachedStorageForWorkers *AttachedStorageForWorkers `json:"attachedStorageForWorkers,omitempty"`

	// Parameters to configure the AutoScaling
	AutoScalingParameters *AutoScalingParameters `json:"autoScalingParameters,omitempty"`

	// Utilizes the existing compute cluster with the provided CRN instead of creating a new one.
	ComputeClusterCrn string `json:"computeClusterCrn,omitempty"`

	// Uses provided compute cluster for Kubernetes clusters instead of creating a new one. Deprecated, use `computeClusterCrn` instead.
	ComputeClusterID string `json:"computeClusterId,omitempty"`

	// Optional tags to apply to launched infrastructure resources
	CustomUserTags []*KeyValuePair `json:"customUserTags"`

	// database name
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// Skips external database creation to avoid DB creation time.
	DisableExternalDB bool `json:"disableExternalDB,omitempty"`

	// Disable OAuth Bearer (JWT) authentication scheme.
	DisableJwtAuth bool `json:"disableJwtAuth,omitempty"`

	// Disable Kerberos authentication.
	DisableKerberos bool `json:"disableKerberos,omitempty"`

	// Disable deployment into multiple availability-zones (the database will be deployed into one subnet).
	DisableMultiAz bool `json:"disableMultiAz,omitempty"`

	// To enable grafana server for the database.
	EnableGrafana bool `json:"enableGrafana,omitempty"`

	// To enable the region canary for the database.
	EnableRegionCanary bool `json:"enableRegionCanary,omitempty"`

	// environment name
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Image details for the database.
	Image *Image `json:"image,omitempty"`

	// Optional tag to configure the major version of Java on the cluster.
	JavaVersion int32 `json:"javaVersion,omitempty"`

	// Number of edge nodes to be created for the database. A positive, non-zero number is required. The default value is 0.
	NumEdgeNodes int32 `json:"numEdgeNodes,omitempty"`

	// Custom recipes for the database.
	Recipes []*CustomRecipe `json:"recipes"`

	// Root volume size in GiB.
	RootVolumeSize int32 `json:"rootVolumeSize,omitempty"`

	// Optional tags to choose one of the predefined cluster sizes.
	ScaleType ScaleType `json:"scaleType,omitempty"`

	// Provide an optional external storage location for a non-CDP managed bucket as the HBase root.
	StorageLocation string `json:"storageLocation,omitempty"`

	// Optional tag to choose the storage types.
	StorageType StorageType `json:"storageType,omitempty"`

	// Override subnet where the database will be deployed. Disables Multi-AZ if set [only for AWS].
	SubnetID string `json:"subnetId,omitempty"`

	// Specifies encryption key to encrypt volume for instance group. It is currently supported for AWS cloud provider only.
	VolumeEncryptions []*VolumeEncryption `json:"volumeEncryptions"`
}

// Validate validates this create database request
func (m *CreateDatabaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedStorageForWorkers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoScalingParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomUserTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeEncryptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDatabaseRequest) validateAttachedStorageForWorkers(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedStorageForWorkers) { // not required
		return nil
	}

	if m.AttachedStorageForWorkers != nil {
		if err := m.AttachedStorageForWorkers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachedStorageForWorkers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachedStorageForWorkers")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) validateAutoScalingParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoScalingParameters) { // not required
		return nil
	}

	if m.AutoScalingParameters != nil {
		if err := m.AutoScalingParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) validateCustomUserTags(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomUserTags) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomUserTags); i++ {
		if swag.IsZero(m.CustomUserTags[i]) { // not required
			continue
		}

		if m.CustomUserTags[i] != nil {
			if err := m.CustomUserTags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customUserTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customUserTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateDatabaseRequest) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) validateRecipes(formats strfmt.Registry) error {
	if swag.IsZero(m.Recipes) { // not required
		return nil
	}

	for i := 0; i < len(m.Recipes); i++ {
		if swag.IsZero(m.Recipes[i]) { // not required
			continue
		}

		if m.Recipes[i] != nil {
			if err := m.Recipes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recipes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recipes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateDatabaseRequest) validateScaleType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleType) { // not required
		return nil
	}

	if err := m.ScaleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scaleType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scaleType")
		}
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) validateStorageType(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	if err := m.StorageType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageType")
		}
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) validateVolumeEncryptions(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeEncryptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeEncryptions); i++ {
		if swag.IsZero(m.VolumeEncryptions[i]) { // not required
			continue
		}

		if m.VolumeEncryptions[i] != nil {
			if err := m.VolumeEncryptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeEncryptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeEncryptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create database request based on the context it is used
func (m *CreateDatabaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachedStorageForWorkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutoScalingParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomUserTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecipes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeEncryptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDatabaseRequest) contextValidateAttachedStorageForWorkers(ctx context.Context, formats strfmt.Registry) error {

	if m.AttachedStorageForWorkers != nil {

		if swag.IsZero(m.AttachedStorageForWorkers) { // not required
			return nil
		}

		if err := m.AttachedStorageForWorkers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attachedStorageForWorkers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attachedStorageForWorkers")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateAutoScalingParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoScalingParameters != nil {

		if swag.IsZero(m.AutoScalingParameters) { // not required
			return nil
		}

		if err := m.AutoScalingParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateCustomUserTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomUserTags); i++ {

		if m.CustomUserTags[i] != nil {

			if swag.IsZero(m.CustomUserTags[i]) { // not required
				return nil
			}

			if err := m.CustomUserTags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customUserTags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customUserTags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {

		if swag.IsZero(m.Image) { // not required
			return nil
		}

		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateRecipes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Recipes); i++ {

		if m.Recipes[i] != nil {

			if swag.IsZero(m.Recipes[i]) { // not required
				return nil
			}

			if err := m.Recipes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recipes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recipes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateScaleType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ScaleType) { // not required
		return nil
	}

	if err := m.ScaleType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scaleType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scaleType")
		}
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateStorageType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.StorageType) { // not required
		return nil
	}

	if err := m.StorageType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("storageType")
		}
		return err
	}

	return nil
}

func (m *CreateDatabaseRequest) contextValidateVolumeEncryptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeEncryptions); i++ {

		if m.VolumeEncryptions[i] != nil {

			if swag.IsZero(m.VolumeEncryptions[i]) { // not required
				return nil
			}

			if err := m.VolumeEncryptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeEncryptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeEncryptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDatabaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDatabaseRequest) UnmarshalBinary(b []byte) error {
	var res CreateDatabaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
