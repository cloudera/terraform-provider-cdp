// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectDiagnosticsRequest Enables starting collection of the diagnostics. This is an asynchronous API and not expected to block.
//
// swagger:model CollectDiagnosticsRequest
type CollectDiagnosticsRequest struct {

	// Bundle size limit.
	BundleSizeBytes int64 `json:"bundleSizeBytes,omitempty"`

	// The CSH case number to associate the bundle.
	CaseNumber string `json:"caseNumber,omitempty"`

	// The name of the database.
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// This defines where to put the resulting bundle.
	Destination DiagnosticDestination `json:"destination,omitempty"`

	// The end time (in ISO 8601 format) of the period to collection statistics for.
	// Required: true
	EndTime *string `json:"endTime"`

	// The name of the environment.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// The start time (in ISO 8601 format) of the period to collection statistics for.
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this collect diagnostics request
func (m *CollectDiagnosticsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectDiagnosticsRequest) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *CollectDiagnosticsRequest) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := m.Destination.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("destination")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("destination")
		}

		return err
	}

	return nil
}

func (m *CollectDiagnosticsRequest) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *CollectDiagnosticsRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this collect diagnostics request based on the context it is used
func (m *CollectDiagnosticsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectDiagnosticsRequest) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if err := m.Destination.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("destination")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("destination")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectDiagnosticsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectDiagnosticsRequest) UnmarshalBinary(b []byte) error {
	var res CollectDiagnosticsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
