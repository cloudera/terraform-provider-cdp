// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListSupportedInstanceTypesRequest The request for listing supported instance types.
//
// swagger:model ListSupportedInstanceTypesRequest
type ListSupportedInstanceTypesRequest struct {

	// The Architecture.
	Architecture ArchitectureType `json:"architecture,omitempty"`

	// The name of Cloud Platform.
	// Required: true
	CloudPlatform *CloudPlatform `json:"cloudPlatform"`

	// The Instance Group Type.
	InstanceGroup InstanceGroupType `json:"instanceGroup,omitempty"`

	// The Scale Type.
	// Required: true
	ScaleType *ScaleType `json:"scaleType"`

	// The Storage Type.
	// Required: true
	StorageType *StorageType `json:"storageType"`
}

// Validate validates this list supported instance types request
func (m *ListSupportedInstanceTypesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSupportedInstanceTypesRequest) validateArchitecture(formats strfmt.Registry) error {
	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	if err := m.Architecture.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("architecture")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("architecture")
		}
		return err
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	if m.CloudPlatform != nil {
		if err := m.CloudPlatform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudPlatform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudPlatform")
			}
			return err
		}
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) validateInstanceGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceGroup) { // not required
		return nil
	}

	if err := m.InstanceGroup.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instanceGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("instanceGroup")
		}
		return err
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) validateScaleType(formats strfmt.Registry) error {

	if err := validate.Required("scaleType", "body", m.ScaleType); err != nil {
		return err
	}

	if err := validate.Required("scaleType", "body", m.ScaleType); err != nil {
		return err
	}

	if m.ScaleType != nil {
		if err := m.ScaleType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleType")
			}
			return err
		}
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) validateStorageType(formats strfmt.Registry) error {

	if err := validate.Required("storageType", "body", m.StorageType); err != nil {
		return err
	}

	if err := validate.Required("storageType", "body", m.StorageType); err != nil {
		return err
	}

	if m.StorageType != nil {
		if err := m.StorageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list supported instance types request based on the context it is used
func (m *ListSupportedInstanceTypesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchitecture(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudPlatform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSupportedInstanceTypesRequest) contextValidateArchitecture(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	if err := m.Architecture.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("architecture")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("architecture")
		}
		return err
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) contextValidateCloudPlatform(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudPlatform != nil {

		if err := m.CloudPlatform.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudPlatform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudPlatform")
			}
			return err
		}
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) contextValidateInstanceGroup(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceGroup) { // not required
		return nil
	}

	if err := m.InstanceGroup.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instanceGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("instanceGroup")
		}
		return err
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) contextValidateScaleType(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleType != nil {

		if err := m.ScaleType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleType")
			}
			return err
		}
	}

	return nil
}

func (m *ListSupportedInstanceTypesRequest) contextValidateStorageType(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageType != nil {

		if err := m.StorageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListSupportedInstanceTypesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListSupportedInstanceTypesRequest) UnmarshalBinary(b []byte) error {
	var res ListSupportedInstanceTypesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
