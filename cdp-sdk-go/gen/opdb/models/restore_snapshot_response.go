// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreSnapshotResponse Response object for the RestoreSnapshot method.
//
// swagger:model RestoreSnapshotResponse
type RestoreSnapshotResponse struct {

	// The submitted Command ID of the restore snapshot.
	CommandID int64 `json:"commandID,omitempty"`

	// The name of the database.
	DatabaseName string `json:"databaseName,omitempty"`

	// The name of the environment.
	EnvironmentName string `json:"environmentName,omitempty"`

	// The time when the snapshot restore was started.
	RestoreTime int64 `json:"restoreTime,omitempty"`

	// The name of the snapshot.
	SnapshotName string `json:"snapshotName,omitempty"`

	// The status of the restore snapshot.
	Status SnapshotStatusType `json:"status,omitempty"`

	// Reason for the status.
	StatusReason string `json:"statusReason,omitempty"`

	// The name of the target database.
	TargetDatabaseName string `json:"targetDatabaseName,omitempty"`

	// The name of the target environment.
	TargetEnvironmentName string `json:"targetEnvironmentName,omitempty"`
}

// Validate validates this restore snapshot response
func (m *RestoreSnapshotResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshotResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("status")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("status")
		}

		return err
	}

	return nil
}

// ContextValidate validate this restore snapshot response based on the context it is used
func (m *RestoreSnapshotResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshotResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("status")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("status")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreSnapshotResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreSnapshotResponse) UnmarshalBinary(b []byte) error {
	var res RestoreSnapshotResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
