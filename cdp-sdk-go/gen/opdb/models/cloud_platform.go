// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CloudPlatform Cloud Provider that cluster is exhibited on.
//
//	`AWS` - AWS `AZURE` - Azure `GCP` - GCP
//
// swagger:model CloudPlatform
type CloudPlatform string

func NewCloudPlatform(value CloudPlatform) *CloudPlatform {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CloudPlatform.
func (m CloudPlatform) Pointer() *CloudPlatform {
	return &m
}

const (

	// CloudPlatformAWS captures enum value "AWS"
	CloudPlatformAWS CloudPlatform = "AWS"

	// CloudPlatformAZURE captures enum value "AZURE"
	CloudPlatformAZURE CloudPlatform = "AZURE"

	// CloudPlatformGCP captures enum value "GCP"
	CloudPlatformGCP CloudPlatform = "GCP"
)

// for schema
var cloudPlatformEnum []any

func init() {
	var res []CloudPlatform
	if err := json.Unmarshal([]byte(`["AWS","AZURE","GCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudPlatformEnum = append(cloudPlatformEnum, v)
	}
}

func (m CloudPlatform) validateCloudPlatformEnum(path, location string, value CloudPlatform) error {
	if err := validate.EnumCase(path, location, value, cloudPlatformEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cloud platform
func (m CloudPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCloudPlatformEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cloud platform based on context it is used
func (m CloudPlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
