// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartDatabaseResponse A response from starting the database.
//
// swagger:model StartDatabaseResponse
type StartDatabaseResponse struct {

	// The status of the database prior to the start request.
	PreviousStatus StatusType `json:"previousStatus,omitempty"`

	// True if the database start request accepted
	WasStarted bool `json:"wasStarted,omitempty"`
}

// Validate validates this start database response
func (m *StartDatabaseResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreviousStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartDatabaseResponse) validatePreviousStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousStatus) { // not required
		return nil
	}

	if err := m.PreviousStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("previousStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this start database response based on the context it is used
func (m *StartDatabaseResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreviousStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StartDatabaseResponse) contextValidatePreviousStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousStatus) { // not required
		return nil
	}

	if err := m.PreviousStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("previousStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("previousStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StartDatabaseResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StartDatabaseResponse) UnmarshalBinary(b []byte) error {
	var res StartDatabaseResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
