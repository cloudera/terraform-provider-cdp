// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseDetails Details of the databases.
//
// swagger:model DatabaseDetails
type DatabaseDetails struct {

	// The autoscaling config
	AutoScalingConfig *AutoScalingConfig `json:"autoScalingConfig,omitempty"`

	// Number of active compute nodes in the database (does not include the stopped nodes).
	ComputeNodesCount int32 `json:"computeNodesCount,omitempty"`

	// The creation time of the database
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// Crn of the creator
	CreatorCrn string `json:"creatorCrn,omitempty"`

	// database crn
	// Required: true
	Crn *string `json:"crn"`

	// The name of the database.
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// The number of edge nodes for this database.
	DbEdgeNodeCount int32 `json:"dbEdgeNodeCount,omitempty"`

	// Database version
	DbVersion string `json:"dbVersion,omitempty"`

	// environment crn
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Environment name
	EnvironmentName string `json:"environmentName,omitempty"`

	// Hue endpoint
	HueEndpoint string `json:"hueEndpoint,omitempty"`

	// Internal cluster name for this database
	InternalName string `json:"internalName,omitempty"`

	// The number of strong meta servers for this database. Requires the COD_STRONG_META_SERVERS entitlement.
	NumStrongMetaServers int32 `json:"numStrongMetaServers,omitempty"`

	// The predetermined size of the cluster.
	ScaleType ScaleType `json:"scaleType,omitempty"`

	// Status of the database creation
	Status StatusType `json:"status,omitempty"`

	// The list of storage details for the worker nodes for AWS, Azure, and GCP cloud providers.
	StorageDetailsForWorkers []*StorageDetailsForWorker `json:"storageDetailsForWorkers"`

	// HBase cloud storage location
	StorageLocation string `json:"storageLocation,omitempty"`

	// Total number of compute nodes in the database (including stopped nodes).
	TotalComputeNodesCount int32 `json:"totalComputeNodesCount,omitempty"`
}

// Validate validates this database details
func (m *DatabaseDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScalingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageDetailsForWorkers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDetails) validateAutoScalingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoScalingConfig) { // not required
		return nil
	}

	if m.AutoScalingConfig != nil {
		if err := m.AutoScalingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDetails) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateScaleType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleType) { // not required
		return nil
	}

	if err := m.ScaleType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scaleType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scaleType")
		}
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *DatabaseDetails) validateStorageDetailsForWorkers(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageDetailsForWorkers) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageDetailsForWorkers); i++ {
		if swag.IsZero(m.StorageDetailsForWorkers[i]) { // not required
			continue
		}

		if m.StorageDetailsForWorkers[i] != nil {
			if err := m.StorageDetailsForWorkers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDetailsForWorkers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDetailsForWorkers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this database details based on the context it is used
func (m *DatabaseDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoScalingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageDetailsForWorkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDetails) contextValidateAutoScalingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoScalingConfig != nil {

		if swag.IsZero(m.AutoScalingConfig) { // not required
			return nil
		}

		if err := m.AutoScalingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDetails) contextValidateScaleType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ScaleType) { // not required
		return nil
	}

	if err := m.ScaleType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scaleType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scaleType")
		}
		return err
	}

	return nil
}

func (m *DatabaseDetails) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *DatabaseDetails) contextValidateStorageDetailsForWorkers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageDetailsForWorkers); i++ {

		if m.StorageDetailsForWorkers[i] != nil {

			if swag.IsZero(m.StorageDetailsForWorkers[i]) { // not required
				return nil
			}

			if err := m.StorageDetailsForWorkers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDetailsForWorkers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDetailsForWorkers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseDetails) UnmarshalBinary(b []byte) error {
	var res DatabaseDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
