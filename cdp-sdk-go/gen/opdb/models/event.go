// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event Details of an event.
//
// swagger:model Event
type Event struct {

	// Map containing event attributes. Set verbose true to get map of event attributes.
	Attributes map[string]string `json:"attributes,omitempty"`

	// UUID linking the alert due to node failure and corresponding autoHealing event.
	AutoHealAlertID string `json:"autoHealAlertId,omitempty"`

	// The event creation timestamp.
	// Format: date-time
	CreateTimestamp strfmt.DateTime `json:"createTimestamp,omitempty"`

	// The expiration timestamp of the event. Set verbose true to get the expiration timestamp.
	// Format: date-time
	ExpiryTimestamp strfmt.DateTime `json:"expiryTimestamp,omitempty"`

	// The event ID.
	// Required: true
	ID *int64 `json:"id"`

	// The last update timestamp of the event. Set verbose true to get last update timestamp.
	// Format: date-time
	LastUpdateTimestamp strfmt.DateTime `json:"lastUpdateTimestamp,omitempty"`

	// Event status.
	// Required: true
	Status *string `json:"status"`

	// Event reason. Set verbose true to get event reason.
	StatusReason string `json:"statusReason,omitempty"`

	// Event type , currently value can be either ALERT_DELIVERY or AUTO_HEALING but more values could be introduced over time.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiryTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateCreateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("createTimestamp", "body", "date-time", m.CreateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateExpiryTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryTimestamp", "body", "date-time", m.ExpiryTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateLastUpdateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdateTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdateTimestamp", "body", "date-time", m.LastUpdateTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Event) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event based on context it is used
func (m *Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
