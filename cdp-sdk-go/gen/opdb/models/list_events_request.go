// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListEventsRequest List events request.
//
// swagger:model ListEventsRequest
type ListEventsRequest struct {

	// The name or CRN of the database.
	Database string `json:"database,omitempty"`

	// The name or CRN of the environment.
	Environment string `json:"environment,omitempty"`

	// The type of the event.
	EventType EventType `json:"eventType,omitempty"`

	// The beginning timestamp for the search range (inclusive).
	// Format: date-time
	FromTimestamp strfmt.DateTime `json:"fromTimestamp,omitempty"`

	// The page size.
	// Maximum: 20
	// Minimum: 5
	PageSize int32 `json:"pageSize,omitempty"`

	// A token to specify where to start paginating. This is the nextToken from a previously truncated response.
	PageToken string `json:"pageToken,omitempty"`

	// The ending timestamp for the search range (exclusive).
	// Format: date-time
	ToTimestamp strfmt.DateTime `json:"toTimestamp,omitempty"`

	// Verbose flag. Set true to get a detailed response. Default is false.
	Verbose bool `json:"verbose,omitempty"`
}

// Validate validates this list events request
func (m *ListEventsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEventsRequest) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.Validate(formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("eventType")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("eventType")
		}

		return err
	}

	return nil
}

func (m *ListEventsRequest) validateFromTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.FromTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("fromTimestamp", "body", "date-time", m.FromTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListEventsRequest) validatePageSize(formats strfmt.Registry) error {
	if swag.IsZero(m.PageSize) { // not required
		return nil
	}

	if err := validate.MinimumInt("pageSize", "body", int64(m.PageSize), 5, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "body", int64(m.PageSize), 20, false); err != nil {
		return err
	}

	return nil
}

func (m *ListEventsRequest) validateToTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ToTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("toTimestamp", "body", "date-time", m.ToTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list events request based on the context it is used
func (m *ListEventsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEventsRequest) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.ContextValidate(ctx, formats); err != nil {
		ve := new(errors.Validation)
		if stderrors.As(err, &ve) {
			return ve.ValidateName("eventType")
		}
		ce := new(errors.CompositeError)
		if stderrors.As(err, &ce) {
			return ce.ValidateName("eventType")
		}

		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListEventsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListEventsRequest) UnmarshalBinary(b []byte) error {
	var res ListEventsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
