// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateHbaseConfigurationRequest A request to update the HBase configuration.
//
// swagger:model UpdateHbaseConfigurationRequest
type UpdateHbaseConfigurationRequest struct {

	// The name of the configuration in Cloudera Manager being updated.
	// Required: true
	ConfigurationName *string `json:"configurationName"`

	// The type of the configuration being updated.
	// Required: true
	ConfigurationType *ConfigurationType `json:"configurationType"`

	// The new value of the configuration being updated.
	// Required: true
	ConfigurationValue *string `json:"configurationValue"`

	// The name or CRN of the database.
	// Required: true
	Database *string `json:"database"`

	// The name or CRN of the environment.
	// Required: true
	Environment *string `json:"environment"`
}

// Validate validates this update hbase configuration request
func (m *UpdateHbaseConfigurationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateHbaseConfigurationRequest) validateConfigurationName(formats strfmt.Registry) error {

	if err := validate.Required("configurationName", "body", m.ConfigurationName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateHbaseConfigurationRequest) validateConfigurationType(formats strfmt.Registry) error {

	if err := validate.Required("configurationType", "body", m.ConfigurationType); err != nil {
		return err
	}

	if err := validate.Required("configurationType", "body", m.ConfigurationType); err != nil {
		return err
	}

	if m.ConfigurationType != nil {
		if err := m.ConfigurationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurationType")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateHbaseConfigurationRequest) validateConfigurationValue(formats strfmt.Registry) error {

	if err := validate.Required("configurationValue", "body", m.ConfigurationValue); err != nil {
		return err
	}

	return nil
}

func (m *UpdateHbaseConfigurationRequest) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("database", "body", m.Database); err != nil {
		return err
	}

	return nil
}

func (m *UpdateHbaseConfigurationRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update hbase configuration request based on the context it is used
func (m *UpdateHbaseConfigurationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigurationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateHbaseConfigurationRequest) contextValidateConfigurationType(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigurationType != nil {

		if err := m.ConfigurationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configurationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configurationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateHbaseConfigurationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateHbaseConfigurationRequest) UnmarshalBinary(b []byte) error {
	var res UpdateHbaseConfigurationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
