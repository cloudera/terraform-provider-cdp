// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EdgeUpgradeStrategy Edge node upgrade strategy.
//
//	`ALL` - Upgrade edge nodes together. `ONE_BY_ONE` - Upgrade edge nodes one by one.
//
// swagger:model EdgeUpgradeStrategy
type EdgeUpgradeStrategy string

func NewEdgeUpgradeStrategy(value EdgeUpgradeStrategy) *EdgeUpgradeStrategy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EdgeUpgradeStrategy.
func (m EdgeUpgradeStrategy) Pointer() *EdgeUpgradeStrategy {
	return &m
}

const (

	// EdgeUpgradeStrategyALL captures enum value "ALL"
	EdgeUpgradeStrategyALL EdgeUpgradeStrategy = "ALL"

	// EdgeUpgradeStrategyONEBYONE captures enum value "ONE_BY_ONE"
	EdgeUpgradeStrategyONEBYONE EdgeUpgradeStrategy = "ONE_BY_ONE"
)

// for schema
var edgeUpgradeStrategyEnum []any

func init() {
	var res []EdgeUpgradeStrategy
	if err := json.Unmarshal([]byte(`["ALL","ONE_BY_ONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeUpgradeStrategyEnum = append(edgeUpgradeStrategyEnum, v)
	}
}

func (m EdgeUpgradeStrategy) validateEdgeUpgradeStrategyEnum(path, location string, value EdgeUpgradeStrategy) error {
	if err := validate.EnumCase(path, location, value, edgeUpgradeStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this edge upgrade strategy
func (m EdgeUpgradeStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEdgeUpgradeStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this edge upgrade strategy based on context it is used
func (m EdgeUpgradeStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
