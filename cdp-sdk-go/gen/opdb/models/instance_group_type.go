// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InstanceGroupType InstanceGroup Type.
//
//	`WORKER` - WORKER value of the InstanceGroup name. `LEADER` - LEADER value of the InstanceGroup name. `MASTER` - MASTER value of the InstanceGroup name. `GATEWAY` - GATEWAY value of the InstanceGroup name. `STRONGMETA` - STRONGMETA value of the InstanceGroup name. `EDGE` - EDGE value of the InstanceGroup name. `COMPUTE` - COMPUTE value of the InstanceGroup name. `RESTWORKER` - RESTWORKER value of the InstanceGroup name.
//
// swagger:model InstanceGroupType
type InstanceGroupType string

func NewInstanceGroupType(value InstanceGroupType) *InstanceGroupType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InstanceGroupType.
func (m InstanceGroupType) Pointer() *InstanceGroupType {
	return &m
}

const (

	// InstanceGroupTypeWORKER captures enum value "WORKER"
	InstanceGroupTypeWORKER InstanceGroupType = "WORKER"

	// InstanceGroupTypeLEADER captures enum value "LEADER"
	InstanceGroupTypeLEADER InstanceGroupType = "LEADER"

	// InstanceGroupTypeMASTER captures enum value "MASTER"
	InstanceGroupTypeMASTER InstanceGroupType = "MASTER"

	// InstanceGroupTypeGATEWAY captures enum value "GATEWAY"
	InstanceGroupTypeGATEWAY InstanceGroupType = "GATEWAY"

	// InstanceGroupTypeSTRONGMETA captures enum value "STRONGMETA"
	InstanceGroupTypeSTRONGMETA InstanceGroupType = "STRONGMETA"

	// InstanceGroupTypeEDGE captures enum value "EDGE"
	InstanceGroupTypeEDGE InstanceGroupType = "EDGE"
)

// for schema
var instanceGroupTypeEnum []interface{}

func init() {
	var res []InstanceGroupType
	if err := json.Unmarshal([]byte(`["WORKER","LEADER","MASTER","GATEWAY","STRONGMETA","EDGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceGroupTypeEnum = append(instanceGroupTypeEnum, v)
	}
}

func (m InstanceGroupType) validateInstanceGroupTypeEnum(path, location string, value InstanceGroupType) error {
	if err := validate.EnumCase(path, location, value, instanceGroupTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this instance group type
func (m InstanceGroupType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInstanceGroupTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this instance group type based on context it is used
func (m InstanceGroupType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
