// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventType Type of an Event
//
// swagger:model EventType
type EventType string

func NewEventType(value EventType) *EventType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EventType.
func (m EventType) Pointer() *EventType {
	return &m
}

const (

	// EventTypeALERTDELIVERY captures enum value "ALERT_DELIVERY"
	EventTypeALERTDELIVERY EventType = "ALERT_DELIVERY"

	// EventTypeAUTOHEALING captures enum value "AUTO_HEALING"
	EventTypeAUTOHEALING EventType = "AUTO_HEALING"
)

// for schema
var eventTypeEnum []any

func init() {
	var res []EventType
	if err := json.Unmarshal([]byte(`["ALERT_DELIVERY","AUTO_HEALING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventTypeEnum = append(eventTypeEnum, v)
	}
}

func (m EventType) validateEventTypeEnum(path, location string, value EventType) error {
	if err := validate.EnumCase(path, location, value, eventTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event type
func (m EventType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this event type based on context it is used
func (m EventType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
