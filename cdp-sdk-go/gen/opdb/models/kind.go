// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Kind A categorization of a connector to describe how it is broadly used.
//
//	`LIBRARY` - A client library or API which user's code invokes `JDBC` - A JDBC driver `SERVICE` - A Service URL `ENVIRONMENT` - An environment to use to run other commands and tools `ODBC` - An ODBC driver
//
// swagger:model Kind
type Kind string

func NewKind(value Kind) *Kind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Kind.
func (m Kind) Pointer() *Kind {
	return &m
}

const (

	// KindLIBRARY captures enum value "LIBRARY"
	KindLIBRARY Kind = "LIBRARY"

	// KindJDBC captures enum value "JDBC"
	KindJDBC Kind = "JDBC"

	// KindSERVICE captures enum value "SERVICE"
	KindSERVICE Kind = "SERVICE"

	// KindENVIRONMENT captures enum value "ENVIRONMENT"
	KindENVIRONMENT Kind = "ENVIRONMENT"
)

// for schema
var kindEnum []interface{}

func init() {
	var res []Kind
	if err := json.Unmarshal([]byte(`["LIBRARY","JDBC","SERVICE","ENVIRONMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kindEnum = append(kindEnum, v)
	}
}

func (m Kind) validateKindEnum(path, location string, value Kind) error {
	if err := validate.EnumCase(path, location, value, kindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this kind
func (m Kind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this kind based on context it is used
func (m Kind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
