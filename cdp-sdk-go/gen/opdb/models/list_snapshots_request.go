// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListSnapshotsRequest Show Snapshots Request.
//
// swagger:model ListSnapshotsRequest
type ListSnapshotsRequest struct {

	// The submitted Command ID of the snapshots.
	CommandID int64 `json:"commandId,omitempty"`

	// The name of the database.
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// The name of the environment.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// The creation time of the snapshots to search (inclusive).
	// Format: date-time
	FromCreationTime strfmt.DateTime `json:"fromCreationTime,omitempty"`

	// The table name.
	TableName string `json:"tableName,omitempty"`

	// The ending time of the snapshot creation to search (inclusive).
	// Format: date-time
	ToCreationTime strfmt.DateTime `json:"toCreationTime,omitempty"`
}

// Validate validates this list snapshots request
func (m *ListSnapshotsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListSnapshotsRequest) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *ListSnapshotsRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *ListSnapshotsRequest) validateFromCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FromCreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("fromCreationTime", "body", "date-time", m.FromCreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ListSnapshotsRequest) validateToCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ToCreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("toCreationTime", "body", "date-time", m.ToCreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list snapshots request based on context it is used
func (m *ListSnapshotsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListSnapshotsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListSnapshotsRequest) UnmarshalBinary(b []byte) error {
	var res ListSnapshotsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
