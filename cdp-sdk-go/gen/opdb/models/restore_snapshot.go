// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestoreSnapshot An instance of restoring a snapshot to a database.
//
// swagger:model RestoreSnapshot
type RestoreSnapshot struct {

	// Command id
	CommandID int64 `json:"commandID,omitempty"`

	// Reason for the failure in case of restore snapshot failed.
	FailureReason string `json:"failureReason,omitempty"`

	// When the snapshot restore was started
	RestoreTime int64 `json:"restoreTime,omitempty"`

	// The snapshot name
	SnapshotName string `json:"snapshotName,omitempty"`

	// Status
	Status SnapshotStatusType `json:"status,omitempty"`

	// The name of the target database
	TargetDatabaseName string `json:"targetDatabaseName,omitempty"`

	// The name of the target environment
	TargetEnvironmentName string `json:"targetEnvironmentName,omitempty"`
}

// Validate validates this restore snapshot
func (m *RestoreSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshot) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this restore snapshot based on the context it is used
func (m *RestoreSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreSnapshot) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreSnapshot) UnmarshalBinary(b []byte) error {
	var res RestoreSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
