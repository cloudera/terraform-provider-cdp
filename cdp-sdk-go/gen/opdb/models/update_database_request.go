// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDatabaseRequest A request to update the database
//
// swagger:model UpdateDatabaseRequest
type UpdateDatabaseRequest struct {

	// Parameters to configure the scaling policy
	AutoScalingParameters *AutoScalingParameters `json:"autoScalingParameters,omitempty"`

	// Catalog name for the image.
	Catalog string `json:"catalog,omitempty"`

	// database name
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// environment name
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Sets the desired number of REST Worker nodes for the database. A positive, non-zero number is required. Requires the COD_RESTWORKERS entitlement.
	NumDesiredRestworkerNodes int32 `json:"numDesiredRestworkerNodes,omitempty"`

	// The desired number of strong meta servers for this database. A positive, non-zero number is required. Use removeStrongMetaServers to remove strong meta servers entirely. Requires the COD_STRONG_META_SERVERS entitlement.
	NumDesiredStrongMetaServers int32 `json:"numDesiredStrongMetaServers,omitempty"`

	// Removes any REST Worker nodes provisioned for this database. Requires the COD_RESTWORKERS entitlement.
	RemoveRestworkerNodes bool `json:"removeRestworkerNodes,omitempty"`

	// Removes any strong meta servers provisioned for this database. Requires the COD_STRONG_META_SERVERS entitlement.
	RemoveStrongMetaServers bool `json:"removeStrongMetaServers,omitempty"`

	// Vertical Scale request for database.
	VerticalScale GroupType `json:"verticalScale,omitempty"`
}

// Validate validates this update database request
func (m *UpdateDatabaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScalingParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerticalScale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDatabaseRequest) validateAutoScalingParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoScalingParameters) { // not required
		return nil
	}

	if m.AutoScalingParameters != nil {
		if err := m.AutoScalingParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateDatabaseRequest) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateDatabaseRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateDatabaseRequest) validateVerticalScale(formats strfmt.Registry) error {
	if swag.IsZero(m.VerticalScale) { // not required
		return nil
	}

	if err := m.VerticalScale.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("verticalScale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("verticalScale")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update database request based on the context it is used
func (m *UpdateDatabaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoScalingParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerticalScale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateDatabaseRequest) contextValidateAutoScalingParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoScalingParameters != nil {

		if swag.IsZero(m.AutoScalingParameters) { // not required
			return nil
		}

		if err := m.AutoScalingParameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScalingParameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScalingParameters")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateDatabaseRequest) contextValidateVerticalScale(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.VerticalScale) { // not required
		return nil
	}

	if err := m.VerticalScale.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("verticalScale")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("verticalScale")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateDatabaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateDatabaseRequest) UnmarshalBinary(b []byte) error {
	var res UpdateDatabaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
