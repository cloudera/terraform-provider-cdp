// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SELinux SELinux configurations for the cluster
//
//	`PERMISSIVE` - PERMISSIVE policy is used for the cluster. `ENFORCING` - ENFORCING policy is used for the cluster.
//
// swagger:model SELinux
type SELinux string

func NewSELinux(value SELinux) *SELinux {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SELinux.
func (m SELinux) Pointer() *SELinux {
	return &m
}

const (

	// SELinuxPERMISSIVE captures enum value "PERMISSIVE"
	SELinuxPERMISSIVE SELinux = "PERMISSIVE"

	// SELinuxENFORCING captures enum value "ENFORCING"
	SELinuxENFORCING SELinux = "ENFORCING"
)

// for schema
var sELinuxEnum []any

func init() {
	var res []SELinux
	if err := json.Unmarshal([]byte(`["PERMISSIVE","ENFORCING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sELinuxEnum = append(sELinuxEnum, v)
	}
}

func (m SELinux) validateSELinuxEnum(path, location string, value SELinux) error {
	if err := validate.EnumCase(path, location, value, sELinuxEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this s e linux
func (m SELinux) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSELinuxEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this s e linux based on context it is used
func (m SELinux) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
