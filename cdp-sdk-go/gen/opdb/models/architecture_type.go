// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ArchitectureType Architecture type for cluster.
//
//	`X86_64` - X64 CPU Architecture is used for the cluster. `ARM64` - ARM64 CPU Architecture is used for the cluster.
//
// swagger:model ArchitectureType
type ArchitectureType string

func NewArchitectureType(value ArchitectureType) *ArchitectureType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ArchitectureType.
func (m ArchitectureType) Pointer() *ArchitectureType {
	return &m
}

const (

	// ArchitectureTypeX8664 captures enum value "X86_64"
	ArchitectureTypeX8664 ArchitectureType = "X86_64"

	// ArchitectureTypeARM64 captures enum value "ARM64"
	ArchitectureTypeARM64 ArchitectureType = "ARM64"
)

// for schema
var architectureTypeEnum []interface{}

func init() {
	var res []ArchitectureType
	if err := json.Unmarshal([]byte(`["X86_64","ARM64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		architectureTypeEnum = append(architectureTypeEnum, v)
	}
}

func (m ArchitectureType) validateArchitectureTypeEnum(path, location string, value ArchitectureType) error {
	if err := validate.EnumCase(path, location, value, architectureTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this architecture type
func (m ArchitectureType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateArchitectureTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this architecture type based on context it is used
func (m ArchitectureType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
