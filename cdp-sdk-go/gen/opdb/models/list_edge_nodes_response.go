// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListEdgeNodesResponse The response for listing edge nodes in a database.
//
// swagger:model ListEdgeNodesResponse
type ListEdgeNodesResponse struct {

	// The name or CRN of the database.
	// Required: true
	Database *string `json:"database"`

	// The list of edge nodes for a database.
	EdgeNodes []*EdgeNode `json:"edgeNodes"`

	// The name or CRN of the environment.
	// Required: true
	Environment *string `json:"environment"`
}

// Validate validates this list edge nodes response
func (m *ListEdgeNodesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEdgeNodesResponse) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("database", "body", m.Database); err != nil {
		return err
	}

	return nil
}

func (m *ListEdgeNodesResponse) validateEdgeNodes(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeNodes) { // not required
		return nil
	}

	for i := 0; i < len(m.EdgeNodes); i++ {
		if swag.IsZero(m.EdgeNodes[i]) { // not required
			continue
		}

		if m.EdgeNodes[i] != nil {
			if err := m.EdgeNodes[i].Validate(formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("edgeNodes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("edgeNodes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

func (m *ListEdgeNodesResponse) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list edge nodes response based on the context it is used
func (m *ListEdgeNodesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEdgeNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListEdgeNodesResponse) contextValidateEdgeNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EdgeNodes); i++ {

		if m.EdgeNodes[i] != nil {

			if swag.IsZero(m.EdgeNodes[i]) { // not required
				return nil
			}

			if err := m.EdgeNodes[i].ContextValidate(ctx, formats); err != nil {
				ve := new(errors.Validation)
				if stderrors.As(err, &ve) {
					return ve.ValidateName("edgeNodes" + "." + strconv.Itoa(i))
				}
				ce := new(errors.CompositeError)
				if stderrors.As(err, &ce) {
					return ce.ValidateName("edgeNodes" + "." + strconv.Itoa(i))
				}

				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListEdgeNodesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListEdgeNodesResponse) UnmarshalBinary(b []byte) error {
	var res ListEdgeNodesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
