// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiagnosticDestination Destination of the created diagnostics bundle.
//
// swagger:model DiagnosticDestination
type DiagnosticDestination string

func NewDiagnosticDestination(value DiagnosticDestination) *DiagnosticDestination {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DiagnosticDestination.
func (m DiagnosticDestination) Pointer() *DiagnosticDestination {
	return &m
}

const (

	// DiagnosticDestinationUPLOADTOCLOUDERA captures enum value "UPLOAD_TO_CLOUDERA"
	DiagnosticDestinationUPLOADTOCLOUDERA DiagnosticDestination = "UPLOAD_TO_CLOUDERA"

	// DiagnosticDestinationDOWNLOAD captures enum value "DOWNLOAD"
	DiagnosticDestinationDOWNLOAD DiagnosticDestination = "DOWNLOAD"
)

// for schema
var diagnosticDestinationEnum []any

func init() {
	var res []DiagnosticDestination
	if err := json.Unmarshal([]byte(`["UPLOAD_TO_CLOUDERA","DOWNLOAD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diagnosticDestinationEnum = append(diagnosticDestinationEnum, v)
	}
}

func (m DiagnosticDestination) validateDiagnosticDestinationEnum(path, location string, value DiagnosticDestination) error {
	if err := validate.EnumCase(path, location, value, diagnosticDestinationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this diagnostic destination
func (m DiagnosticDestination) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiagnosticDestinationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this diagnostic destination based on context it is used
func (m DiagnosticDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
