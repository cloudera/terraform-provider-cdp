// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ScaleType Scale type.
//
//	`MICRO` - Create a 2-node cluster (1 gateway and 1 worker) with high availability disabled. `LIGHT` - Create a multi-node cluster with a light master and gateway instance type. `HEAVY` - Create a multi-node cluster with heavy master and gateway instance type.
//
// swagger:model ScaleType
type ScaleType string

func NewScaleType(value ScaleType) *ScaleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ScaleType.
func (m ScaleType) Pointer() *ScaleType {
	return &m
}

const (

	// ScaleTypeMICRO captures enum value "MICRO"
	ScaleTypeMICRO ScaleType = "MICRO"

	// ScaleTypeLIGHT captures enum value "LIGHT"
	ScaleTypeLIGHT ScaleType = "LIGHT"

	// ScaleTypeHEAVY captures enum value "HEAVY"
	ScaleTypeHEAVY ScaleType = "HEAVY"
)

// for schema
var scaleTypeEnum []interface{}

func init() {
	var res []ScaleType
	if err := json.Unmarshal([]byte(`["MICRO","LIGHT","HEAVY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scaleTypeEnum = append(scaleTypeEnum, v)
	}
}

func (m ScaleType) validateScaleTypeEnum(path, location string, value ScaleType) error {
	if err := validate.EnumCase(path, location, value, scaleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this scale type
func (m ScaleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScaleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this scale type based on context it is used
func (m ScaleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
