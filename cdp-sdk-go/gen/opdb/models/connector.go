// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Connector Information to use to connect to a database via some mechanism.
//
// swagger:model Connector
type Connector struct {

	// Runtime details required to use the connector.
	Configuration *ConnectorConfiguration `json:"configuration,omitempty"`

	// Software dependency information necessary to use the connector.
	Dependencies *DependencyManagement `json:"dependencies,omitempty"`

	// A categorization of this connector.
	Kind Kind `json:"kind,omitempty"`

	// The name of the API/Library this connector represents.
	Name string `json:"name,omitempty"`

	// True if the connector requires Kerberos to authenticate.
	RequiresKerberos bool `json:"requiresKerberos,omitempty"`

	// The version of the connector.
	Version string `json:"version,omitempty"`
}

// Validate validates this connector
func (m *Connector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Connector) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *Connector) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	if m.Dependencies != nil {
		if err := m.Dependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Connector) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if err := m.Kind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("kind")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("kind")
		}
		return err
	}

	return nil
}

// ContextValidate validate this connector based on the context it is used
func (m *Connector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Connector) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {

		if swag.IsZero(m.Configuration) { // not required
			return nil
		}

		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *Connector) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.Dependencies != nil {

		if swag.IsZero(m.Dependencies) { // not required
			return nil
		}

		if err := m.Dependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Connector) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if err := m.Kind.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("kind")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("kind")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Connector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Connector) UnmarshalBinary(b []byte) error {
	var res Connector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
