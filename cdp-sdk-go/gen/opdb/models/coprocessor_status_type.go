// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CoprocessorStatusType Coprocessor status type.
//
//	`ADD_NEW` - When an add coprocessor request was just requested. `ADD_IN_PROGRESS` - When an add coprocessor request is in progress. `ADD_FAILED` - When an add coprocessor request has failed. `ADD_SUCCESSFUL` - Add coprocessor request has been completed successfully. `REMOVE_NEW` - When a remove coprocessor request was just requested. `REMOVE_IN_PROGRESS` - When a remove coprocessor is in progress. `REMOVE_FAILED` - When a remove coprocessor request has failed. `REMOVE_SUCCESSFUL` - Remove coprocessor request has been completed successfully.
//
// swagger:model CoprocessorStatusType
type CoprocessorStatusType string

func NewCoprocessorStatusType(value CoprocessorStatusType) *CoprocessorStatusType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CoprocessorStatusType.
func (m CoprocessorStatusType) Pointer() *CoprocessorStatusType {
	return &m
}

const (

	// CoprocessorStatusTypeADDNEW captures enum value "ADD_NEW"
	CoprocessorStatusTypeADDNEW CoprocessorStatusType = "ADD_NEW"

	// CoprocessorStatusTypeADDINPROGRESS captures enum value "ADD_IN_PROGRESS"
	CoprocessorStatusTypeADDINPROGRESS CoprocessorStatusType = "ADD_IN_PROGRESS"

	// CoprocessorStatusTypeADDFAILED captures enum value "ADD_FAILED"
	CoprocessorStatusTypeADDFAILED CoprocessorStatusType = "ADD_FAILED"

	// CoprocessorStatusTypeADDSUCCESSFUL captures enum value "ADD_SUCCESSFUL"
	CoprocessorStatusTypeADDSUCCESSFUL CoprocessorStatusType = "ADD_SUCCESSFUL"

	// CoprocessorStatusTypeREMOVENEW captures enum value "REMOVE_NEW"
	CoprocessorStatusTypeREMOVENEW CoprocessorStatusType = "REMOVE_NEW"

	// CoprocessorStatusTypeREMOVEINPROGRESS captures enum value "REMOVE_IN_PROGRESS"
	CoprocessorStatusTypeREMOVEINPROGRESS CoprocessorStatusType = "REMOVE_IN_PROGRESS"

	// CoprocessorStatusTypeREMOVEFAILED captures enum value "REMOVE_FAILED"
	CoprocessorStatusTypeREMOVEFAILED CoprocessorStatusType = "REMOVE_FAILED"

	// CoprocessorStatusTypeREMOVESUCCESSFUL captures enum value "REMOVE_SUCCESSFUL"
	CoprocessorStatusTypeREMOVESUCCESSFUL CoprocessorStatusType = "REMOVE_SUCCESSFUL"

	// CoprocessorStatusTypeUNKNOWN captures enum value "UNKNOWN"
	CoprocessorStatusTypeUNKNOWN CoprocessorStatusType = "UNKNOWN"
)

// for schema
var coprocessorStatusTypeEnum []any

func init() {
	var res []CoprocessorStatusType
	if err := json.Unmarshal([]byte(`["ADD_NEW","ADD_IN_PROGRESS","ADD_FAILED","ADD_SUCCESSFUL","REMOVE_NEW","REMOVE_IN_PROGRESS","REMOVE_FAILED","REMOVE_SUCCESSFUL","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		coprocessorStatusTypeEnum = append(coprocessorStatusTypeEnum, v)
	}
}

func (m CoprocessorStatusType) validateCoprocessorStatusTypeEnum(path, location string, value CoprocessorStatusType) error {
	if err := validate.EnumCase(path, location, value, coprocessorStatusTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this coprocessor status type
func (m CoprocessorStatusType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCoprocessorStatusTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this coprocessor status type based on context it is used
func (m CoprocessorStatusType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
