// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AutoScalingParameters A Parameters to configure AutoScaling
//
// swagger:model AutoScalingParameters
type AutoScalingParameters struct {

	// Period of metrics(in seconds) needs to be considered.
	EvaluationPeriod int64 `json:"evaluationPeriod,omitempty"`

	// The maximum number of compute nodes, as per these metrics, that can be scaled up to.
	MaxComputeNodesForDatabase *int32 `json:"maxComputeNodesForDatabase,omitempty"`

	// This configuration is effective when compute nodes are enabled. The maximum percentage threshold for the CPU utilization of nodes. The CPU utilization is obtained from the Cloudera Manager metric 'cpu_percent' across worker and compute nodes. Set 100 or more to disable the CPU metrics.
	MaxCPUUtilization int32 `json:"maxCpuUtilization,omitempty"`

	// The maximum percentage of HDFS utilization for the database before we trigger the scaling.
	MaxHdfsUsagePercentage int32 `json:"maxHdfsUsagePercentage,omitempty"`

	// The maximum number of regions per region server.
	MaxRegionsPerRegionServer int32 `json:"maxRegionsPerRegionServer,omitempty"`

	// Maximum number of worker nodes as per this metrics can be scaled up to.
	MaxWorkersForDatabase int32 `json:"maxWorkersForDatabase,omitempty"`

	// Maximum number of worker nodes as per this metrics can be scaled up to in one batch.
	MaxWorkersPerBatch int32 `json:"maxWorkersPerBatch,omitempty"`

	// The minimum number of compute nodes, as per these metrics, that can be scaled down to.
	MinComputeNodesForDatabase *int32 `json:"minComputeNodesForDatabase,omitempty"`

	// Minimum number of worker nodes as per this metrics can be scaled down to.
	MinWorkersForDatabase int32 `json:"minWorkersForDatabase,omitempty"`

	// The amount of block cache, in Gigabytes, which the database should have.
	MinimumBlockCacheGb int32 `json:"minimumBlockCacheGb,omitempty"`

	// The target value of the metric a user expect to maintain for the cluster
	TargetedValueForMetric int64 `json:"targetedValueForMetric,omitempty"`
}

// Validate validates this auto scaling parameters
func (m *AutoScalingParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auto scaling parameters based on context it is used
func (m *AutoScalingParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AutoScalingParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoScalingParameters) UnmarshalBinary(b []byte) error {
	var res AutoScalingParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
