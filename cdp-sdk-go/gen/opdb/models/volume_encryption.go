// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeEncryption Specify volume encryption key for instance group.
//
// swagger:model VolumeEncryption
type VolumeEncryption struct {

	// Encryption key.
	// Required: true
	EncryptionKey *string `json:"encryptionKey"`

	// Instance group to apply the encryption key to.
	// Required: true
	InstanceGroup *InstanceGroupType `json:"instanceGroup"`
}

// Validate validates this volume encryption
func (m *VolumeEncryption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptionKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeEncryption) validateEncryptionKey(formats strfmt.Registry) error {

	if err := validate.Required("encryptionKey", "body", m.EncryptionKey); err != nil {
		return err
	}

	return nil
}

func (m *VolumeEncryption) validateInstanceGroup(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroup", "body", m.InstanceGroup); err != nil {
		return err
	}

	if err := validate.Required("instanceGroup", "body", m.InstanceGroup); err != nil {
		return err
	}

	if m.InstanceGroup != nil {
		if err := m.InstanceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume encryption based on the context it is used
func (m *VolumeEncryption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeEncryption) contextValidateInstanceGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceGroup != nil {

		if err := m.InstanceGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeEncryption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeEncryption) UnmarshalBinary(b []byte) error {
	var res VolumeEncryption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
