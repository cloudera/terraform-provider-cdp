// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeNode An instance of a edge nodes.
//
// swagger:model EdgeNode
type EdgeNode struct {

	// Fully qualified domain name
	// Required: true
	DiscoveryFQDN *string `json:"discoveryFQDN"`

	// Instance ID.
	// Required: true
	InstanceID *string `json:"instanceId"`

	// Private IP.
	// Required: true
	PrivateIP *string `json:"privateIp"`

	// Public Ip
	// Required: true
	PublicIP *string `json:"publicIp"`
}

// Validate validates this edge node
func (m *EdgeNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscoveryFQDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeNode) validateDiscoveryFQDN(formats strfmt.Registry) error {

	if err := validate.Required("discoveryFQDN", "body", m.DiscoveryFQDN); err != nil {
		return err
	}

	return nil
}

func (m *EdgeNode) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	return nil
}

func (m *EdgeNode) validatePrivateIP(formats strfmt.Registry) error {

	if err := validate.Required("privateIp", "body", m.PrivateIP); err != nil {
		return err
	}

	return nil
}

func (m *EdgeNode) validatePublicIP(formats strfmt.Registry) error {

	if err := validate.Required("publicIp", "body", m.PublicIP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this edge node based on context it is used
func (m *EdgeNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EdgeNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeNode) UnmarshalBinary(b []byte) error {
	var res EdgeNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
