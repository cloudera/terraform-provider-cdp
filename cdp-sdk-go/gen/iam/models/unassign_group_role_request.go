// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UnassignGroupRoleRequest Request object for an unassign group role request.
//
// swagger:model UnassignGroupRoleRequest
type UnassignGroupRoleRequest struct {

	// The group to unassign the role from. Can be the group name or CRN.
	// Required: true
	GroupName *string `json:"groupName"`

	// The role to unassign from the group. Can be the role's CRN or name.
	// Required: true
	Role *string `json:"role"`
}

// Validate validates this unassign group role request
func (m *UnassignGroupRoleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnassignGroupRoleRequest) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("groupName", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *UnassignGroupRoleRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this unassign group role request based on context it is used
func (m *UnassignGroupRoleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UnassignGroupRoleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnassignGroupRoleRequest) UnmarshalBinary(b []byte) error {
	var res UnassignGroupRoleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
