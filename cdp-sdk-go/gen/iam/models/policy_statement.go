// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyStatement A policy statement is a list of rights and zero or more resources on which the rights are granted.
//
// swagger:model PolicyStatement
type PolicyStatement struct {

	// The resources on which the rights are granted.
	// Required: true
	Resources []string `json:"resources"`

	// The list of rights in the policy statement.
	// Required: true
	Rights []string `json:"rights"`
}

// Validate validates this policy statement
func (m *PolicyStatement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRights(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyStatement) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	return nil
}

func (m *PolicyStatement) validateRights(formats strfmt.Registry) error {

	if err := validate.Required("rights", "body", m.Rights); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policy statement based on context it is used
func (m *PolicyStatement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyStatement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyStatement) UnmarshalBinary(b []byte) error {
	var res PolicyStatement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
