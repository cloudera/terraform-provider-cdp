// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkloadPasswordDetails Information about the workload password for a user or machine user.
//
// swagger:model WorkloadPasswordDetails
type WorkloadPasswordDetails struct {

	// Whether a workload password is set.
	// Required: true
	IsPasswordSet *bool `json:"isPasswordSet"`

	// The date at which the workload password will expire.
	// Format: date-time
	PasswordExpirationDate strfmt.DateTime `json:"passwordExpirationDate,omitempty"`

	// The minimum lifetime date of the workload password. A new password can't be set until this date.
	// Format: date-time
	PasswordMinLifetimeDate strfmt.DateTime `json:"passwordMinLifetimeDate,omitempty"`
}

// Validate validates this workload password details
func (m *WorkloadPasswordDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsPasswordSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordMinLifetimeDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkloadPasswordDetails) validateIsPasswordSet(formats strfmt.Registry) error {

	if err := validate.Required("isPasswordSet", "body", m.IsPasswordSet); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadPasswordDetails) validatePasswordExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("passwordExpirationDate", "body", "date-time", m.PasswordExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkloadPasswordDetails) validatePasswordMinLifetimeDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordMinLifetimeDate) { // not required
		return nil
	}

	if err := validate.FormatOf("passwordMinLifetimeDate", "body", "date-time", m.PasswordMinLifetimeDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workload password details based on context it is used
func (m *WorkloadPasswordDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkloadPasswordDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkloadPasswordDetails) UnmarshalBinary(b []byte) error {
	var res WorkloadPasswordDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
