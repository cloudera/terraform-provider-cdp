// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSamlProviderRequest Request object for creating SAML provider request.
//
// swagger:model CreateSamlProviderRequest
type CreateSamlProviderRequest struct {

	// Whether to enable SCIM on this SAML provider. System for Cross-domain Identity Management (SCIM) version 2.0 is a standard for automating the provisioning of user and group identity information from identity provider to CDP. It is not supported for Cloudera for Government.
	EnableScim bool `json:"enableScim,omitempty"`

	// Whether to generate users' workload username by email . The default is to generate workload usernames by identity provider user ID (SAML NameID).
	GenerateWorkloadUsernameByEmail bool `json:"generateWorkloadUsernameByEmail,omitempty"`

	// SAML metadata document XML file. Length of meta data document cannot be more than 200 KB (200,000 bytes).
	// Max Length: 200000
	SamlMetadataDocument string `json:"samlMetadataDocument,omitempty"`

	// The name of SAML provider. The name must be unique, must have a maximum of 128 characters, and must contain only alphanumeric characters, "-" and "_". Names are are not case-sensitive.
	// Required: true
	SamlProviderName *string `json:"samlProviderName"`

	// Whether to sync group information for users federated with this SAML provider. Group membership can be passed using the https://cdp.cloudera.com/SAML/Attributes/groups SAML assertion. The default is to synchronize group membership.
	SyncGroupsOnLogin bool `json:"syncGroupsOnLogin,omitempty"`
}

// Validate validates this create saml provider request
func (m *CreateSamlProviderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSamlMetadataDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlProviderName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSamlProviderRequest) validateSamlMetadataDocument(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlMetadataDocument) { // not required
		return nil
	}

	if err := validate.MaxLength("samlMetadataDocument", "body", m.SamlMetadataDocument, 200000); err != nil {
		return err
	}

	return nil
}

func (m *CreateSamlProviderRequest) validateSamlProviderName(formats strfmt.Registry) error {

	if err := validate.Required("samlProviderName", "body", m.SamlProviderName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create saml provider request based on context it is used
func (m *CreateSamlProviderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateSamlProviderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSamlProviderRequest) UnmarshalBinary(b []byte) error {
	var res CreateSamlProviderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
