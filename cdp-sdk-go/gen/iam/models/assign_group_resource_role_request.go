// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignGroupResourceRoleRequest Request object for an assign group resource role request.
//
// swagger:model AssignGroupResourceRoleRequest
type AssignGroupResourceRoleRequest struct {

	// The group to assign the resource role to. Can be the group's name or CRN.
	// Required: true
	GroupName *string `json:"groupName"`

	// The resource for which the resource role rights are granted.
	// Required: true
	ResourceCrn *string `json:"resourceCrn"`

	// The CRN of the resource role being assigned to the group.
	// Required: true
	ResourceRoleCrn *string `json:"resourceRoleCrn"`
}

// Validate validates this assign group resource role request
func (m *AssignGroupResourceRoleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRoleCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignGroupResourceRoleRequest) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("groupName", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *AssignGroupResourceRoleRequest) validateResourceCrn(formats strfmt.Registry) error {

	if err := validate.Required("resourceCrn", "body", m.ResourceCrn); err != nil {
		return err
	}

	return nil
}

func (m *AssignGroupResourceRoleRequest) validateResourceRoleCrn(formats strfmt.Registry) error {

	if err := validate.Required("resourceRoleCrn", "body", m.ResourceRoleCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this assign group resource role request based on context it is used
func (m *AssignGroupResourceRoleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssignGroupResourceRoleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignGroupResourceRoleRequest) UnmarshalBinary(b []byte) error {
	var res AssignGroupResourceRoleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
