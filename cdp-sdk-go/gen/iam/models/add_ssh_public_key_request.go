// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddSSHPublicKeyRequest Request object for add user ssh public key.
//
// swagger:model AddSshPublicKeyRequest
type AddSSHPublicKeyRequest struct {

	// The CRN of the user or machine user for whom the SSH public key will be added. If it is not included, it defaults to the user making the request.
	ActorCrn string `json:"actorCrn,omitempty"`

	// An optional description for the public key.
	Description string `json:"description,omitempty"`

	// The RSA or ED25519 public ssh key to add. DSA and ECDSA public keys are not supported. The public key should be in RFC4253 format. (e.g. ssh-rsa AAAAB3NzaC1yc2EAAA.. user@host) as produced, for example, by ssh-keygen.
	// Required: true
	PublicKey *string `json:"publicKey"`
}

// Validate validates this add Ssh public key request
func (m *AddSSHPublicKeyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddSSHPublicKeyRequest) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add Ssh public key request based on context it is used
func (m *AddSSHPublicKeyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddSSHPublicKeyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddSSHPublicKeyRequest) UnmarshalBinary(b []byte) error {
	var res AddSSHPublicKeyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
