// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SSHPublicKey Information about an SSH public key.
//
// swagger:model SshPublicKey
type SSHPublicKey struct {

	// The SSH public key CRN.
	// Required: true
	Crn *string `json:"crn"`

	// An optional description for the public key.
	Description string `json:"description,omitempty"`

	// The SSH public key string. Only populated for DescribeSshPublicKeyResponses. This is the same string that was used when the key was added.
	PublicKey string `json:"publicKey,omitempty"`

	// The SSH public key SHA256 fingerprint. This is identical to the SHA256 produced by running the following command on a public key named 'key.pub'; ssh-keygen -l -E SHA256 -f /home/user/.ssh/key.pub. Note that ssh-keygen removes any padding bytes from the BASE64 fingerprint encoding (the '=' characters at the end of the fingerprint) which is also true for this fingerprint.
	// Required: true
	PublicKeyFingerprint *string `json:"publicKeyFingerprint"`
}

// Validate validates this Ssh public key
func (m *SSHPublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKeyFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHPublicKey) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *SSHPublicKey) validatePublicKeyFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("publicKeyFingerprint", "body", m.PublicKeyFingerprint); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ssh public key based on context it is used
func (m *SSHPublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SSHPublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHPublicKey) UnmarshalBinary(b []byte) error {
	var res SSHPublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
