// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	stderrors "errors"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LdapProvider LDAP Provider details.
//
// swagger:model LdapProvider
type LdapProvider struct {

	// The creation date in ms from the java epoch of 1970-01-01T00:00:00Z.
	// Required: true
	CreationDate *int64 `json:"creationDate"`

	// The LDAP provider connector CRN.
	// Required: true
	Crn *string `json:"crn"`

	// The unique ID of the LDAP provider.
	// Required: true
	IdentityProviderConnectorID *string `json:"identityProviderConnectorId"`

	// The updated LDAP identity provider connector configuration detail. This will be empty in listLdapProvidersResponse.
	LdapDetails *LdapProviderInfo `json:"ldapDetails,omitempty"`

	// Name of the LDAP provider connector.
	// Required: true
	LdapProviderName *string `json:"ldapProviderName"`

	// Indicates whether group sync is skipped or not.
	// Required: true
	SkipGroupSyncOnLogin *bool `json:"skipGroupSyncOnLogin"`
}

// Validate validates this ldap provider
func (m *LdapProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProviderConnectorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapProviderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipGroupSyncOnLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LdapProvider) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	return nil
}

func (m *LdapProvider) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *LdapProvider) validateIdentityProviderConnectorID(formats strfmt.Registry) error {

	if err := validate.Required("identityProviderConnectorId", "body", m.IdentityProviderConnectorID); err != nil {
		return err
	}

	return nil
}

func (m *LdapProvider) validateLdapDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.LdapDetails) { // not required
		return nil
	}

	if m.LdapDetails != nil {
		if err := m.LdapDetails.Validate(formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ldapDetails")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ldapDetails")
			}

			return err
		}
	}

	return nil
}

func (m *LdapProvider) validateLdapProviderName(formats strfmt.Registry) error {

	if err := validate.Required("ldapProviderName", "body", m.LdapProviderName); err != nil {
		return err
	}

	return nil
}

func (m *LdapProvider) validateSkipGroupSyncOnLogin(formats strfmt.Registry) error {

	if err := validate.Required("skipGroupSyncOnLogin", "body", m.SkipGroupSyncOnLogin); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ldap provider based on the context it is used
func (m *LdapProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLdapDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LdapProvider) contextValidateLdapDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.LdapDetails != nil {

		if swag.IsZero(m.LdapDetails) { // not required
			return nil
		}

		if err := m.LdapDetails.ContextValidate(ctx, formats); err != nil {
			ve := new(errors.Validation)
			if stderrors.As(err, &ve) {
				return ve.ValidateName("ldapDetails")
			}
			ce := new(errors.CompositeError)
			if stderrors.As(err, &ce) {
				return ce.ValidateName("ldapDetails")
			}

			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LdapProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LdapProvider) UnmarshalBinary(b []byte) error {
	var res LdapProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
