// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteUserResponse Response object to delete a user.
//
// swagger:model DeleteUserResponse
type DeleteUserResponse struct {

	// The list of associated access key CRNs that were deleted.
	// Required: true
	AccessKeysDeleted []string `json:"accessKeysDeleted"`

	// The list of group CRNs from which the user has been removed.
	// Required: true
	GroupsModified []string `json:"groupsModified"`

	// The list of resource role assignments that have been unassigned from the user.
	// Required: true
	ResourcesUnassigned []*ResourceAssignment `json:"resourcesUnassigned"`

	// The list of role CRNs unassigned from the user.
	// Required: true
	RolesUnassigned []string `json:"rolesUnassigned"`
}

// Validate validates this delete user response
func (m *DeleteUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKeysDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupsModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcesUnassigned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolesUnassigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeleteUserResponse) validateAccessKeysDeleted(formats strfmt.Registry) error {

	if err := validate.Required("accessKeysDeleted", "body", m.AccessKeysDeleted); err != nil {
		return err
	}

	return nil
}

func (m *DeleteUserResponse) validateGroupsModified(formats strfmt.Registry) error {

	if err := validate.Required("groupsModified", "body", m.GroupsModified); err != nil {
		return err
	}

	return nil
}

func (m *DeleteUserResponse) validateResourcesUnassigned(formats strfmt.Registry) error {

	if err := validate.Required("resourcesUnassigned", "body", m.ResourcesUnassigned); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourcesUnassigned); i++ {
		if swag.IsZero(m.ResourcesUnassigned[i]) { // not required
			continue
		}

		if m.ResourcesUnassigned[i] != nil {
			if err := m.ResourcesUnassigned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourcesUnassigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourcesUnassigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeleteUserResponse) validateRolesUnassigned(formats strfmt.Registry) error {

	if err := validate.Required("rolesUnassigned", "body", m.RolesUnassigned); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this delete user response based on the context it is used
func (m *DeleteUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourcesUnassigned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeleteUserResponse) contextValidateResourcesUnassigned(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourcesUnassigned); i++ {

		if m.ResourcesUnassigned[i] != nil {
			if err := m.ResourcesUnassigned[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourcesUnassigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourcesUnassigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeleteUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeleteUserResponse) UnmarshalBinary(b []byte) error {
	var res DeleteUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
