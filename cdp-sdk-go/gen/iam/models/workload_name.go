// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WorkloadName The workload name.
//
// swagger:model WorkloadName
type WorkloadName string

func NewWorkloadName(value WorkloadName) *WorkloadName {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WorkloadName.
func (m WorkloadName) Pointer() *WorkloadName {
	return &m
}

const (

	// WorkloadNameDE captures enum value "DE"
	WorkloadNameDE WorkloadName = "DE"

	// WorkloadNameDF captures enum value "DF"
	WorkloadNameDF WorkloadName = "DF"
)

// for schema
var workloadNameEnum []interface{}

func init() {
	var res []WorkloadName
	if err := json.Unmarshal([]byte(`["DE","DF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workloadNameEnum = append(workloadNameEnum, v)
	}
}

func (m WorkloadName) validateWorkloadNameEnum(path, location string, value WorkloadName) error {
	if err := validate.EnumCase(path, location, value, workloadNameEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this workload name
func (m WorkloadName) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWorkloadNameEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this workload name based on context it is used
func (m WorkloadName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
