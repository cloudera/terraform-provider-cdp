// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScimAccessToken Information about the SCIM access token.
//
// swagger:model ScimAccessToken
type ScimAccessToken struct {

	// The SCIM access token id.
	// Required: true
	AccessTokenID *string `json:"accessTokenId"`

	// The date when this SCIM access token was created.
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// The SCIM access token CRN.
	// Required: true
	Crn *string `json:"crn"`

	// The SCIM access token expiration date. The access token never expires if the value is not set.
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`
}

// Validate validates this scim access token
func (m *ScimAccessToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScimAccessToken) validateAccessTokenID(formats strfmt.Registry) error {

	if err := validate.Required("accessTokenId", "body", m.AccessTokenID); err != nil {
		return err
	}

	return nil
}

func (m *ScimAccessToken) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScimAccessToken) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *ScimAccessToken) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scim access token based on context it is used
func (m *ScimAccessToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScimAccessToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScimAccessToken) UnmarshalBinary(b []byte) error {
	var res ScimAccessToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
