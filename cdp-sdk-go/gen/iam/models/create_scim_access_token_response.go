// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateScimAccessTokenResponse Response object to create the SCIM access token.
//
// swagger:model CreateScimAccessTokenResponse
type CreateScimAccessTokenResponse struct {

	// The SCIM access token that was created.
	// Required: true
	AccessToken *ScimAccessToken `json:"accessToken"`

	// The SCIM access token secret. This secret could be used to authenticate requests sent to SCIM endpoints.
	// Required: true
	AccessTokenSecret *string `json:"accessTokenSecret"`
}

// Validate validates this create scim access token response
func (m *CreateScimAccessTokenResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokenSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScimAccessTokenResponse) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("accessToken", "body", m.AccessToken); err != nil {
		return err
	}

	if m.AccessToken != nil {
		if err := m.AccessToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessToken")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScimAccessTokenResponse) validateAccessTokenSecret(formats strfmt.Registry) error {

	if err := validate.Required("accessTokenSecret", "body", m.AccessTokenSecret); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create scim access token response based on the context it is used
func (m *CreateScimAccessTokenResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScimAccessTokenResponse) contextValidateAccessToken(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessToken != nil {
		if err := m.AccessToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateScimAccessTokenResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateScimAccessTokenResponse) UnmarshalBinary(b []byte) error {
	var res CreateScimAccessTokenResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
