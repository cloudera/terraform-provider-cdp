// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssignUserResourceRoleRequest Request object for an assign user resource role request.
//
// swagger:model AssignUserResourceRoleRequest
type AssignUserResourceRoleRequest struct {

	// The resource for which the resource role rights are granted.
	// Required: true
	ResourceCrn *string `json:"resourceCrn"`

	// The CRN of the resource role to assign to the user.
	// Required: true
	ResourceRoleCrn *string `json:"resourceRoleCrn"`

	// The user to assign the resource role to. Can be the user's CRN or id.
	// Required: true
	User *string `json:"user"`
}

// Validate validates this assign user resource role request
func (m *AssignUserResourceRoleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRoleCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignUserResourceRoleRequest) validateResourceCrn(formats strfmt.Registry) error {

	if err := validate.Required("resourceCrn", "body", m.ResourceCrn); err != nil {
		return err
	}

	return nil
}

func (m *AssignUserResourceRoleRequest) validateResourceRoleCrn(formats strfmt.Registry) error {

	if err := validate.Required("resourceRoleCrn", "body", m.ResourceRoleCrn); err != nil {
		return err
	}

	return nil
}

func (m *AssignUserResourceRoleRequest) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this assign user resource role request based on context it is used
func (m *AssignUserResourceRoleRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssignUserResourceRoleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignUserResourceRoleRequest) UnmarshalBinary(b []byte) error {
	var res AssignUserResourceRoleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
