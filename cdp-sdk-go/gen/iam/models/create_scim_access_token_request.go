// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateScimAccessTokenRequest Request object to create the SCIM access token.
//
// swagger:model CreateScimAccessTokenRequest
type CreateScimAccessTokenRequest struct {

	// The lifetime, in days, of the access token.
	// Required: true
	// Minimum: 1
	AccessTokenLifetimeDays *int32 `json:"accessTokenLifetimeDays"`

	// The name or CRN of the SCIM enabled identity provider.
	// Required: true
	IdentityProviderNameOrCrn *string `json:"identityProviderNameOrCrn"`
}

// Validate validates this create scim access token request
func (m *CreateScimAccessTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenLifetimeDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProviderNameOrCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScimAccessTokenRequest) validateAccessTokenLifetimeDays(formats strfmt.Registry) error {

	if err := validate.Required("accessTokenLifetimeDays", "body", m.AccessTokenLifetimeDays); err != nil {
		return err
	}

	if err := validate.MinimumInt("accessTokenLifetimeDays", "body", int64(*m.AccessTokenLifetimeDays), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateScimAccessTokenRequest) validateIdentityProviderNameOrCrn(formats strfmt.Registry) error {

	if err := validate.Required("identityProviderNameOrCrn", "body", m.IdentityProviderNameOrCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create scim access token request based on context it is used
func (m *CreateScimAccessTokenRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateScimAccessTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateScimAccessTokenRequest) UnmarshalBinary(b []byte) error {
	var res CreateScimAccessTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
