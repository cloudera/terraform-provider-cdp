// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User Information about a Cloudera CDP user.
//
// swagger:model User
type User struct {

	// Whether the user is an administrator of their CDP account.
	// Required: true
	AccountAdmin *bool `json:"accountAdmin"`

	// The list of Azure cloud identities assigned to the user.
	AzureCloudIdentities []*AzureCloudIdentity `json:"azureCloudIdentities"`

	// The date when this user record was created.
	// Required: true
	// Format: date-time
	CreationDate *strfmt.DateTime `json:"creationDate"`

	// The CRN of the user.
	// Required: true
	Crn *string `json:"crn"`

	// The user's email address.
	// Required: true
	Email *string `json:"email"`

	// The user's first name.
	// Required: true
	FirstName *string `json:"firstName"`

	// The identity provider that the user belongs to. It can be "Cloudera-Default", "Cloudera-Administration", or a customer defined IdP.
	// Required: true
	IdentityProviderCrn *string `json:"identityProviderCrn"`

	// The date of the user's last interactive login.
	// Format: date-time
	LastInteractiveLogin strfmt.DateTime `json:"lastInteractiveLogin,omitempty"`

	// The user's last name.
	// Required: true
	LastName *string `json:"lastName"`

	// The stable, unique identifier of the user.
	// Required: true
	UserID *string `json:"userId"`

	// Information about the workload password for the user.
	WorkloadPasswordDetails *WorkloadPasswordDetails `json:"workloadPasswordDetails,omitempty"`

	// The username used in all the workload clusters of the user.
	WorkloadUsername string `json:"workloadUsername,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureCloudIdentities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityProviderCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastInteractiveLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadPasswordDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAccountAdmin(formats strfmt.Registry) error {

	if err := validate.Required("accountAdmin", "body", m.AccountAdmin); err != nil {
		return err
	}

	return nil
}

func (m *User) validateAzureCloudIdentities(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureCloudIdentities) { // not required
		return nil
	}

	for i := 0; i < len(m.AzureCloudIdentities); i++ {
		if swag.IsZero(m.AzureCloudIdentities[i]) { // not required
			continue
		}

		if m.AzureCloudIdentities[i] != nil {
			if err := m.AzureCloudIdentities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureCloudIdentities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureCloudIdentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creationDate", "body", m.CreationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *User) validateIdentityProviderCrn(formats strfmt.Registry) error {

	if err := validate.Required("identityProviderCrn", "body", m.IdentityProviderCrn); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastInteractiveLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.LastInteractiveLogin) { // not required
		return nil
	}

	if err := validate.FormatOf("lastInteractiveLogin", "body", "date-time", m.LastInteractiveLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateWorkloadPasswordDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkloadPasswordDetails) { // not required
		return nil
	}

	if m.WorkloadPasswordDetails != nil {
		if err := m.WorkloadPasswordDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadPasswordDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadPasswordDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureCloudIdentities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloadPasswordDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateAzureCloudIdentities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AzureCloudIdentities); i++ {

		if m.AzureCloudIdentities[i] != nil {
			if err := m.AzureCloudIdentities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("azureCloudIdentities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("azureCloudIdentities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) contextValidateWorkloadPasswordDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkloadPasswordDetails != nil {
		if err := m.WorkloadPasswordDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workloadPasswordDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workloadPasswordDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
