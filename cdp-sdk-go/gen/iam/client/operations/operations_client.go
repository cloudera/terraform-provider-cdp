// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddMachineUserToGroup(params *AddMachineUserToGroupParams, opts ...ClientOption) (*AddMachineUserToGroupOK, error)

	AddSSHPublicKey(params *AddSSHPublicKeyParams, opts ...ClientOption) (*AddSSHPublicKeyOK, error)

	AddUserToGroup(params *AddUserToGroupParams, opts ...ClientOption) (*AddUserToGroupOK, error)

	AssignAzureCloudIdentity(params *AssignAzureCloudIdentityParams, opts ...ClientOption) (*AssignAzureCloudIdentityOK, error)

	AssignGroupResourceRole(params *AssignGroupResourceRoleParams, opts ...ClientOption) (*AssignGroupResourceRoleOK, error)

	AssignGroupRole(params *AssignGroupRoleParams, opts ...ClientOption) (*AssignGroupRoleOK, error)

	AssignMachineUserResourceRole(params *AssignMachineUserResourceRoleParams, opts ...ClientOption) (*AssignMachineUserResourceRoleOK, error)

	AssignMachineUserRole(params *AssignMachineUserRoleParams, opts ...ClientOption) (*AssignMachineUserRoleOK, error)

	AssignServicePrincipalAzureCloudIdentity(params *AssignServicePrincipalAzureCloudIdentityParams, opts ...ClientOption) (*AssignServicePrincipalAzureCloudIdentityOK, error)

	AssignUserResourceRole(params *AssignUserResourceRoleParams, opts ...ClientOption) (*AssignUserResourceRoleOK, error)

	AssignUserRole(params *AssignUserRoleParams, opts ...ClientOption) (*AssignUserRoleOK, error)

	CreateGroup(params *CreateGroupParams, opts ...ClientOption) (*CreateGroupOK, error)

	CreateMachineUser(params *CreateMachineUserParams, opts ...ClientOption) (*CreateMachineUserOK, error)

	CreateMachineUserAccessKey(params *CreateMachineUserAccessKeyParams, opts ...ClientOption) (*CreateMachineUserAccessKeyOK, error)

	CreateSamlProvider(params *CreateSamlProviderParams, opts ...ClientOption) (*CreateSamlProviderOK, error)

	CreateScimAccessToken(params *CreateScimAccessTokenParams, opts ...ClientOption) (*CreateScimAccessTokenOK, error)

	CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error)

	CreateUserAccessKey(params *CreateUserAccessKeyParams, opts ...ClientOption) (*CreateUserAccessKeyOK, error)

	DeleteAccessKey(params *DeleteAccessKeyParams, opts ...ClientOption) (*DeleteAccessKeyOK, error)

	DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupOK, error)

	DeleteMachineUser(params *DeleteMachineUserParams, opts ...ClientOption) (*DeleteMachineUserOK, error)

	DeleteSamlProvider(params *DeleteSamlProviderParams, opts ...ClientOption) (*DeleteSamlProviderOK, error)

	DeleteScimAccessToken(params *DeleteScimAccessTokenParams, opts ...ClientOption) (*DeleteScimAccessTokenOK, error)

	DeleteSSHPublicKey(params *DeleteSSHPublicKeyParams, opts ...ClientOption) (*DeleteSSHPublicKeyOK, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error)

	DescribeSamlProvider(params *DescribeSamlProviderParams, opts ...ClientOption) (*DescribeSamlProviderOK, error)

	DescribeSSHPublicKey(params *DescribeSSHPublicKeyParams, opts ...ClientOption) (*DescribeSSHPublicKeyOK, error)

	DisableClouderaSSOLogin(params *DisableClouderaSSOLoginParams, opts ...ClientOption) (*DisableClouderaSSOLoginOK, error)

	EnableClouderaSSOLogin(params *EnableClouderaSSOLoginParams, opts ...ClientOption) (*EnableClouderaSSOLoginOK, error)

	GenerateWorkloadAuthToken(params *GenerateWorkloadAuthTokenParams, opts ...ClientOption) (*GenerateWorkloadAuthTokenOK, error)

	GetAccessKey(params *GetAccessKeyParams, opts ...ClientOption) (*GetAccessKeyOK, error)

	GetAccount(params *GetAccountParams, opts ...ClientOption) (*GetAccountOK, error)

	GetAccountMessages(params *GetAccountMessagesParams, opts ...ClientOption) (*GetAccountMessagesOK, error)

	GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error)

	ListAccessKeys(params *ListAccessKeysParams, opts ...ClientOption) (*ListAccessKeysOK, error)

	ListGroupAssignedResourceRoles(params *ListGroupAssignedResourceRolesParams, opts ...ClientOption) (*ListGroupAssignedResourceRolesOK, error)

	ListGroupAssignedRoles(params *ListGroupAssignedRolesParams, opts ...ClientOption) (*ListGroupAssignedRolesOK, error)

	ListGroupMembers(params *ListGroupMembersParams, opts ...ClientOption) (*ListGroupMembersOK, error)

	ListGroups(params *ListGroupsParams, opts ...ClientOption) (*ListGroupsOK, error)

	ListGroupsForMachineUser(params *ListGroupsForMachineUserParams, opts ...ClientOption) (*ListGroupsForMachineUserOK, error)

	ListGroupsForUser(params *ListGroupsForUserParams, opts ...ClientOption) (*ListGroupsForUserOK, error)

	ListMachineUserAssignedResourceRoles(params *ListMachineUserAssignedResourceRolesParams, opts ...ClientOption) (*ListMachineUserAssignedResourceRolesOK, error)

	ListMachineUserAssignedRoles(params *ListMachineUserAssignedRolesParams, opts ...ClientOption) (*ListMachineUserAssignedRolesOK, error)

	ListMachineUsers(params *ListMachineUsersParams, opts ...ClientOption) (*ListMachineUsersOK, error)

	ListResourceAssignees(params *ListResourceAssigneesParams, opts ...ClientOption) (*ListResourceAssigneesOK, error)

	ListResourceRoles(params *ListResourceRolesParams, opts ...ClientOption) (*ListResourceRolesOK, error)

	ListRoles(params *ListRolesParams, opts ...ClientOption) (*ListRolesOK, error)

	ListSamlProviders(params *ListSamlProvidersParams, opts ...ClientOption) (*ListSamlProvidersOK, error)

	ListScimAccessTokens(params *ListScimAccessTokensParams, opts ...ClientOption) (*ListScimAccessTokensOK, error)

	ListServicePrincipalCloudIdentities(params *ListServicePrincipalCloudIdentitiesParams, opts ...ClientOption) (*ListServicePrincipalCloudIdentitiesOK, error)

	ListSSHPublicKeys(params *ListSSHPublicKeysParams, opts ...ClientOption) (*ListSSHPublicKeysOK, error)

	ListUserAssignedResourceRoles(params *ListUserAssignedResourceRolesParams, opts ...ClientOption) (*ListUserAssignedResourceRolesOK, error)

	ListUserAssignedRoles(params *ListUserAssignedRolesParams, opts ...ClientOption) (*ListUserAssignedRolesOK, error)

	ListUsers(params *ListUsersParams, opts ...ClientOption) (*ListUsersOK, error)

	RemoveMachineUserFromGroup(params *RemoveMachineUserFromGroupParams, opts ...ClientOption) (*RemoveMachineUserFromGroupOK, error)

	RemoveUserFromGroup(params *RemoveUserFromGroupParams, opts ...ClientOption) (*RemoveUserFromGroupOK, error)

	SetAccountMessages(params *SetAccountMessagesParams, opts ...ClientOption) (*SetAccountMessagesOK, error)

	SetAuthenticationPolicy(params *SetAuthenticationPolicyParams, opts ...ClientOption) (*SetAuthenticationPolicyOK, error)

	SetWorkloadPassword(params *SetWorkloadPasswordParams, opts ...ClientOption) (*SetWorkloadPasswordOK, error)

	SetWorkloadPasswordPolicy(params *SetWorkloadPasswordPolicyParams, opts ...ClientOption) (*SetWorkloadPasswordPolicyOK, error)

	UnassignAzureCloudIdentity(params *UnassignAzureCloudIdentityParams, opts ...ClientOption) (*UnassignAzureCloudIdentityOK, error)

	UnassignGroupResourceRole(params *UnassignGroupResourceRoleParams, opts ...ClientOption) (*UnassignGroupResourceRoleOK, error)

	UnassignGroupRole(params *UnassignGroupRoleParams, opts ...ClientOption) (*UnassignGroupRoleOK, error)

	UnassignMachineUserResourceRole(params *UnassignMachineUserResourceRoleParams, opts ...ClientOption) (*UnassignMachineUserResourceRoleOK, error)

	UnassignMachineUserRole(params *UnassignMachineUserRoleParams, opts ...ClientOption) (*UnassignMachineUserRoleOK, error)

	UnassignServicePrincipalAzureCloudIdentity(params *UnassignServicePrincipalAzureCloudIdentityParams, opts ...ClientOption) (*UnassignServicePrincipalAzureCloudIdentityOK, error)

	UnassignUserResourceRole(params *UnassignUserResourceRoleParams, opts ...ClientOption) (*UnassignUserResourceRoleOK, error)

	UnassignUserRole(params *UnassignUserRoleParams, opts ...ClientOption) (*UnassignUserRoleOK, error)

	UnlockMachineUserInControlPlane(params *UnlockMachineUserInControlPlaneParams, opts ...ClientOption) (*UnlockMachineUserInControlPlaneOK, error)

	UnlockUserInControlPlane(params *UnlockUserInControlPlaneParams, opts ...ClientOption) (*UnlockUserInControlPlaneOK, error)

	UnsetWorkloadPasswordMinLifetime(params *UnsetWorkloadPasswordMinLifetimeParams, opts ...ClientOption) (*UnsetWorkloadPasswordMinLifetimeOK, error)

	UnsetWorkloadPasswordPolicy(params *UnsetWorkloadPasswordPolicyParams, opts ...ClientOption) (*UnsetWorkloadPasswordPolicyOK, error)

	UpdateAccessKey(params *UpdateAccessKeyParams, opts ...ClientOption) (*UpdateAccessKeyOK, error)

	UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error)

	UpdateSamlProvider(params *UpdateSamlProviderParams, opts ...ClientOption) (*UpdateSamlProviderOK, error)

	UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddMachineUserToGroup adds a machine user to group

Add a machine user to a group.
*/
func (a *Client) AddMachineUserToGroup(params *AddMachineUserToGroupParams, opts ...ClientOption) (*AddMachineUserToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMachineUserToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMachineUserToGroup",
		Method:             "POST",
		PathPattern:        "/iam/addMachineUserToGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddMachineUserToGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddMachineUserToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddMachineUserToGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddSSHPublicKey adds an SSH public key for an actor

Adds an SSH public key for an actor. The private key that corresponds to this public key can be used to SSH into any workload cluster that the actor is authorized to use.
*/
func (a *Client) AddSSHPublicKey(params *AddSSHPublicKeyParams, opts ...ClientOption) (*AddSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSSHPublicKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/addSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddUserToGroup adds a user to a group

Add a user to group.
*/
func (a *Client) AddUserToGroup(params *AddUserToGroupParams, opts ...ClientOption) (*AddUserToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserToGroup",
		Method:             "POST",
		PathPattern:        "/iam/addUserToGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserToGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddUserToGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignAzureCloudIdentity assigns an azure cloud identity to an actor or group

Assign an Azure cloud identity, i.e. an object ID (OID), to an actor or group.
*/
func (a *Client) AssignAzureCloudIdentity(params *AssignAzureCloudIdentityParams, opts ...ClientOption) (*AssignAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignAzureCloudIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/assignAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignGroupResourceRole assigns a resource role to a group

Assign a resource role to a group. If the resource role is already assigned to the group the request will fail.
*/
func (a *Client) AssignGroupResourceRole(params *AssignGroupResourceRoleParams, opts ...ClientOption) (*AssignGroupResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignGroupResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignGroupResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignGroupResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignGroupResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignGroupResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignGroupResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignGroupRole assigns a role to a group

Assign a role to a group. If the role is already assigned to the group the request will fail.
*/
func (a *Client) AssignGroupRole(params *AssignGroupRoleParams, opts ...ClientOption) (*AssignGroupRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignGroupRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignGroupRole",
		Method:             "POST",
		PathPattern:        "/iam/assignGroupRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignGroupRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignGroupRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignGroupRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignMachineUserResourceRole assigns a resource role to a machine user

Assign a resource role to a machine user. If the resource role is already assigned to the machine user the request will fail.
*/
func (a *Client) AssignMachineUserResourceRole(params *AssignMachineUserResourceRoleParams, opts ...ClientOption) (*AssignMachineUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignMachineUserResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignMachineUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignMachineUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignMachineUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignMachineUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignMachineUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignMachineUserRole assigns a role to a machine user

Assign a role to a machine user. If the role is already assigned to the machine user the request will fail.
*/
func (a *Client) AssignMachineUserRole(params *AssignMachineUserRoleParams, opts ...ClientOption) (*AssignMachineUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignMachineUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignMachineUserRole",
		Method:             "POST",
		PathPattern:        "/iam/assignMachineUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignMachineUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignMachineUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignMachineUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignServicePrincipalAzureCloudIdentity assigns an azure cloud identity to a service principal

Assign an Azure cloud identity, i.e. an object ID (OID), to a service principal.
*/
func (a *Client) AssignServicePrincipalAzureCloudIdentity(params *AssignServicePrincipalAzureCloudIdentityParams, opts ...ClientOption) (*AssignServicePrincipalAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignServicePrincipalAzureCloudIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignServicePrincipalAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/assignServicePrincipalAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignServicePrincipalAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignServicePrincipalAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignServicePrincipalAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignUserResourceRole assigns a resource role to a user

Assign a resource role to a user. If the resource role is already assigned to the user the request will fail.
*/
func (a *Client) AssignUserResourceRole(params *AssignUserResourceRoleParams, opts ...ClientOption) (*AssignUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/assignUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssignUserRole assigns a role to a user

Assign a role to a user. If the role is already assigned to the user the request will fail.
*/
func (a *Client) AssignUserRole(params *AssignUserRoleParams, opts ...ClientOption) (*AssignUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignUserRole",
		Method:             "POST",
		PathPattern:        "/iam/assignUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssignUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGroup creates a group

Create a group. A group is a named collection of users and machine users. Roles and resource roles can be assigned to a group impacting all members of the group.
*/
func (a *Client) CreateGroup(params *CreateGroupParams, opts ...ClientOption) (*CreateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGroup",
		Method:             "POST",
		PathPattern:        "/iam/createGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMachineUser creates a machine user

Creates a machine user in the account. A machine user can be used to access CDP API. A machine user can have access keys associated with it and can be assigned roles and resource roles. A machine user cannot login to the CDP console.
*/
func (a *Client) CreateMachineUser(params *CreateMachineUserParams, opts ...ClientOption) (*CreateMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachineUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/createMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateMachineUserAccessKey creates a new access key for a machine user

Creates a new access key for a machine user.
*/
func (a *Client) CreateMachineUserAccessKey(params *CreateMachineUserAccessKeyParams, opts ...ClientOption) (*CreateMachineUserAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMachineUserAccessKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMachineUserAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/createMachineUserAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMachineUserAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMachineUserAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateMachineUserAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateSamlProvider creates a s a m l provider in c d p

Creates a SAML provider in CDP.
*/
func (a *Client) CreateSamlProvider(params *CreateSamlProviderParams, opts ...ClientOption) (*CreateSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSamlProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/createSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateScimAccessToken creates a s c i m access token for a s c i m enabled identity provider

Creates a SCIM access token for a SCIM enabled identity provider. This token is used to authenticate requests sent to the SCIM endpoints. This operation is not supported for Cloudera for Government.
*/
func (a *Client) CreateScimAccessToken(params *CreateScimAccessTokenParams, opts ...ClientOption) (*CreateScimAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScimAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createScimAccessToken",
		Method:             "POST",
		PathPattern:        "/iam/createScimAccessToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScimAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScimAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateScimAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateUser creates a user in c d p

Creates a user in CDP.
*/
func (a *Client) CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/iam/createUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateUserAccessKey creates a new access key for a user

Creates a new access key for a user.
*/
func (a *Client) CreateUserAccessKey(params *CreateUserAccessKeyParams, opts ...ClientOption) (*CreateUserAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserAccessKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/createUserAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateUserAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAccessKey deletes an access key

Deletes an access key.
*/
func (a *Client) DeleteAccessKey(params *DeleteAccessKeyParams, opts ...ClientOption) (*DeleteAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/deleteAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteGroup deletes a group

Delete a group.
*/
func (a *Client) DeleteGroup(params *DeleteGroupParams, opts ...ClientOption) (*DeleteGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGroup",
		Method:             "POST",
		PathPattern:        "/iam/deleteGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteMachineUser deletes a machine user

Deletes a machine user. This includes deleting all associated access keys and unassigning all roles and resource roles assigned to the machine user. The machine user is also removed from all groups it belongs to. If the call succeeds the machine user will not be able to use any access keys to access the CDP control plane. Note that user-sync is not triggered yet by this call and the caller must trigger that to ensure that the machine user loses access to all environments as soon as possible.
*/
func (a *Client) DeleteMachineUser(params *DeleteMachineUserParams, opts ...ClientOption) (*DeleteMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMachineUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/deleteMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSamlProvider deletes a s a m l provider in c d p account

Deletes a SAML provider in CDP account.
*/
func (a *Client) DeleteSamlProvider(params *DeleteSamlProviderParams, opts ...ClientOption) (*DeleteSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSamlProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/deleteSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteScimAccessToken deletes a s c i m access token

Deletes a SCIM access token. This operation is not supported for Cloudera for Government.
*/
func (a *Client) DeleteScimAccessToken(params *DeleteScimAccessTokenParams, opts ...ClientOption) (*DeleteScimAccessTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScimAccessTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScimAccessToken",
		Method:             "POST",
		PathPattern:        "/iam/deleteScimAccessToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScimAccessTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScimAccessTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteScimAccessTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteSSHPublicKey deletes an SSH public key for an actor

Delete an SSH public key for an actor.
*/
func (a *Client) DeleteSSHPublicKey(params *DeleteSSHPublicKeyParams, opts ...ClientOption) (*DeleteSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSSHPublicKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/deleteSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteUser deletes a user and all associated resources

Deletes a user. This includes deleting all associated access keys and unassigning all roles and resource roles assigned to the user. The user is also removed from all groups it belongs to. If the call succeeds the user will not be able to login interactively, or use any access keys to access the CDP control plane. This feature is under development and some resources may be left behind after a successful call. Note that user-sync is not triggered yet by this call and the caller must trigger that to ensure that the user loses access to all environments as soon as possible.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "POST",
		PathPattern:        "/iam/deleteUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeSamlProvider describes one s a m l provider

Describes one SAML provider.
*/
func (a *Client) DescribeSamlProvider(params *DescribeSamlProviderParams, opts ...ClientOption) (*DescribeSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSamlProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/describeSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeSSHPublicKey describes an SSH public key for an actor

Describe an SSH public key for an actor.
*/
func (a *Client) DescribeSSHPublicKey(params *DescribeSSHPublicKeyParams, opts ...ClientOption) (*DescribeSSHPublicKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeSSHPublicKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeSshPublicKey",
		Method:             "POST",
		PathPattern:        "/iam/describeSshPublicKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeSSHPublicKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeSSHPublicKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeSSHPublicKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DisableClouderaSSOLogin disables interactive login using cloudera s s o for this account

Disables interactive login using Cloudera SSO for this account. When disabled, only users who are designated account administrators will be able to use Cloudera SSO to interactively login to the CDP account. All other users will only be able to interactively login using SAML providers defined for the account. This is a no-op if login using Cloudera SSO are already disabled.
*/
func (a *Client) DisableClouderaSSOLogin(params *DisableClouderaSSOLoginParams, opts ...ClientOption) (*DisableClouderaSSOLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableClouderaSSOLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableClouderaSSOLogin",
		Method:             "POST",
		PathPattern:        "/iam/disableClouderaSSOLogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableClouderaSSOLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableClouderaSSOLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableClouderaSSOLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnableClouderaSSOLogin enables interactive login using cloudera s s o for this account

Enables interactive login using Cloudera SSO for this account. This is a no-op if login using Cloudera SSO are already enabled.
*/
func (a *Client) EnableClouderaSSOLogin(params *EnableClouderaSSOLoginParams, opts ...ClientOption) (*EnableClouderaSSOLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableClouderaSSOLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableClouderaSSOLogin",
		Method:             "POST",
		PathPattern:        "/iam/enableClouderaSSOLogin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableClouderaSSOLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableClouderaSSOLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableClouderaSSOLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateWorkloadAuthToken generates an authentication token for workload a p is

Generates an authentication token which is required for sending requests to workload APIs.
*/
func (a *Client) GenerateWorkloadAuthToken(params *GenerateWorkloadAuthTokenParams, opts ...ClientOption) (*GenerateWorkloadAuthTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateWorkloadAuthTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateWorkloadAuthToken",
		Method:             "POST",
		PathPattern:        "/iam/generateWorkloadAuthToken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateWorkloadAuthTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateWorkloadAuthTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateWorkloadAuthTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccessKey gets information on an access key

Gets information on an access key. If no access key ID is specified. Information on the access key used to make the request is returned.
*/
func (a *Client) GetAccessKey(params *GetAccessKeyParams, opts ...ClientOption) (*GetAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/getAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccount retrieves information about the c d p account

Retrieves information about the CDP account.
*/
func (a *Client) GetAccount(params *GetAccountParams, opts ...ClientOption) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "POST",
		PathPattern:        "/iam/getAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountMessages gets account messages

Get account messages.
*/
func (a *Client) GetAccountMessages(params *GetAccountMessagesParams, opts ...ClientOption) (*GetAccountMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountMessages",
		Method:             "POST",
		PathPattern:        "/iam/getAccountMessages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUser gets information on a user

Gets information on a user. If no user name is specified. The user name is determined from the access key used to make the request.
*/
func (a *Client) GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "POST",
		PathPattern:        "/iam/getUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListAccessKeys lists access keys

Lists access keys.
*/
func (a *Client) ListAccessKeys(params *ListAccessKeysParams, opts ...ClientOption) (*ListAccessKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAccessKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAccessKeys",
		Method:             "POST",
		PathPattern:        "/iam/listAccessKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAccessKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAccessKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAccessKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroupAssignedResourceRoles lists a group s assigned resource roles

Lists a group's assigned resource roles.
*/
func (a *Client) ListGroupAssignedResourceRoles(params *ListGroupAssignedResourceRolesParams, opts ...ClientOption) (*ListGroupAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupAssignedResourceRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listGroupAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroupAssignedRoles lists the group s assigned roles

Lists the group's assigned roles.
*/
func (a *Client) ListGroupAssignedRoles(params *ListGroupAssignedRolesParams, opts ...ClientOption) (*ListGroupAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupAssignedRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listGroupAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroupMembers lists the members of a group

List the members of a group.
*/
func (a *Client) ListGroupMembers(params *ListGroupMembersParams, opts ...ClientOption) (*ListGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupMembersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupMembers",
		Method:             "POST",
		PathPattern:        "/iam/listGroupMembers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupMembersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupMembersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroups lists groups

Lists groups. If no group names are specified, the call lists all groups.
*/
func (a *Client) ListGroups(params *ListGroupsParams, opts ...ClientOption) (*ListGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroups",
		Method:             "POST",
		PathPattern:        "/iam/listGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroupsForMachineUser lists the groups that the machine user belongs to

List the groups that the machine user belongs to.
*/
func (a *Client) ListGroupsForMachineUser(params *ListGroupsForMachineUserParams, opts ...ClientOption) (*ListGroupsForMachineUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsForMachineUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupsForMachineUser",
		Method:             "POST",
		PathPattern:        "/iam/listGroupsForMachineUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsForMachineUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsForMachineUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsForMachineUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListGroupsForUser lists the groups that the user belongs to

List the groups that the user belongs to.
*/
func (a *Client) ListGroupsForUser(params *ListGroupsForUserParams, opts ...ClientOption) (*ListGroupsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupsForUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGroupsForUser",
		Method:             "POST",
		PathPattern:        "/iam/listGroupsForUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupsForUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGroupsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListGroupsForUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMachineUserAssignedResourceRoles lists a machine user s assigned resource roles

Lists a machine user's assigned resource roles.
*/
func (a *Client) ListMachineUserAssignedResourceRoles(params *ListMachineUserAssignedResourceRolesParams, opts ...ClientOption) (*ListMachineUserAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUserAssignedResourceRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMachineUserAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUserAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUserAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUserAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUserAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMachineUserAssignedRoles lists the machine user s assigned roles

Lists the machine user's assigned roles.
*/
func (a *Client) ListMachineUserAssignedRoles(params *ListMachineUserAssignedRolesParams, opts ...ClientOption) (*ListMachineUserAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUserAssignedRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMachineUserAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUserAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUserAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUserAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUserAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListMachineUsers lists machine users

Lists machine users in the account.
*/
func (a *Client) ListMachineUsers(params *ListMachineUsersParams, opts ...ClientOption) (*ListMachineUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMachineUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMachineUsers",
		Method:             "POST",
		PathPattern:        "/iam/listMachineUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMachineUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMachineUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListMachineUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListResourceAssignees lists the resource assignees and their respective resource roles for the resource

List the resource assignees and their respective resource roles for the resource.
*/
func (a *Client) ListResourceAssignees(params *ListResourceAssigneesParams, opts ...ClientOption) (*ListResourceAssigneesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceAssigneesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceAssignees",
		Method:             "POST",
		PathPattern:        "/iam/listResourceAssignees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceAssigneesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceAssigneesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceAssigneesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListResourceRoles lists all the available resource roles

Lists all the available resource roles. Resource roles grant rights over certain resources.
*/
func (a *Client) ListResourceRoles(params *ListResourceRolesParams, opts ...ClientOption) (*ListResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListRoles lists all the available roles

Lists all the available roles. Roles grant rights to users via policies that are attached to the roles.
*/
func (a *Client) ListRoles(params *ListRolesParams, opts ...ClientOption) (*ListRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRoles",
		Method:             "POST",
		PathPattern:        "/iam/listRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSamlProviders lists s a m l providers in c d p account

Lists SAML providers in CDP account.
*/
func (a *Client) ListSamlProviders(params *ListSamlProvidersParams, opts ...ClientOption) (*ListSamlProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSamlProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSamlProviders",
		Method:             "POST",
		PathPattern:        "/iam/listSamlProviders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSamlProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSamlProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSamlProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListScimAccessTokens lists s c i m access tokens for a s c i m enabled identity provider

Lists SCIM access tokens for a SCIM enabled identity provider. These access tokens are used to authenticate requests sent to the SCIM endpoints. This operation is not supported for Cloudera for Government.
*/
func (a *Client) ListScimAccessTokens(params *ListScimAccessTokensParams, opts ...ClientOption) (*ListScimAccessTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScimAccessTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScimAccessTokens",
		Method:             "POST",
		PathPattern:        "/iam/listScimAccessTokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScimAccessTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScimAccessTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListScimAccessTokensDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServicePrincipalCloudIdentities lists cloud identity mappings for service principals

List cloud identity mappings for service principals.
*/
func (a *Client) ListServicePrincipalCloudIdentities(params *ListServicePrincipalCloudIdentitiesParams, opts ...ClientOption) (*ListServicePrincipalCloudIdentitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicePrincipalCloudIdentitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServicePrincipalCloudIdentities",
		Method:             "POST",
		PathPattern:        "/iam/listServicePrincipalCloudIdentities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServicePrincipalCloudIdentitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicePrincipalCloudIdentitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServicePrincipalCloudIdentitiesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListSSHPublicKeys lists SSH public keys for an actor

Lists SSH public keys for an actor.
*/
func (a *Client) ListSSHPublicKeys(params *ListSSHPublicKeysParams, opts ...ClientOption) (*ListSSHPublicKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSSHPublicKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSshPublicKeys",
		Method:             "POST",
		PathPattern:        "/iam/listSshPublicKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSSHPublicKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSSHPublicKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListSSHPublicKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUserAssignedResourceRoles lists a user s assigned resource roles

Lists a user's assigned resource roles.
*/
func (a *Client) ListUserAssignedResourceRoles(params *ListUserAssignedResourceRolesParams, opts ...ClientOption) (*ListUserAssignedResourceRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserAssignedResourceRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUserAssignedResourceRoles",
		Method:             "POST",
		PathPattern:        "/iam/listUserAssignedResourceRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserAssignedResourceRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserAssignedResourceRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserAssignedResourceRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUserAssignedRoles lists the user s assigned roles

Lists the user's assigned roles.
*/
func (a *Client) ListUserAssignedRoles(params *ListUserAssignedRolesParams, opts ...ClientOption) (*ListUserAssignedRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserAssignedRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUserAssignedRoles",
		Method:             "POST",
		PathPattern:        "/iam/listUserAssignedRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserAssignedRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserAssignedRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserAssignedRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUsers lists users

Lists users.
*/
func (a *Client) ListUsers(params *ListUsersParams, opts ...ClientOption) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "POST",
		PathPattern:        "/iam/listUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveMachineUserFromGroup removes a machine user from a group

Remove a machine user from a group.
*/
func (a *Client) RemoveMachineUserFromGroup(params *RemoveMachineUserFromGroupParams, opts ...ClientOption) (*RemoveMachineUserFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMachineUserFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeMachineUserFromGroup",
		Method:             "POST",
		PathPattern:        "/iam/removeMachineUserFromGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveMachineUserFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveMachineUserFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveMachineUserFromGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveUserFromGroup removes a user from a group

Remove a user from a group.
*/
func (a *Client) RemoveUserFromGroup(params *RemoveUserFromGroupParams, opts ...ClientOption) (*RemoveUserFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserFromGroup",
		Method:             "POST",
		PathPattern:        "/iam/removeUserFromGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveUserFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveUserFromGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAccountMessages sets messages for an account

Set messages for an account.
*/
func (a *Client) SetAccountMessages(params *SetAccountMessagesParams, opts ...ClientOption) (*SetAccountMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAccountMessages",
		Method:             "POST",
		PathPattern:        "/iam/setAccountMessages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAccountMessagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAccountMessagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAuthenticationPolicy sets the authentication policy for the account

Set the authentication policy for the account. Check each request parameter for its default values. Changes to the authentication policy only affect authentications that are done after the policy has been updated.
*/
func (a *Client) SetAuthenticationPolicy(params *SetAuthenticationPolicyParams, opts ...ClientOption) (*SetAuthenticationPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAuthenticationPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAuthenticationPolicy",
		Method:             "POST",
		PathPattern:        "/iam/setAuthenticationPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAuthenticationPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAuthenticationPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAuthenticationPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetWorkloadPassword sets the workload password for an actor

Set the workload password for an actor. This will be the actor's password in all Environments they have access to, including Environments they are given access to after setting the password. The password plaintext is not kept.
*/
func (a *Client) SetWorkloadPassword(params *SetWorkloadPasswordParams, opts ...ClientOption) (*SetWorkloadPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkloadPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setWorkloadPassword",
		Method:             "POST",
		PathPattern:        "/iam/setWorkloadPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkloadPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkloadPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetWorkloadPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetWorkloadPasswordPolicy sets the workload password policy for the account

Set the workload password for the account. Changes to the workload password policy only affect passwords that are set after the policy has been updated. By default, passwords never expire.
*/
func (a *Client) SetWorkloadPasswordPolicy(params *SetWorkloadPasswordPolicyParams, opts ...ClientOption) (*SetWorkloadPasswordPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkloadPasswordPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setWorkloadPasswordPolicy",
		Method:             "POST",
		PathPattern:        "/iam/setWorkloadPasswordPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkloadPasswordPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkloadPasswordPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetWorkloadPasswordPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignAzureCloudIdentity unassigns an azure cloud identity from an actor or group

Unassign an Azure cloud identity, i.e. an object ID (OID), from an actor or group.
*/
func (a *Client) UnassignAzureCloudIdentity(params *UnassignAzureCloudIdentityParams, opts ...ClientOption) (*UnassignAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignAzureCloudIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/unassignAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignGroupResourceRole unassigns a resource role from a group

Unassign a resource role from a group. If the resource role is not currently assigned to the group the request will fail.
*/
func (a *Client) UnassignGroupResourceRole(params *UnassignGroupResourceRoleParams, opts ...ClientOption) (*UnassignGroupResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignGroupResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignGroupResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignGroupResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignGroupResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignGroupResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignGroupResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignGroupRole unassigns a role from a group

Unassign a role from a group. If the role is not currently assigned to the group the request will fail.
*/
func (a *Client) UnassignGroupRole(params *UnassignGroupRoleParams, opts ...ClientOption) (*UnassignGroupRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignGroupRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignGroupRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignGroupRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignGroupRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignGroupRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignGroupRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignMachineUserResourceRole unassigns a resource role from a machine user

Unassign a resource role from a machine user. If the resource role is not currently assigned to the machine user the request will fail.
*/
func (a *Client) UnassignMachineUserResourceRole(params *UnassignMachineUserResourceRoleParams, opts ...ClientOption) (*UnassignMachineUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignMachineUserResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignMachineUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignMachineUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignMachineUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignMachineUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignMachineUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignMachineUserRole unassigns a role from a machine user

Unassign a role from a machine user. If the role is not currently assigned to the machine user the request will fail.
*/
func (a *Client) UnassignMachineUserRole(params *UnassignMachineUserRoleParams, opts ...ClientOption) (*UnassignMachineUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignMachineUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignMachineUserRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignMachineUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignMachineUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignMachineUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignMachineUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignServicePrincipalAzureCloudIdentity unassigns an azure cloud identity from a service principal

Unassign an Azure cloud identity, i.e. an object ID (OID), from a service principal.
*/
func (a *Client) UnassignServicePrincipalAzureCloudIdentity(params *UnassignServicePrincipalAzureCloudIdentityParams, opts ...ClientOption) (*UnassignServicePrincipalAzureCloudIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignServicePrincipalAzureCloudIdentityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignServicePrincipalAzureCloudIdentity",
		Method:             "POST",
		PathPattern:        "/iam/unassignServicePrincipalAzureCloudIdentity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignServicePrincipalAzureCloudIdentityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignServicePrincipalAzureCloudIdentityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignServicePrincipalAzureCloudIdentityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignUserResourceRole unassigns a resource role from a user

Unassign a resource role from a user. If the resource role is not currently assigned to the user the request will fail.
*/
func (a *Client) UnassignUserResourceRole(params *UnassignUserResourceRoleParams, opts ...ClientOption) (*UnassignUserResourceRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignUserResourceRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignUserResourceRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignUserResourceRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignUserResourceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignUserResourceRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignUserResourceRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnassignUserRole unassigns a role from a user

Unassign a role from a user. If the role is not currently assigned to the user the request will fail.
*/
func (a *Client) UnassignUserRole(params *UnassignUserRoleParams, opts ...ClientOption) (*UnassignUserRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnassignUserRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unassignUserRole",
		Method:             "POST",
		PathPattern:        "/iam/unassignUserRole",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnassignUserRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnassignUserRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnassignUserRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnlockMachineUserInControlPlane unlocks machine user in the c d p control plane

Unlocks machine user in the CDP control plane. This operation is idempotent. Unlocking an active machine user will succeed and leave the machine user active.
*/
func (a *Client) UnlockMachineUserInControlPlane(params *UnlockMachineUserInControlPlaneParams, opts ...ClientOption) (*UnlockMachineUserInControlPlaneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlockMachineUserInControlPlaneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlockMachineUserInControlPlane",
		Method:             "POST",
		PathPattern:        "/iam/unlockMachineUserInControlPlane",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlockMachineUserInControlPlaneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlockMachineUserInControlPlaneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnlockMachineUserInControlPlaneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnlockUserInControlPlane unlocks user in the c d p control plane

Unlocks user in the CDP control plane. This operation is idempotent. Unlocking an active user will succeed and leave the user active.
*/
func (a *Client) UnlockUserInControlPlane(params *UnlockUserInControlPlaneParams, opts ...ClientOption) (*UnlockUserInControlPlaneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlockUserInControlPlaneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlockUserInControlPlane",
		Method:             "POST",
		PathPattern:        "/iam/unlockUserInControlPlane",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlockUserInControlPlaneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlockUserInControlPlaneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnlockUserInControlPlaneDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnsetWorkloadPasswordMinLifetime removes workload password minimum lifetime date for an actor

Removes the workload password minimum lifetime date for an actor.
*/
func (a *Client) UnsetWorkloadPasswordMinLifetime(params *UnsetWorkloadPasswordMinLifetimeParams, opts ...ClientOption) (*UnsetWorkloadPasswordMinLifetimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnsetWorkloadPasswordMinLifetimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unsetWorkloadPasswordMinLifetime",
		Method:             "POST",
		PathPattern:        "/iam/unsetWorkloadPasswordMinLifetime",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnsetWorkloadPasswordMinLifetimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnsetWorkloadPasswordMinLifetimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnsetWorkloadPasswordMinLifetimeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnsetWorkloadPasswordPolicy unsets workload password policy for the account

Unset the workload password for the account. Changes to the workload password policy only affect passwords that are set after the policy has been updated.
*/
func (a *Client) UnsetWorkloadPasswordPolicy(params *UnsetWorkloadPasswordPolicyParams, opts ...ClientOption) (*UnsetWorkloadPasswordPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnsetWorkloadPasswordPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unsetWorkloadPasswordPolicy",
		Method:             "POST",
		PathPattern:        "/iam/unsetWorkloadPasswordPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnsetWorkloadPasswordPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnsetWorkloadPasswordPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnsetWorkloadPasswordPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAccessKey updates an access key

Updates an access key.
*/
func (a *Client) UpdateAccessKey(params *UpdateAccessKeyParams, opts ...ClientOption) (*UpdateAccessKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccessKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccessKey",
		Method:             "POST",
		PathPattern:        "/iam/updateAccessKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccessKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAccessKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAccessKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateGroup updates a group

Update a group.
*/
func (a *Client) UpdateGroup(params *UpdateGroupParams, opts ...ClientOption) (*UpdateGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGroup",
		Method:             "POST",
		PathPattern:        "/iam/updateGroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSamlProvider updates a s a m l provider in c d p

Updates a SAML provider in CDP.
*/
func (a *Client) UpdateSamlProvider(params *UpdateSamlProviderParams, opts ...ClientOption) (*UpdateSamlProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSamlProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSamlProvider",
		Method:             "POST",
		PathPattern:        "/iam/updateSamlProvider",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSamlProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSamlProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSamlProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUser updates a user

Updates a user. Updates request fields provided. An error is returned if no field updates are defined in the request.
*/
func (a *Client) UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "POST",
		PathPattern:        "/iam/updateUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
