// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/iam/models"
)

// UnsetWorkloadPasswordMinLifetimeReader is a Reader for the UnsetWorkloadPasswordMinLifetime structure.
type UnsetWorkloadPasswordMinLifetimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnsetWorkloadPasswordMinLifetimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnsetWorkloadPasswordMinLifetimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUnsetWorkloadPasswordMinLifetimeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUnsetWorkloadPasswordMinLifetimeOK creates a UnsetWorkloadPasswordMinLifetimeOK with default headers values
func NewUnsetWorkloadPasswordMinLifetimeOK() *UnsetWorkloadPasswordMinLifetimeOK {
	return &UnsetWorkloadPasswordMinLifetimeOK{}
}

/*
UnsetWorkloadPasswordMinLifetimeOK describes a response with status code 200, with default header values.

Expected response to a valid request.
*/
type UnsetWorkloadPasswordMinLifetimeOK struct {
	Payload models.UnsetWorkloadPasswordMinLifetimeResponse
}

// IsSuccess returns true when this unset workload password min lifetime o k response has a 2xx status code
func (o *UnsetWorkloadPasswordMinLifetimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unset workload password min lifetime o k response has a 3xx status code
func (o *UnsetWorkloadPasswordMinLifetimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unset workload password min lifetime o k response has a 4xx status code
func (o *UnsetWorkloadPasswordMinLifetimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unset workload password min lifetime o k response has a 5xx status code
func (o *UnsetWorkloadPasswordMinLifetimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this unset workload password min lifetime o k response a status code equal to that given
func (o *UnsetWorkloadPasswordMinLifetimeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the unset workload password min lifetime o k response
func (o *UnsetWorkloadPasswordMinLifetimeOK) Code() int {
	return 200
}

func (o *UnsetWorkloadPasswordMinLifetimeOK) Error() string {
	return fmt.Sprintf("[POST /iam/unsetWorkloadPasswordMinLifetime][%d] unsetWorkloadPasswordMinLifetimeOK  %+v", 200, o.Payload)
}

func (o *UnsetWorkloadPasswordMinLifetimeOK) String() string {
	return fmt.Sprintf("[POST /iam/unsetWorkloadPasswordMinLifetime][%d] unsetWorkloadPasswordMinLifetimeOK  %+v", 200, o.Payload)
}

func (o *UnsetWorkloadPasswordMinLifetimeOK) GetPayload() models.UnsetWorkloadPasswordMinLifetimeResponse {
	return o.Payload
}

func (o *UnsetWorkloadPasswordMinLifetimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsetWorkloadPasswordMinLifetimeDefault creates a UnsetWorkloadPasswordMinLifetimeDefault with default headers values
func NewUnsetWorkloadPasswordMinLifetimeDefault(code int) *UnsetWorkloadPasswordMinLifetimeDefault {
	return &UnsetWorkloadPasswordMinLifetimeDefault{
		_statusCode: code,
	}
}

/*
UnsetWorkloadPasswordMinLifetimeDefault describes a response with status code -1, with default header values.

The default response on an error.
*/
type UnsetWorkloadPasswordMinLifetimeDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this unset workload password min lifetime default response has a 2xx status code
func (o *UnsetWorkloadPasswordMinLifetimeDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this unset workload password min lifetime default response has a 3xx status code
func (o *UnsetWorkloadPasswordMinLifetimeDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this unset workload password min lifetime default response has a 4xx status code
func (o *UnsetWorkloadPasswordMinLifetimeDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this unset workload password min lifetime default response has a 5xx status code
func (o *UnsetWorkloadPasswordMinLifetimeDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this unset workload password min lifetime default response a status code equal to that given
func (o *UnsetWorkloadPasswordMinLifetimeDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the unset workload password min lifetime default response
func (o *UnsetWorkloadPasswordMinLifetimeDefault) Code() int {
	return o._statusCode
}

func (o *UnsetWorkloadPasswordMinLifetimeDefault) Error() string {
	return fmt.Sprintf("[POST /iam/unsetWorkloadPasswordMinLifetime][%d] unsetWorkloadPasswordMinLifetime default  %+v", o._statusCode, o.Payload)
}

func (o *UnsetWorkloadPasswordMinLifetimeDefault) String() string {
	return fmt.Sprintf("[POST /iam/unsetWorkloadPasswordMinLifetime][%d] unsetWorkloadPasswordMinLifetime default  %+v", o._statusCode, o.Payload)
}

func (o *UnsetWorkloadPasswordMinLifetimeDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UnsetWorkloadPasswordMinLifetimeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
