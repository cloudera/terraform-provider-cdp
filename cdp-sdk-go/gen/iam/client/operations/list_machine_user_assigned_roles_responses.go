// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/iam/models"
)

// ListMachineUserAssignedRolesReader is a Reader for the ListMachineUserAssignedRoles structure.
type ListMachineUserAssignedRolesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListMachineUserAssignedRolesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListMachineUserAssignedRolesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListMachineUserAssignedRolesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListMachineUserAssignedRolesOK creates a ListMachineUserAssignedRolesOK with default headers values
func NewListMachineUserAssignedRolesOK() *ListMachineUserAssignedRolesOK {
	return &ListMachineUserAssignedRolesOK{}
}

/*
ListMachineUserAssignedRolesOK describes a response with status code 200, with default header values.

Expected response to a valid request.
*/
type ListMachineUserAssignedRolesOK struct {
	Payload *models.ListMachineUserAssignedRolesResponse
}

// IsSuccess returns true when this list machine user assigned roles o k response has a 2xx status code
func (o *ListMachineUserAssignedRolesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list machine user assigned roles o k response has a 3xx status code
func (o *ListMachineUserAssignedRolesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list machine user assigned roles o k response has a 4xx status code
func (o *ListMachineUserAssignedRolesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list machine user assigned roles o k response has a 5xx status code
func (o *ListMachineUserAssignedRolesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list machine user assigned roles o k response a status code equal to that given
func (o *ListMachineUserAssignedRolesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list machine user assigned roles o k response
func (o *ListMachineUserAssignedRolesOK) Code() int {
	return 200
}

func (o *ListMachineUserAssignedRolesOK) Error() string {
	return fmt.Sprintf("[POST /iam/listMachineUserAssignedRoles][%d] listMachineUserAssignedRolesOK  %+v", 200, o.Payload)
}

func (o *ListMachineUserAssignedRolesOK) String() string {
	return fmt.Sprintf("[POST /iam/listMachineUserAssignedRoles][%d] listMachineUserAssignedRolesOK  %+v", 200, o.Payload)
}

func (o *ListMachineUserAssignedRolesOK) GetPayload() *models.ListMachineUserAssignedRolesResponse {
	return o.Payload
}

func (o *ListMachineUserAssignedRolesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListMachineUserAssignedRolesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMachineUserAssignedRolesDefault creates a ListMachineUserAssignedRolesDefault with default headers values
func NewListMachineUserAssignedRolesDefault(code int) *ListMachineUserAssignedRolesDefault {
	return &ListMachineUserAssignedRolesDefault{
		_statusCode: code,
	}
}

/*
ListMachineUserAssignedRolesDefault describes a response with status code -1, with default header values.

The default response on an error.
*/
type ListMachineUserAssignedRolesDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this list machine user assigned roles default response has a 2xx status code
func (o *ListMachineUserAssignedRolesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list machine user assigned roles default response has a 3xx status code
func (o *ListMachineUserAssignedRolesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list machine user assigned roles default response has a 4xx status code
func (o *ListMachineUserAssignedRolesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list machine user assigned roles default response has a 5xx status code
func (o *ListMachineUserAssignedRolesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list machine user assigned roles default response a status code equal to that given
func (o *ListMachineUserAssignedRolesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list machine user assigned roles default response
func (o *ListMachineUserAssignedRolesDefault) Code() int {
	return o._statusCode
}

func (o *ListMachineUserAssignedRolesDefault) Error() string {
	return fmt.Sprintf("[POST /iam/listMachineUserAssignedRoles][%d] listMachineUserAssignedRoles default  %+v", o._statusCode, o.Payload)
}

func (o *ListMachineUserAssignedRolesDefault) String() string {
	return fmt.Sprintf("[POST /iam/listMachineUserAssignedRoles][%d] listMachineUserAssignedRoles default  %+v", o._statusCode, o.Payload)
}

func (o *ListMachineUserAssignedRolesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListMachineUserAssignedRolesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
