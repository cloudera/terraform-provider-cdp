// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	stderrors "errors"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/datalake/models"
)

// RotateDbCertificateReader is a Reader for the RotateDbCertificate structure.
type RotateDbCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RotateDbCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (any, error) {
	switch response.Code() {
	case 200:
		result := NewRotateDbCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRotateDbCertificateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRotateDbCertificateOK creates a RotateDbCertificateOK with default headers values
func NewRotateDbCertificateOK() *RotateDbCertificateOK {
	return &RotateDbCertificateOK{}
}

/*
RotateDbCertificateOK describes a response with status code 200, with default header values.

Expected response to a valid request.
*/
type RotateDbCertificateOK struct {
	Payload *models.RotateDbCertificateResponse
}

// IsSuccess returns true when this rotate db certificate o k response has a 2xx status code
func (o *RotateDbCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rotate db certificate o k response has a 3xx status code
func (o *RotateDbCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate db certificate o k response has a 4xx status code
func (o *RotateDbCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rotate db certificate o k response has a 5xx status code
func (o *RotateDbCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate db certificate o k response a status code equal to that given
func (o *RotateDbCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rotate db certificate o k response
func (o *RotateDbCertificateOK) Code() int {
	return 200
}

func (o *RotateDbCertificateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/datalake/rotateDbCertificate][%d] rotateDbCertificateOK %s", 200, payload)
}

func (o *RotateDbCertificateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/datalake/rotateDbCertificate][%d] rotateDbCertificateOK %s", 200, payload)
}

func (o *RotateDbCertificateOK) GetPayload() *models.RotateDbCertificateResponse {
	return o.Payload
}

func (o *RotateDbCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RotateDbCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}

// NewRotateDbCertificateDefault creates a RotateDbCertificateDefault with default headers values
func NewRotateDbCertificateDefault(code int) *RotateDbCertificateDefault {
	return &RotateDbCertificateDefault{
		_statusCode: code,
	}
}

/*
RotateDbCertificateDefault describes a response with status code -1, with default header values.

The default response on an error.
*/
type RotateDbCertificateDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this rotate db certificate default response has a 2xx status code
func (o *RotateDbCertificateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this rotate db certificate default response has a 3xx status code
func (o *RotateDbCertificateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this rotate db certificate default response has a 4xx status code
func (o *RotateDbCertificateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this rotate db certificate default response has a 5xx status code
func (o *RotateDbCertificateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this rotate db certificate default response a status code equal to that given
func (o *RotateDbCertificateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the rotate db certificate default response
func (o *RotateDbCertificateDefault) Code() int {
	return o._statusCode
}

func (o *RotateDbCertificateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/datalake/rotateDbCertificate][%d] rotateDbCertificate default %s", o._statusCode, payload)
}

func (o *RotateDbCertificateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /api/v1/datalake/rotateDbCertificate][%d] rotateDbCertificate default %s", o._statusCode, payload)
}

func (o *RotateDbCertificateDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RotateDbCertificateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && !stderrors.Is(err, io.EOF) {
		return err
	}

	return nil
}
