// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Datalake Information about a datalake.
//
// swagger:model Datalake
type Datalake struct {

	// Indicates the certificate status on the cluster.
	// Enum: [VALID HOST_CERT_EXPIRING]
	CertificateExpirationState string `json:"certificateExpirationState,omitempty"`

	// The date when the datalake was created.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// The CRN of the datalake.
	// Required: true
	Crn *string `json:"crn"`

	// The name of the datalake.
	// Required: true
	DatalakeName *string `json:"datalakeName"`

	// Whether Ranger RAZ is enabled for the datalake.
	EnableRangerRaz bool `json:"enableRangerRaz,omitempty"`

	// The CRN of the environment.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// Flag which marks that the datalake is deployed in a multi-availability zone way or not.
	MultiAz bool `json:"multiAz,omitempty"`

	// The status of the datalake.
	Status string `json:"status,omitempty"`

	// The reason for the status of the datalake.
	StatusReason string `json:"statusReason,omitempty"`

	// Datalake tags object containing the tag values defined for the datalake.
	Tags []*DatalakeResourceTag `json:"tags"`
}

// Validate validates this datalake
func (m *Datalake) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateExpirationState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatalakeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var datalakeTypeCertificateExpirationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VALID","HOST_CERT_EXPIRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datalakeTypeCertificateExpirationStatePropEnum = append(datalakeTypeCertificateExpirationStatePropEnum, v)
	}
}

const (

	// DatalakeCertificateExpirationStateVALID captures enum value "VALID"
	DatalakeCertificateExpirationStateVALID string = "VALID"

	// DatalakeCertificateExpirationStateHOSTCERTEXPIRING captures enum value "HOST_CERT_EXPIRING"
	DatalakeCertificateExpirationStateHOSTCERTEXPIRING string = "HOST_CERT_EXPIRING"
)

// prop value enum
func (m *Datalake) validateCertificateExpirationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datalakeTypeCertificateExpirationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Datalake) validateCertificateExpirationState(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificateExpirationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateCertificateExpirationStateEnum("certificateExpirationState", "body", m.CertificateExpirationState); err != nil {
		return err
	}

	return nil
}

func (m *Datalake) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Datalake) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *Datalake) validateDatalakeName(formats strfmt.Registry) error {

	if err := validate.Required("datalakeName", "body", m.DatalakeName); err != nil {
		return err
	}

	return nil
}

func (m *Datalake) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this datalake based on the context it is used
func (m *Datalake) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datalake) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Datalake) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Datalake) UnmarshalBinary(b []byte) error {
	var res Datalake
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
