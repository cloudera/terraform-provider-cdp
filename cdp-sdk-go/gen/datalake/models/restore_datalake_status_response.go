// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreDatalakeStatusResponse Response object with information on last restore operation on a datalake.
//
// swagger:model RestoreDatalakeStatusResponse
type RestoreDatalakeStatusResponse struct {

	// Account where the datalake exists.
	// Required: true
	AccountID *string `json:"accountId"`

	// Unique identifier of the backup used to perform restore.
	// Required: true
	BackupID *string `json:"backupId"`

	// Location of the backup to be used to perform restore.
	// Required: true
	BackupLocation *string `json:"backupLocation"`

	// Name of the backup.
	BackupName string `json:"backupName,omitempty"`

	// Time when the backup operation ended.
	// Required: true
	EndTime *string `json:"endTime"`

	// Reason for the failure.
	FailureReason string `json:"failureReason,omitempty"`

	// Provides the details of the internal state where the restore operation stands.
	// Required: true
	InternalState *string `json:"internalState"`

	// Provides the details of the internal state of each operation.
	// Required: true
	OperationStates *InternalBackupRestoreState `json:"operationStates"`

	// Unique identifier of the restore operation performed.
	// Required: true
	RestoreID *string `json:"restoreId"`

	// The runtime version of the datalake when the restore was initiated.
	RuntimeVersion string `json:"runtimeVersion,omitempty"`

	// Time when the backup operation started.
	// Required: true
	StartTime *string `json:"startTime"`

	// Provide the current status.
	// Required: true
	Status *string `json:"status"`

	// Crn of the user who triggered this operation.
	// Required: true
	UserCrn *string `json:"userCrn"`
}

// Validate validates this restore datalake status response
func (m *RestoreDatalakeStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestoreID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreDatalakeStatusResponse) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateBackupID(formats strfmt.Registry) error {

	if err := validate.Required("backupId", "body", m.BackupID); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateBackupLocation(formats strfmt.Registry) error {

	if err := validate.Required("backupLocation", "body", m.BackupLocation); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateInternalState(formats strfmt.Registry) error {

	if err := validate.Required("internalState", "body", m.InternalState); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateOperationStates(formats strfmt.Registry) error {

	if err := validate.Required("operationStates", "body", m.OperationStates); err != nil {
		return err
	}

	if m.OperationStates != nil {
		if err := m.OperationStates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationStates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationStates")
			}
			return err
		}
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateRestoreID(formats strfmt.Registry) error {

	if err := validate.Required("restoreId", "body", m.RestoreID); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RestoreDatalakeStatusResponse) validateUserCrn(formats strfmt.Registry) error {

	if err := validate.Required("userCrn", "body", m.UserCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this restore datalake status response based on the context it is used
func (m *RestoreDatalakeStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperationStates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreDatalakeStatusResponse) contextValidateOperationStates(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationStates != nil {
		if err := m.OperationStates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationStates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationStates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RestoreDatalakeStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreDatalakeStatusResponse) UnmarshalBinary(b []byte) error {
	var res RestoreDatalakeStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
