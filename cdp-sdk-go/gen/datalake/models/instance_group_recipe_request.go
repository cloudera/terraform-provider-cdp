// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceGroupRecipeRequest Represents an instance group - recipe pair (by names) request.
//
// swagger:model InstanceGroupRecipeRequest
type InstanceGroupRecipeRequest struct {

	// A valid instance/host group name. This name must be unique.
	// Required: true
	InstanceGroupName *string `json:"instanceGroupName"`

	// Names of the recipes (empty is valid).
	// Unique: true
	RecipeNames []string `json:"recipeNames"`
}

// Validate validates this instance group recipe request
func (m *InstanceGroupRecipeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceGroupRecipeRequest) validateInstanceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroupName", "body", m.InstanceGroupName); err != nil {
		return err
	}

	return nil
}

func (m *InstanceGroupRecipeRequest) validateRecipeNames(formats strfmt.Registry) error {
	if swag.IsZero(m.RecipeNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("recipeNames", "body", m.RecipeNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this instance group recipe request based on context it is used
func (m *InstanceGroupRecipeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstanceGroupRecipeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceGroupRecipeRequest) UnmarshalBinary(b []byte) error {
	var res InstanceGroupRecipeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
