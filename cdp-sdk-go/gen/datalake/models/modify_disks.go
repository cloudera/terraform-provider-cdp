// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModifyDisks Attached volume configuration.
//
// swagger:model ModifyDisks
type ModifyDisks struct {

	// Whether to modify the root disk or additional disks.
	// Enum: ["ROOT_DISK","ADDITIONAL_DISK"]
	DiskType string `json:"diskType,omitempty"`

	// Size of disks to modify to on all the instances in a group in GB.
	// Required: true
	Size *int32 `json:"size"`

	// Type of disks to modify to on all the instances in a group.
	VolumeType string `json:"volumeType,omitempty"`
}

// Validate validates this modify disks
func (m *ModifyDisks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modifyDisksTypeDiskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ROOT_DISK","ADDITIONAL_DISK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modifyDisksTypeDiskTypePropEnum = append(modifyDisksTypeDiskTypePropEnum, v)
	}
}

const (

	// ModifyDisksDiskTypeROOTDISK captures enum value "ROOT_DISK"
	ModifyDisksDiskTypeROOTDISK string = "ROOT_DISK"

	// ModifyDisksDiskTypeADDITIONALDISK captures enum value "ADDITIONAL_DISK"
	ModifyDisksDiskTypeADDITIONALDISK string = "ADDITIONAL_DISK"
)

// prop value enum
func (m *ModifyDisks) validateDiskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modifyDisksTypeDiskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModifyDisks) validateDiskType(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskTypeEnum("diskType", "body", m.DiskType); err != nil {
		return err
	}

	return nil
}

func (m *ModifyDisks) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this modify disks based on context it is used
func (m *ModifyDisks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModifyDisks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModifyDisks) UnmarshalBinary(b []byte) error {
	var res ModifyDisks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
