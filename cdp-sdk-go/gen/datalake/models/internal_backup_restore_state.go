// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalBackupRestoreState Object representing the state of each service running a backup.
//
// swagger:model InternalBackupRestoreState
type InternalBackupRestoreState struct {

	// Admin operations executed via Cloudera Manager for starting and stopping services.
	// Required: true
	AdminOperations *AdminOperationsBackupRestoreState `json:"adminOperations"`

	// Postgres operations to backup or restore the data lake metadata.
	// Required: true
	Database *DatabaseBackupRestoreState `json:"database"`

	// Hbase operations to backup or restore Atlas metadata tables.
	// Required: true
	Hbase *HbaseBackupRestoreState `json:"hbase"`

	// Solr operations to backup up the edge, fulltext, ranger_audit, and vertex tables, or to delete/restore those tables.
	// Required: true
	Solr *SolrBackupRestoreState `json:"solr"`
}

// Validate validates this internal backup restore state
func (m *InternalBackupRestoreState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalBackupRestoreState) validateAdminOperations(formats strfmt.Registry) error {

	if err := validate.Required("adminOperations", "body", m.AdminOperations); err != nil {
		return err
	}

	if m.AdminOperations != nil {
		if err := m.AdminOperations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminOperations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminOperations")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) validateDatabase(formats strfmt.Registry) error {

	if err := validate.Required("database", "body", m.Database); err != nil {
		return err
	}

	if m.Database != nil {
		if err := m.Database.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) validateHbase(formats strfmt.Registry) error {

	if err := validate.Required("hbase", "body", m.Hbase); err != nil {
		return err
	}

	if m.Hbase != nil {
		if err := m.Hbase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbase")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) validateSolr(formats strfmt.Registry) error {

	if err := validate.Required("solr", "body", m.Solr); err != nil {
		return err
	}

	if m.Solr != nil {
		if err := m.Solr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("solr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("solr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this internal backup restore state based on the context it is used
func (m *InternalBackupRestoreState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminOperations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatabase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSolr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalBackupRestoreState) contextValidateAdminOperations(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminOperations != nil {
		if err := m.AdminOperations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminOperations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminOperations")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) contextValidateDatabase(ctx context.Context, formats strfmt.Registry) error {

	if m.Database != nil {
		if err := m.Database.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("database")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("database")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) contextValidateHbase(ctx context.Context, formats strfmt.Registry) error {

	if m.Hbase != nil {
		if err := m.Hbase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbase")
			}
			return err
		}
	}

	return nil
}

func (m *InternalBackupRestoreState) contextValidateSolr(ctx context.Context, formats strfmt.Registry) error {

	if m.Solr != nil {
		if err := m.Solr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("solr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("solr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternalBackupRestoreState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalBackupRestoreState) UnmarshalBinary(b []byte) error {
	var res InternalBackupRestoreState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
