// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatalakeInstanceStatus The status of the instance.
//
// swagger:model DatalakeInstanceStatus
type DatalakeInstanceStatus string

func NewDatalakeInstanceStatus(value DatalakeInstanceStatus) *DatalakeInstanceStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatalakeInstanceStatus.
func (m DatalakeInstanceStatus) Pointer() *DatalakeInstanceStatus {
	return &m
}

const (

	// DatalakeInstanceStatusREQUESTED captures enum value "REQUESTED"
	DatalakeInstanceStatusREQUESTED DatalakeInstanceStatus = "REQUESTED"

	// DatalakeInstanceStatusFAILED captures enum value "FAILED"
	DatalakeInstanceStatusFAILED DatalakeInstanceStatus = "FAILED"

	// DatalakeInstanceStatusCREATED captures enum value "CREATED"
	DatalakeInstanceStatusCREATED DatalakeInstanceStatus = "CREATED"

	// DatalakeInstanceStatusORCHESTRATIONFAILED captures enum value "ORCHESTRATION_FAILED"
	DatalakeInstanceStatusORCHESTRATIONFAILED DatalakeInstanceStatus = "ORCHESTRATION_FAILED"

	// DatalakeInstanceStatusSERVICESRUNNING captures enum value "SERVICES_RUNNING"
	DatalakeInstanceStatusSERVICESRUNNING DatalakeInstanceStatus = "SERVICES_RUNNING"

	// DatalakeInstanceStatusSERVICESHEALTHY captures enum value "SERVICES_HEALTHY"
	DatalakeInstanceStatusSERVICESHEALTHY DatalakeInstanceStatus = "SERVICES_HEALTHY"

	// DatalakeInstanceStatusSERVICESUNHEALTHY captures enum value "SERVICES_UNHEALTHY"
	DatalakeInstanceStatusSERVICESUNHEALTHY DatalakeInstanceStatus = "SERVICES_UNHEALTHY"

	// DatalakeInstanceStatusWAITINGFORREPAIR captures enum value "WAITING_FOR_REPAIR"
	DatalakeInstanceStatusWAITINGFORREPAIR DatalakeInstanceStatus = "WAITING_FOR_REPAIR"

	// DatalakeInstanceStatusSTOPPED captures enum value "STOPPED"
	DatalakeInstanceStatusSTOPPED DatalakeInstanceStatus = "STOPPED"

	// DatalakeInstanceStatusDELETEDONPROVIDERSIDE captures enum value "DELETED_ON_PROVIDER_SIDE"
	DatalakeInstanceStatusDELETEDONPROVIDERSIDE DatalakeInstanceStatus = "DELETED_ON_PROVIDER_SIDE"

	// DatalakeInstanceStatusDELETEDBYPROVIDER captures enum value "DELETED_BY_PROVIDER"
	DatalakeInstanceStatusDELETEDBYPROVIDER DatalakeInstanceStatus = "DELETED_BY_PROVIDER"

	// DatalakeInstanceStatusDELETEREQUESTED captures enum value "DELETE_REQUESTED"
	DatalakeInstanceStatusDELETEREQUESTED DatalakeInstanceStatus = "DELETE_REQUESTED"

	// DatalakeInstanceStatusDECOMMISSIONED captures enum value "DECOMMISSIONED"
	DatalakeInstanceStatusDECOMMISSIONED DatalakeInstanceStatus = "DECOMMISSIONED"

	// DatalakeInstanceStatusDECOMMISIONFAILED captures enum value "DECOMMISION_FAILED"
	DatalakeInstanceStatusDECOMMISIONFAILED DatalakeInstanceStatus = "DECOMMISION_FAILED"

	// DatalakeInstanceStatusTERMINATED captures enum value "TERMINATED"
	DatalakeInstanceStatusTERMINATED DatalakeInstanceStatus = "TERMINATED"
)

// for schema
var datalakeInstanceStatusEnum []interface{}

func init() {
	var res []DatalakeInstanceStatus
	if err := json.Unmarshal([]byte(`["REQUESTED","FAILED","CREATED","ORCHESTRATION_FAILED","SERVICES_RUNNING","SERVICES_HEALTHY","SERVICES_UNHEALTHY","WAITING_FOR_REPAIR","STOPPED","DELETED_ON_PROVIDER_SIDE","DELETED_BY_PROVIDER","DELETE_REQUESTED","DECOMMISSIONED","DECOMMISION_FAILED","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datalakeInstanceStatusEnum = append(datalakeInstanceStatusEnum, v)
	}
}

func (m DatalakeInstanceStatus) validateDatalakeInstanceStatusEnum(path, location string, value DatalakeInstanceStatus) error {
	if err := validate.EnumCase(path, location, value, datalakeInstanceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datalake instance status
func (m DatalakeInstanceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatalakeInstanceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datalake instance status based on context it is used
func (m DatalakeInstanceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
