// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatalakeInstanceType The type of the instance.
//
// swagger:model DatalakeInstanceType
type DatalakeInstanceType string

func NewDatalakeInstanceType(value DatalakeInstanceType) *DatalakeInstanceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatalakeInstanceType.
func (m DatalakeInstanceType) Pointer() *DatalakeInstanceType {
	return &m
}

const (

	// DatalakeInstanceTypeGATEWAY captures enum value "GATEWAY"
	DatalakeInstanceTypeGATEWAY DatalakeInstanceType = "GATEWAY"

	// DatalakeInstanceTypeGATEWAYPRIMARY captures enum value "GATEWAY_PRIMARY"
	DatalakeInstanceTypeGATEWAYPRIMARY DatalakeInstanceType = "GATEWAY_PRIMARY"

	// DatalakeInstanceTypeCORE captures enum value "CORE"
	DatalakeInstanceTypeCORE DatalakeInstanceType = "CORE"
)

// for schema
var datalakeInstanceTypeEnum []interface{}

func init() {
	var res []DatalakeInstanceType
	if err := json.Unmarshal([]byte(`["GATEWAY","GATEWAY_PRIMARY","CORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datalakeInstanceTypeEnum = append(datalakeInstanceTypeEnum, v)
	}
}

func (m DatalakeInstanceType) validateDatalakeInstanceTypeEnum(path, location string, value DatalakeInstanceType) error {
	if err := validate.EnumCase(path, location, value, datalakeInstanceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datalake instance type
func (m DatalakeInstanceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatalakeInstanceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datalake instance type based on context it is used
func (m DatalakeInstanceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
