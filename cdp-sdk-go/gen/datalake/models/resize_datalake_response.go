// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResizeDatalakeResponse Datalake resize response.
//
// swagger:model ResizeDatalakeResponse
type ResizeDatalakeResponse struct {

	// The Cloudbreak version used to create the data lake.
	CloudbreakVersion string `json:"cloudbreakVersion,omitempty"`

	// The CRN of the datalake. This will remain the same for the datalake created by the resize process.
	DatalakeCrn string `json:"datalakeCrn,omitempty"`

	// The name of the datalake. This will remain the same for the datalake created by the resize process.
	DatalakeName string `json:"datalakeName,omitempty"`

	// The CRN of the environment the datalake is attached to. This will remain the same for the datalake created by the resize process.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// The runtime of the datalake. This will remain the same for the datalake created by the resize process.
	Runtime string `json:"runtime,omitempty"`

	// The current status of the datalake.
	Status string `json:"status,omitempty"`

	// The reason for the current status of the datalake.
	StatusReason string `json:"statusReason,omitempty"`
}

// Validate validates this resize datalake response
func (m *ResizeDatalakeResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resize datalake response based on context it is used
func (m *ResizeDatalakeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResizeDatalakeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResizeDatalakeResponse) UnmarshalBinary(b []byte) error {
	var res ResizeDatalakeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
