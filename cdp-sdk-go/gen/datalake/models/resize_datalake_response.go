// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResizeDatalakeResponse Datalake resize response.
//
// swagger:model ResizeDatalakeResponse
type ResizeDatalakeResponse struct {

	// The Cloudbreak version used to create the data lake.
	CloudbreakVersion string `json:"cloudbreakVersion,omitempty"`

	// The CRN of the datalake. This will remain the same for the datalake created by the resize process.
	DatalakeCrn string `json:"datalakeCrn,omitempty"`

	// The name of the datalake. This will remain the same for the datalake created by the resize process.
	DatalakeName string `json:"datalakeName,omitempty"`

	// The CRN of the environment the datalake is attached to. This will remain the same for the datalake created by the resize process.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// Unique operation ID assigned to this command execution. Use this identifier with 'get-operation' to track status and retrieve detailed results.
	OperationID string `json:"operationId,omitempty"`

	// The runtime of the datalake. This will remain the same for the datalake created by the resize process.
	Runtime string `json:"runtime,omitempty"`

	// The current status of the datalake.
	Status string `json:"status,omitempty"`

	// The reason for the current status of the datalake.
	StatusReason string `json:"statusReason,omitempty"`

	// Datalake tags object containing the tag values defined for the datalake.
	Tags []*DatalakeResourceTag `json:"tags"`
}

// Validate validates this resize datalake response
func (m *ResizeDatalakeResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResizeDatalakeResponse) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resize datalake response based on the context it is used
func (m *ResizeDatalakeResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResizeDatalakeResponse) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResizeDatalakeResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResizeDatalakeResponse) UnmarshalBinary(b []byte) error {
	var res ResizeDatalakeResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
