// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeDatalakeRequest Request object to upgrade datalake.
//
// swagger:model UpgradeDatalakeRequest
type UpgradeDatalakeRequest struct {

	// The name or CRN of the datalake.
	// Required: true
	DatalakeName *string `json:"datalakeName"`

	// Checks the eligibility of an image to upgrade
	DryRun bool `json:"dryRun,omitempty"`

	// The id of an image to upgrade to
	ImageID string `json:"imageId,omitempty"`

	// Perform an os upgrade only
	LockComponents bool `json:"lockComponents,omitempty"`

	// Enables the ability to perform rolling runtime upgrade.
	RollingUpgradeEnabled bool `json:"rollingUpgradeEnabled,omitempty"`

	// The runtime version to upgrade to
	Runtime string `json:"runtime,omitempty"`

	// Returns the list of images that are eligible for the upgrade
	ShowAvailableImages bool `json:"showAvailableImages,omitempty"`

	// Returns the latest image that is eligible for the upgrade for each runtime version with at least one available upgrade candidate
	ShowLatestAvailableImagePerRuntime bool `json:"showLatestAvailableImagePerRuntime,omitempty"`

	// Skips the backup of the Atlas metadata. Redundant if --skip-backup is included. If this option is not provided, the Atlas metadata is backed up by default.
	SkipAtlasMetadata bool `json:"skipAtlasMetadata,omitempty"`

	// If provided, will skip the backup flow for the upgrade process.
	SkipBackup bool `json:"skipBackup,omitempty"`

	// With this option, the Data Lake upgrade can be performed with running Data Hub clusters. This option may cause problems on the running Data Hub clusters during the Data Lake upgrade.
	SkipDatahubValidation bool `json:"skipDatahubValidation,omitempty"`

	// Skips the backup of the Ranger audits. Redundant if --skip-backup is included. If this option is not provided, Ranger audits are backed up by default.
	SkipRangerAudits bool `json:"skipRangerAudits,omitempty"`

	// Skips the backup of the databases backing HMS/Ranger services. Redundant if --skip-backup is included. If this option is not provided, the HMS/Ranger services are backed up by default.
	SkipRangerHmsMetadata bool `json:"skipRangerHmsMetadata,omitempty"`
}

// Validate validates this upgrade datalake request
func (m *UpgradeDatalakeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatalakeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeDatalakeRequest) validateDatalakeName(formats strfmt.Registry) error {

	if err := validate.Required("datalakeName", "body", m.DatalakeName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgrade datalake request based on context it is used
func (m *UpgradeDatalakeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeDatalakeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeDatalakeRequest) UnmarshalBinary(b []byte) error {
	var res UpgradeDatalakeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
