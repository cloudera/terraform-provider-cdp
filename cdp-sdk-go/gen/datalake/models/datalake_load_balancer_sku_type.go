// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatalakeLoadBalancerSkuType Represents the Azure load balancer SKU type. The current default is BASIC. To disable the load balancer, use type NONE.
//
// swagger:model DatalakeLoadBalancerSkuType
type DatalakeLoadBalancerSkuType string

func NewDatalakeLoadBalancerSkuType(value DatalakeLoadBalancerSkuType) *DatalakeLoadBalancerSkuType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatalakeLoadBalancerSkuType.
func (m DatalakeLoadBalancerSkuType) Pointer() *DatalakeLoadBalancerSkuType {
	return &m
}

const (

	// DatalakeLoadBalancerSkuTypeBASIC captures enum value "BASIC"
	DatalakeLoadBalancerSkuTypeBASIC DatalakeLoadBalancerSkuType = "BASIC"

	// DatalakeLoadBalancerSkuTypeSTANDARD captures enum value "STANDARD"
	DatalakeLoadBalancerSkuTypeSTANDARD DatalakeLoadBalancerSkuType = "STANDARD"

	// DatalakeLoadBalancerSkuTypeNONE captures enum value "NONE"
	DatalakeLoadBalancerSkuTypeNONE DatalakeLoadBalancerSkuType = "NONE"
)

// for schema
var datalakeLoadBalancerSkuTypeEnum []interface{}

func init() {
	var res []DatalakeLoadBalancerSkuType
	if err := json.Unmarshal([]byte(`["BASIC","STANDARD","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datalakeLoadBalancerSkuTypeEnum = append(datalakeLoadBalancerSkuTypeEnum, v)
	}
}

func (m DatalakeLoadBalancerSkuType) validateDatalakeLoadBalancerSkuTypeEnum(path, location string, value DatalakeLoadBalancerSkuType) error {
	if err := validate.EnumCase(path, location, value, datalakeLoadBalancerSkuTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datalake load balancer sku type
func (m DatalakeLoadBalancerSkuType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatalakeLoadBalancerSkuTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datalake load balancer sku type based on context it is used
func (m DatalakeLoadBalancerSkuType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
