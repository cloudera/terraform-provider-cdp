// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatalakeScaleType Represents the available datalake scales. Defaults to LIGHT_DUTY if not set.
//
// swagger:model DatalakeScaleType
type DatalakeScaleType string

func NewDatalakeScaleType(value DatalakeScaleType) *DatalakeScaleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatalakeScaleType.
func (m DatalakeScaleType) Pointer() *DatalakeScaleType {
	return &m
}

const (

	// DatalakeScaleTypeLIGHTDUTY captures enum value "LIGHT_DUTY"
	DatalakeScaleTypeLIGHTDUTY DatalakeScaleType = "LIGHT_DUTY"

	// DatalakeScaleTypeMEDIUMDUTYHA captures enum value "MEDIUM_DUTY_HA"
	DatalakeScaleTypeMEDIUMDUTYHA DatalakeScaleType = "MEDIUM_DUTY_HA"
)

// for schema
var datalakeScaleTypeEnum []interface{}

func init() {
	var res []DatalakeScaleType
	if err := json.Unmarshal([]byte(`["LIGHT_DUTY","MEDIUM_DUTY_HA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datalakeScaleTypeEnum = append(datalakeScaleTypeEnum, v)
	}
}

func (m DatalakeScaleType) validateDatalakeScaleTypeEnum(path, location string, value DatalakeScaleType) error {
	if err := validate.EnumCase(path, location, value, datalakeScaleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datalake scale type
func (m DatalakeScaleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatalakeScaleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datalake scale type based on context it is used
func (m DatalakeScaleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
