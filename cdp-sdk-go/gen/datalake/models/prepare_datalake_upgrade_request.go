// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrepareDatalakeUpgradeRequest Request object to prepare Data Lake upgrade. This command indicates the upgrade preparation for a specific image or a selected runtime version. Important to note that the imageId or the runtime parameter must be present in the request.
//
// swagger:model PrepareDatalakeUpgradeRequest
type PrepareDatalakeUpgradeRequest struct {

	// The name or CRN of the Data Lake cluster.
	// Required: true
	Datalake *string `json:"datalake"`

	// The ID of an image to upgrade to
	ImageID string `json:"imageId,omitempty"`

	// The runtime version to upgrade to
	Runtime string `json:"runtime,omitempty"`
}

// Validate validates this prepare datalake upgrade request
func (m *PrepareDatalakeUpgradeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatalake(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrepareDatalakeUpgradeRequest) validateDatalake(formats strfmt.Registry) error {

	if err := validate.Required("datalake", "body", m.Datalake); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this prepare datalake upgrade request based on context it is used
func (m *PrepareDatalakeUpgradeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrepareDatalakeUpgradeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrepareDatalakeUpgradeRequest) UnmarshalBinary(b []byte) error {
	var res PrepareDatalakeUpgradeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
