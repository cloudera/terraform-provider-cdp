// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddDisks Attached volume configuration.
//
// swagger:model AddDisks
type AddDisks struct {

	// Usage for the requested disks.
	// Required: true
	// Enum: ["GENERAL","DATABASE"]
	CloudVolumeUsageType *string `json:"cloudVolumeUsageType"`

	// Number of disks to add on all the instances in a group.
	// Required: true
	NumberOfDisks *int32 `json:"numberOfDisks"`

	// Size of disks to add on all the instances in a group in GB.
	// Required: true
	Size *int32 `json:"size"`

	// Type of disks to add on all the instances in a group.
	// Required: true
	VolumeType *string `json:"volumeType"`
}

// Validate validates this add disks
func (m *AddDisks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudVolumeUsageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addDisksTypeCloudVolumeUsageTypePropEnum []any

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GENERAL","DATABASE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addDisksTypeCloudVolumeUsageTypePropEnum = append(addDisksTypeCloudVolumeUsageTypePropEnum, v)
	}
}

const (

	// AddDisksCloudVolumeUsageTypeGENERAL captures enum value "GENERAL"
	AddDisksCloudVolumeUsageTypeGENERAL string = "GENERAL"

	// AddDisksCloudVolumeUsageTypeDATABASE captures enum value "DATABASE"
	AddDisksCloudVolumeUsageTypeDATABASE string = "DATABASE"
)

// prop value enum
func (m *AddDisks) validateCloudVolumeUsageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addDisksTypeCloudVolumeUsageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddDisks) validateCloudVolumeUsageType(formats strfmt.Registry) error {

	if err := validate.Required("cloudVolumeUsageType", "body", m.CloudVolumeUsageType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCloudVolumeUsageTypeEnum("cloudVolumeUsageType", "body", *m.CloudVolumeUsageType); err != nil {
		return err
	}

	return nil
}

func (m *AddDisks) validateNumberOfDisks(formats strfmt.Registry) error {

	if err := validate.Required("numberOfDisks", "body", m.NumberOfDisks); err != nil {
		return err
	}

	return nil
}

func (m *AddDisks) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *AddDisks) validateVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("volumeType", "body", m.VolumeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add disks based on context it is used
func (m *AddDisks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddDisks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddDisks) UnmarshalBinary(b []byte) error {
	var res AddDisks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
