// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SolrBackupRestoreState The state of each Solr backup/restore operation.
//
// swagger:model SolrBackupRestoreState
type SolrBackupRestoreState struct {

	// The status of the EDGE_INDEX_COLLECTION backup/restore.
	// Required: true
	EdgeIndexCollection *BackupRestoreOperationStatus `json:"edgeIndexCollection"`

	// The status of the EDGE_INDEX_COLLECTION deletion, which is done before a restore.
	EdgeIndexCollectionDelete *BackupRestoreOperationStatus `json:"edgeIndexCollectionDelete,omitempty"`

	// The status of the FULLTEXT_INDEX_COLLECTION backup/restore.
	// Required: true
	FulltextIndexCollection *BackupRestoreOperationStatus `json:"fulltextIndexCollection"`

	// The status of the FULLTEXT_INDEX_COLLECTION deletion, which is done before a restore.
	FulltextIndexCollectionDelete *BackupRestoreOperationStatus `json:"fulltextIndexCollectionDelete,omitempty"`

	// The status of the RANGER_AUDITS_COLLECTION backup/restore.
	// Required: true
	RangerAuditsCollection *BackupRestoreOperationStatus `json:"rangerAuditsCollection"`

	// The status of the RANGER_AUDITS_COLLECTION deletion, which is done before a restore.
	RangerAuditsCollectionDelete *BackupRestoreOperationStatus `json:"rangerAuditsCollectionDelete,omitempty"`

	// The status of the VERTEX_INDEX_COLLECTION backup/restore.
	// Required: true
	VertexIndexCollection *BackupRestoreOperationStatus `json:"vertexIndexCollection"`

	// The status of the VERTEX_INDEX_COLLECTION deletion, which is done before a restore.
	VertexIndexCollectionDelete *BackupRestoreOperationStatus `json:"vertexIndexCollectionDelete,omitempty"`
}

// Validate validates this solr backup restore state
func (m *SolrBackupRestoreState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEdgeIndexCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeIndexCollectionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulltextIndexCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulltextIndexCollectionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangerAuditsCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangerAuditsCollectionDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVertexIndexCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVertexIndexCollectionDelete(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolrBackupRestoreState) validateEdgeIndexCollection(formats strfmt.Registry) error {

	if err := validate.Required("edgeIndexCollection", "body", m.EdgeIndexCollection); err != nil {
		return err
	}

	if m.EdgeIndexCollection != nil {
		if err := m.EdgeIndexCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateEdgeIndexCollectionDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeIndexCollectionDelete) { // not required
		return nil
	}

	if m.EdgeIndexCollectionDelete != nil {
		if err := m.EdgeIndexCollectionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateFulltextIndexCollection(formats strfmt.Registry) error {

	if err := validate.Required("fulltextIndexCollection", "body", m.FulltextIndexCollection); err != nil {
		return err
	}

	if m.FulltextIndexCollection != nil {
		if err := m.FulltextIndexCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulltextIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulltextIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateFulltextIndexCollectionDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.FulltextIndexCollectionDelete) { // not required
		return nil
	}

	if m.FulltextIndexCollectionDelete != nil {
		if err := m.FulltextIndexCollectionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulltextIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulltextIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateRangerAuditsCollection(formats strfmt.Registry) error {

	if err := validate.Required("rangerAuditsCollection", "body", m.RangerAuditsCollection); err != nil {
		return err
	}

	if m.RangerAuditsCollection != nil {
		if err := m.RangerAuditsCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangerAuditsCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangerAuditsCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateRangerAuditsCollectionDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.RangerAuditsCollectionDelete) { // not required
		return nil
	}

	if m.RangerAuditsCollectionDelete != nil {
		if err := m.RangerAuditsCollectionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangerAuditsCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangerAuditsCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateVertexIndexCollection(formats strfmt.Registry) error {

	if err := validate.Required("vertexIndexCollection", "body", m.VertexIndexCollection); err != nil {
		return err
	}

	if m.VertexIndexCollection != nil {
		if err := m.VertexIndexCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) validateVertexIndexCollectionDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.VertexIndexCollectionDelete) { // not required
		return nil
	}

	if m.VertexIndexCollectionDelete != nil {
		if err := m.VertexIndexCollectionDelete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this solr backup restore state based on the context it is used
func (m *SolrBackupRestoreState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEdgeIndexCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeIndexCollectionDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulltextIndexCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulltextIndexCollectionDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRangerAuditsCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRangerAuditsCollectionDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVertexIndexCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVertexIndexCollectionDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolrBackupRestoreState) contextValidateEdgeIndexCollection(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeIndexCollection != nil {
		if err := m.EdgeIndexCollection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateEdgeIndexCollectionDelete(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeIndexCollectionDelete != nil {
		if err := m.EdgeIndexCollectionDelete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateFulltextIndexCollection(ctx context.Context, formats strfmt.Registry) error {

	if m.FulltextIndexCollection != nil {
		if err := m.FulltextIndexCollection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulltextIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulltextIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateFulltextIndexCollectionDelete(ctx context.Context, formats strfmt.Registry) error {

	if m.FulltextIndexCollectionDelete != nil {
		if err := m.FulltextIndexCollectionDelete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulltextIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulltextIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateRangerAuditsCollection(ctx context.Context, formats strfmt.Registry) error {

	if m.RangerAuditsCollection != nil {
		if err := m.RangerAuditsCollection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangerAuditsCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangerAuditsCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateRangerAuditsCollectionDelete(ctx context.Context, formats strfmt.Registry) error {

	if m.RangerAuditsCollectionDelete != nil {
		if err := m.RangerAuditsCollectionDelete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rangerAuditsCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rangerAuditsCollectionDelete")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateVertexIndexCollection(ctx context.Context, formats strfmt.Registry) error {

	if m.VertexIndexCollection != nil {
		if err := m.VertexIndexCollection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexIndexCollection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexIndexCollection")
			}
			return err
		}
	}

	return nil
}

func (m *SolrBackupRestoreState) contextValidateVertexIndexCollectionDelete(ctx context.Context, formats strfmt.Registry) error {

	if m.VertexIndexCollectionDelete != nil {
		if err := m.VertexIndexCollectionDelete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vertexIndexCollectionDelete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vertexIndexCollectionDelete")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SolrBackupRestoreState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolrBackupRestoreState) UnmarshalBinary(b []byte) error {
	var res SolrBackupRestoreState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
