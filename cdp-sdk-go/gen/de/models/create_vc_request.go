// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVcRequest Request object for CreateVc method.
//
// swagger:model CreateVcRequest
type CreateVcRequest struct {

	// Comma-separated Workload usernames of CDP users to be granted access to the Virtual Cluster.
	ACLUsers string `json:"aclUsers,omitempty"`

	// Chart overrides for creating a virtual cluster.
	ChartValueOverrides []*ChartValueOverridesRequest `json:"chartValueOverrides"`

	// Cluster id of the CDE service where virtual cluster has to be created.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Cpu requests for autoscaling.
	// Required: true
	CPURequests *string `json:"cpuRequests"`

	// Groups with full access.
	FullAccessGroups []string `json:"fullAccessGroups"`

	// Users with full access.
	FullAccessUsers []string `json:"fullAccessUsers"`

	// GPU requests for autoscaling.
	GpuRequests string `json:"gpuRequests,omitempty"`

	// Guaranteed CPU requests for an Elastic Virtual Cluster.
	GuaranteedCPURequests string `json:"guaranteedCpuRequests,omitempty"`

	// Guaranteed GPU requests for an Elastic Virtual Cluster.
	GuaranteedGpuRequests string `json:"guaranteedGpuRequests,omitempty"`

	// Guaranteed Memory requests for an Elastic Virtual Cluster - eg. 30Gi.
	GuaranteedMemoryRequests string `json:"guaranteedMemoryRequests,omitempty"`

	// Memory requests for autoscaling - eg. 30Gi.
	// Required: true
	MemoryRequests *string `json:"memoryRequests"`

	// Name of the virtual cluster.
	// Required: true
	Name *string `json:"name"`

	// Used to describe where the Driver and the Executors would run. By default the Driver would run on on-demand instances and the Executors on spot instances. Setting it to ALL will run both the Driver and the Executors on spot instances whereas setting it to NONE should run both the Driver and the Executor on on-demand instances. Currently applicable for aws services only. Use this option only on services with spot instances enabled.
	// Enum: ["ALL","NONE"]
	RuntimeSpotComponent string `json:"runtimeSpotComponent,omitempty"`

	// Set a default timeout for your sessions. The default option is 8 hours. This option can be overridden when creating a new session.
	SessionTimeout string `json:"sessionTimeout,omitempty"`

	// SMTP Configurations for Airflow Email Alerts.
	SMTPConfigs *SMTPConfigRequest `json:"smtpConfigs,omitempty"`

	// Spark configs that will be applied to all the spark jobs inside a virtual cluster.
	SparkConfigs map[string]string `json:"sparkConfigs,omitempty"`

	// Spark version for the virtual cluster. Currently supported Spark versions are SPARK2(deprecated), SPARK3, SPARK3_3 and SPARK3_5. This feature is only supported in CDE-1.7.0 and later. SPARK3_3 is supported in CDE-1.19 and later. SPARK3_5 is supported in CDE-1.21 and later.
	// Enum: ["SPARK2","SPARK2_4","SPARK3","SPARK3_0","SPARK3_1","SPARK3_2","SPARK3_3","SPARK3_5"]
	SparkVersion string `json:"sparkVersion,omitempty"`

	// Tier of the virtual cluster. Currently supported tiers are CORE and ALLP. CORE tiered virtual cluster enables operational deployment via batch jobs. ALLP virtual clusters are all-purpose virtual clusters supporting both operational batch jobs and interactive sessions. This feature is only supported in CDE-1.19.0 and beyond.
	// Enum: ["ALLP","CORE"]
	VcTier string `json:"vcTier,omitempty"`

	// Groups with view only access.
	ViewOnlyGroups []string `json:"viewOnlyGroups"`

	// Users with view only access.
	ViewOnlyUsers []string `json:"viewOnlyUsers"`
}

// Validate validates this create vc request
func (m *CreateVcRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartValueOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPURequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeSpotComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSparkVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVcRequest) validateChartValueOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartValueOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.ChartValueOverrides); i++ {
		if swag.IsZero(m.ChartValueOverrides[i]) { // not required
			continue
		}

		if m.ChartValueOverrides[i] != nil {
			if err := m.ChartValueOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateVcRequest) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcRequest) validateCPURequests(formats strfmt.Registry) error {

	if err := validate.Required("cpuRequests", "body", m.CPURequests); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcRequest) validateMemoryRequests(formats strfmt.Registry) error {

	if err := validate.Required("memoryRequests", "body", m.MemoryRequests); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createVcRequestTypeRuntimeSpotComponentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createVcRequestTypeRuntimeSpotComponentPropEnum = append(createVcRequestTypeRuntimeSpotComponentPropEnum, v)
	}
}

const (

	// CreateVcRequestRuntimeSpotComponentALL captures enum value "ALL"
	CreateVcRequestRuntimeSpotComponentALL string = "ALL"

	// CreateVcRequestRuntimeSpotComponentNONE captures enum value "NONE"
	CreateVcRequestRuntimeSpotComponentNONE string = "NONE"
)

// prop value enum
func (m *CreateVcRequest) validateRuntimeSpotComponentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createVcRequestTypeRuntimeSpotComponentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateVcRequest) validateRuntimeSpotComponent(formats strfmt.Registry) error {
	if swag.IsZero(m.RuntimeSpotComponent) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuntimeSpotComponentEnum("runtimeSpotComponent", "body", m.RuntimeSpotComponent); err != nil {
		return err
	}

	return nil
}

func (m *CreateVcRequest) validateSMTPConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SMTPConfigs) { // not required
		return nil
	}

	if m.SMTPConfigs != nil {
		if err := m.SMTPConfigs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpConfigs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpConfigs")
			}
			return err
		}
	}

	return nil
}

var createVcRequestTypeSparkVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SPARK2","SPARK2_4","SPARK3","SPARK3_0","SPARK3_1","SPARK3_2","SPARK3_3","SPARK3_5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createVcRequestTypeSparkVersionPropEnum = append(createVcRequestTypeSparkVersionPropEnum, v)
	}
}

const (

	// CreateVcRequestSparkVersionSPARK2 captures enum value "SPARK2"
	CreateVcRequestSparkVersionSPARK2 string = "SPARK2"

	// CreateVcRequestSparkVersionSPARK24 captures enum value "SPARK2_4"
	CreateVcRequestSparkVersionSPARK24 string = "SPARK2_4"

	// CreateVcRequestSparkVersionSPARK3 captures enum value "SPARK3"
	CreateVcRequestSparkVersionSPARK3 string = "SPARK3"

	// CreateVcRequestSparkVersionSPARK30 captures enum value "SPARK3_0"
	CreateVcRequestSparkVersionSPARK30 string = "SPARK3_0"

	// CreateVcRequestSparkVersionSPARK31 captures enum value "SPARK3_1"
	CreateVcRequestSparkVersionSPARK31 string = "SPARK3_1"

	// CreateVcRequestSparkVersionSPARK32 captures enum value "SPARK3_2"
	CreateVcRequestSparkVersionSPARK32 string = "SPARK3_2"

	// CreateVcRequestSparkVersionSPARK33 captures enum value "SPARK3_3"
	CreateVcRequestSparkVersionSPARK33 string = "SPARK3_3"

	// CreateVcRequestSparkVersionSPARK35 captures enum value "SPARK3_5"
	CreateVcRequestSparkVersionSPARK35 string = "SPARK3_5"
)

// prop value enum
func (m *CreateVcRequest) validateSparkVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createVcRequestTypeSparkVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateVcRequest) validateSparkVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.SparkVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateSparkVersionEnum("sparkVersion", "body", m.SparkVersion); err != nil {
		return err
	}

	return nil
}

var createVcRequestTypeVcTierPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLP","CORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createVcRequestTypeVcTierPropEnum = append(createVcRequestTypeVcTierPropEnum, v)
	}
}

const (

	// CreateVcRequestVcTierALLP captures enum value "ALLP"
	CreateVcRequestVcTierALLP string = "ALLP"

	// CreateVcRequestVcTierCORE captures enum value "CORE"
	CreateVcRequestVcTierCORE string = "CORE"
)

// prop value enum
func (m *CreateVcRequest) validateVcTierEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createVcRequestTypeVcTierPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateVcRequest) validateVcTier(formats strfmt.Registry) error {
	if swag.IsZero(m.VcTier) { // not required
		return nil
	}

	// value enum
	if err := m.validateVcTierEnum("vcTier", "body", m.VcTier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create vc request based on the context it is used
func (m *CreateVcRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartValueOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSMTPConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVcRequest) contextValidateChartValueOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChartValueOverrides); i++ {

		if m.ChartValueOverrides[i] != nil {

			if swag.IsZero(m.ChartValueOverrides[i]) { // not required
				return nil
			}

			if err := m.ChartValueOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateVcRequest) contextValidateSMTPConfigs(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTPConfigs != nil {

		if swag.IsZero(m.SMTPConfigs) { // not required
			return nil
		}

		if err := m.SMTPConfigs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpConfigs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpConfigs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVcRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVcRequest) UnmarshalBinary(b []byte) error {
	var res CreateVcRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
