// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Backup Service backup object.
//
// swagger:model Backup
type Backup struct {

	// The path to the base location where the backups are stored.
	ArchiveBasePath string `json:"archiveBasePath,omitempty"`

	// Archive location under the base path.
	ArchiveLocation string `json:"archiveLocation,omitempty"`

	// The cloud platform where a backed-up CDE service was enabled.
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// The time when the backup was created.
	// Required: true
	Created *string `json:"created"`

	// The workload name of the user who created this backup.
	// Required: true
	Creator *string `json:"creator"`

	// CRN of of the user who created this backup.
	// Required: true
	CreatorCrn *string `json:"creatorCrn"`

	// Backup description.
	Description string `json:"description,omitempty"`

	// CRN of CDP environment with which a backed-up CDE service was associated.
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Name of CDP environment with which a backed-up CDE service was associated.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Error message, only set when there is an error.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Backup ID.
	// Required: true
	ID *int64 `json:"id"`

	// Service ID of a backed-up CDE service.
	// Required: true
	ServiceID *string `json:"serviceID"`

	// Name of a backed-up CDE service.
	// Required: true
	ServiceName *string `json:"serviceName"`

	// Version of a backed-up CDE service.
	// Required: true
	ServiceVersion *string `json:"serviceVersion"`

	// Backup status.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this backup
func (m *Backup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Backup) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateCreatorCrn(formats strfmt.Registry) error {

	if err := validate.Required("creatorCrn", "body", m.CreatorCrn); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("serviceID", "body", m.ServiceID); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateServiceVersion(formats strfmt.Registry) error {

	if err := validate.Required("serviceVersion", "body", m.ServiceVersion); err != nil {
		return err
	}

	return nil
}

func (m *Backup) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this backup based on context it is used
func (m *Backup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Backup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Backup) UnmarshalBinary(b []byte) error {
	var res Backup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
