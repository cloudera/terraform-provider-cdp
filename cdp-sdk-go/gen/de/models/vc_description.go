// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VcDescription CDE virtual cluster summary.
//
// swagger:model VcDescription
type VcDescription struct {

	// URL of the CDE Virtual Cluster UI.
	VcUIURL string `json:"VcUiUrl,omitempty"`

	// Access control object for the Virtual Cluster.
	AccessControl *AccessControlResponse `json:"accessControl,omitempty"`

	// Chart overrides for the Virtual Cluster.
	ChartValueOverrides []*ChartValueOverridesResponse `json:"chartValueOverrides"`

	// Cluster ID of the CDE service that contains the Virtual Cluster.
	// Required: true
	ClusterID *string `json:"clusterId"`

	// Time of creation of the virtual Cluster.
	CreationTime string `json:"creationTime,omitempty"`

	// Email address of the creator of Virtual Cluster.
	CreatorEmail string `json:"creatorEmail,omitempty"`

	// ID of the creator of Virtual Cluster.
	CreatorID string `json:"creatorID,omitempty"`

	// Name of the creator of the Virtual Cluster.
	CreatorName string `json:"creatorName,omitempty"`

	// Spark History Server URL for the Virtual Cluster.
	HistoryServerURL string `json:"historyServerUrl,omitempty"`

	// Livy Server URL for the Virtual Cluster.
	LivyServerURL string `json:"livyServerUrl,omitempty"`

	// Resources details of CDE Service.
	Resources *VcResources `json:"resources,omitempty"`

	// Safari URL for the Virtual Cluster.
	SafariURL string `json:"safariUrl,omitempty"`

	// SMTP Configurations for Airflow Email Alerts.
	SMTPConfig *SMTPConfigResponse `json:"smtpConfig,omitempty"`

	// Spark version for the virtual cluster.
	SparkVersion string `json:"sparkVersion,omitempty"`

	// Status of the Virtual Cluster.
	Status string `json:"status,omitempty"`

	// Url for the Virtual Cluster APIs.
	VcAPIURL string `json:"vcApiUrl,omitempty"`

	// Virtual Cluster ID.
	// Required: true
	VcID *string `json:"vcId"`

	// Name of the CDE Virtual Cluster.
	// Required: true
	VcName *string `json:"vcName"`

	// Tier of the Virtual Cluster.
	VcTier string `json:"vcTier,omitempty"`
}

// Validate validates this vc description
func (m *VcDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartValueOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcDescription) validateAccessControl(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessControl) { // not required
		return nil
	}

	if m.AccessControl != nil {
		if err := m.AccessControl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessControl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessControl")
			}
			return err
		}
	}

	return nil
}

func (m *VcDescription) validateChartValueOverrides(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartValueOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.ChartValueOverrides); i++ {
		if swag.IsZero(m.ChartValueOverrides[i]) { // not required
			continue
		}

		if m.ChartValueOverrides[i] != nil {
			if err := m.ChartValueOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VcDescription) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *VcDescription) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *VcDescription) validateSMTPConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.SMTPConfig) { // not required
		return nil
	}

	if m.SMTPConfig != nil {
		if err := m.SMTPConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VcDescription) validateVcID(formats strfmt.Registry) error {

	if err := validate.Required("vcId", "body", m.VcID); err != nil {
		return err
	}

	return nil
}

func (m *VcDescription) validateVcName(formats strfmt.Registry) error {

	if err := validate.Required("vcName", "body", m.VcName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vc description based on the context it is used
func (m *VcDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChartValueOverrides(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSMTPConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcDescription) contextValidateAccessControl(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessControl != nil {

		if swag.IsZero(m.AccessControl) { // not required
			return nil
		}

		if err := m.AccessControl.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessControl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessControl")
			}
			return err
		}
	}

	return nil
}

func (m *VcDescription) contextValidateChartValueOverrides(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChartValueOverrides); i++ {

		if m.ChartValueOverrides[i] != nil {

			if swag.IsZero(m.ChartValueOverrides[i]) { // not required
				return nil
			}

			if err := m.ChartValueOverrides[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartValueOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VcDescription) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if swag.IsZero(m.Resources) { // not required
			return nil
		}

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *VcDescription) contextValidateSMTPConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.SMTPConfig != nil {

		if swag.IsZero(m.SMTPConfig) { // not required
			return nil
		}

		if err := m.SMTPConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smtpConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("smtpConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcDescription) UnmarshalBinary(b []byte) error {
	var res VcDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
