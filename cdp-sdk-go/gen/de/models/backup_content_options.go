// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupContentOptions Backup virtual cluster content options.
//
// swagger:model BackupContentOptions
type BackupContentOptions struct {

	// Filter credentials for backup using 'fieldname(operator)argument' syntax. Here, 'fieldname' is one of the credential fields (e.g. name, type, etc.), and 'operator' is one of ('eq', 'noteq', 'lte', 'lt', 'gte', 'gt', 'in', 'notin', 'like', 'rlike', 'is', 'isnot'). Multiple filters are ANDed. For example, 'name(eq)test-credential'. This will only take effect if credentials are backed up, as controlled by the 'includeCredentials' option.
	CredentialFilter []string `json:"credentialFilter"`

	// Whether to backup credential secrets. Secrets are obfuscated while storing. By default, credential secrets are backed up.
	IncludeCredentialSecrets *bool `json:"includeCredentialSecrets,omitempty"`

	// Whether to backup credentials. By default, credentials are backed up.
	IncludeCredentials *bool `json:"includeCredentials,omitempty"`

	// Whether to backup job resources. By default, job resources are backed up.
	IncludeJobResources *bool `json:"includeJobResources,omitempty"`

	// Whether to backup job runs. By default, job runs are backed up.
	IncludeJobRuns *bool `json:"includeJobRuns,omitempty"`

	// Whether to backup jobs. By default, jobs are backed up.
	IncludeJobs *bool `json:"includeJobs,omitempty"`

	// Whether to backup resource credentials. By default, resource credentials are backed up.
	IncludeResourceCredentials *bool `json:"includeResourceCredentials,omitempty"`

	// Whether to backup resources. By default, resources are backed up.
	IncludeResources *bool `json:"includeResources,omitempty"`

	// Filter jobs for backup using 'fieldname(operator)argument' syntax. Here, 'fieldname' is one of the job fields (e.g. name, type, etc.), and 'operator' is one of ('eq', 'noteq', 'lte', 'lt', 'gte', 'gt', 'in', 'notin', 'like', 'rlike', 'is', 'isnot'). Multiple filters are ANDed. For example, 'name(eq)SparkPi'. This will only take effect if jobs are backed up, as controlled by the 'includeJobs' option.
	JobFilter []string `json:"jobFilter"`

	// Filter resources for backup using 'fieldname(operator)argument' syntax. Here, 'fieldname' is one of the resource fields (e.g. name, type, status, etc.), and 'operator' is one of ('eq', 'noteq', 'lte', 'lt', 'gte', 'gt', 'in', 'notin', 'like', 'rlike', 'is', 'isnot'). Multiple filters are ANDed. For example, 'name(eq)test-resource'. This will only take effect if resources are backed up, as controlled by the 'includeResources' option.
	ResourceFilter []string `json:"resourceFilter"`

	// Whether to validate backup archive. By default, backup archive is not validated.
	ValidateArchive *bool `json:"validateArchive,omitempty"`
}

// Validate validates this backup content options
func (m *BackupContentOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup content options based on context it is used
func (m *BackupContentOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupContentOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupContentOptions) UnmarshalBinary(b []byte) error {
	var res BackupContentOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
