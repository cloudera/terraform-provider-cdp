// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestoreServiceRequest Request object for Restore Service command.
//
// swagger:model RestoreServiceRequest
type RestoreServiceRequest struct {

	// The ID of the backup to restore from.
	// Required: true
	BackupID *int64 `json:"backupID"`

	// CRN of the CDP environment with which a restored CDE service will be associated. Currently, CDE service can be restored only to the same CDP environment, with which a backed-up service was associated.
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Specify the restored service ID. If not specified, the service ID from the backup will be reused.
	ServiceID string `json:"serviceId,omitempty"`

	// Specify the restored service name. If not specified, the service name from the backup will be reused.
	ServiceName string `json:"serviceName,omitempty"`
}

// Validate validates this restore service request
func (m *RestoreServiceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RestoreServiceRequest) validateBackupID(formats strfmt.Registry) error {

	if err := validate.Required("backupID", "body", m.BackupID); err != nil {
		return err
	}

	return nil
}

func (m *RestoreServiceRequest) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this restore service request based on context it is used
func (m *RestoreServiceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RestoreServiceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestoreServiceRequest) UnmarshalBinary(b []byte) error {
	var res RestoreServiceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
