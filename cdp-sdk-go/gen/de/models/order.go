// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Order Order.
//
// swagger:model Order
type Order string

func NewOrder(value Order) *Order {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Order.
func (m Order) Pointer() *Order {
	return &m
}

const (

	// OrderASC captures enum value "ASC"
	OrderASC Order = "ASC"

	// OrderDESC captures enum value "DESC"
	OrderDESC Order = "DESC"
)

// for schema
var orderEnum []any

func init() {
	var res []Order
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderEnum = append(orderEnum, v)
	}
}

func (m Order) validateOrderEnum(path, location string, value Order) error {
	if err := validate.EnumCase(path, location, value, orderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order
func (m Order) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order based on context it is used
func (m Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
