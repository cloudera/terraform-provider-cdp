// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VcResources Object to store resources for a CDE service
//
// swagger:model VcResources
type VcResources struct {

	// Actual CPU request for the VC. This accounts for other dex apps(eg. livy, airflow), that run in the virtual cluster.
	ActualCPURequests string `json:"actualCpuRequests,omitempty"`

	// Actual Memory request for the VC. This accounts for other dex apps(eg. livy, airflow), that run in the virtual cluster.
	ActualMemoryRequests string `json:"actualMemoryRequests,omitempty"`

	// The CPU requests for VC for running spark jobs.
	CPURequests string `json:"cpuRequests,omitempty"`

	// GPU requests for autoscaling.
	GpuRequests string `json:"gpuRequests,omitempty"`

	// Guaranteed CPU requests for an Elastic Virtual Cluster.
	GuaranteedCPURequests string `json:"guaranteedCpuRequests,omitempty"`

	// Guaranteed GPU requests for an Elastic Virtual Cluster.
	GuaranteedGpuRequests string `json:"guaranteedGpuRequests,omitempty"`

	// Guaranteed Memory requests for an Elastic Virtual Cluster - eg. 30Gi.
	GuaranteedMemoryRequests string `json:"guaranteedMemoryRequests,omitempty"`

	// The Memory requests for VC for running spark jobs.
	MemRequests string `json:"memRequests,omitempty"`
}

// Validate validates this vc resources
func (m *VcResources) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vc resources based on context it is used
func (m *VcResources) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VcResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcResources) UnmarshalBinary(b []byte) error {
	var res VcResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
