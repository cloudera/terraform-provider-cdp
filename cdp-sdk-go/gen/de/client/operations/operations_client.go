// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelBackup(params *CancelBackupParams, opts ...ClientOption) (*CancelBackupOK, error)

	CreateBackup(params *CreateBackupParams, opts ...ClientOption) (*CreateBackupOK, error)

	CreateVc(params *CreateVcParams, opts ...ClientOption) (*CreateVcOK, error)

	DeleteBackup(params *DeleteBackupParams, opts ...ClientOption) (*DeleteBackupOK, error)

	DeleteVc(params *DeleteVcParams, opts ...ClientOption) (*DeleteVcOK, error)

	DescribeBackup(params *DescribeBackupParams, opts ...ClientOption) (*DescribeBackupOK, error)

	DescribeService(params *DescribeServiceParams, opts ...ClientOption) (*DescribeServiceOK, error)

	DescribeVc(params *DescribeVcParams, opts ...ClientOption) (*DescribeVcOK, error)

	DisableService(params *DisableServiceParams, opts ...ClientOption) (*DisableServiceOK, error)

	EnableService(params *EnableServiceParams, opts ...ClientOption) (*EnableServiceOK, error)

	GetBackupLogs(params *GetBackupLogsParams, opts ...ClientOption) (*GetBackupLogsOK, error)

	GetKubeconfig(params *GetKubeconfigParams, opts ...ClientOption) (*GetKubeconfigOK, error)

	GetServiceInitLogs(params *GetServiceInitLogsParams, opts ...ClientOption) (*GetServiceInitLogsOK, error)

	ListBackups(params *ListBackupsParams, opts ...ClientOption) (*ListBackupsOK, error)

	ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error)

	ListVcs(params *ListVcsParams, opts ...ClientOption) (*ListVcsOK, error)

	RestoreService(params *RestoreServiceParams, opts ...ClientOption) (*RestoreServiceOK, error)

	UpdateService(params *UpdateServiceParams, opts ...ClientOption) (*UpdateServiceOK, error)

	UpdateVc(params *UpdateVcParams, opts ...ClientOption) (*UpdateVcOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelBackup cancels cloudera data engineering c d e service backup

Cancel a currently running backup operation using the associated backup ID. The operation must be in a 'pending' state.
*/
func (a *Client) CancelBackup(params *CancelBackupParams, opts ...ClientOption) (*CancelBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/de/cancelBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateBackup backups cloudera data engineering c d e service

Initiates service backup and returns a backup ID, which can be used for log retrieval, restoration, deletion, and backup cancellation. Service backup includes the definition of the Service and its Virtual Clusters along with Virtual Clusters contents (jobs, resources, and credentials).
*/
func (a *Client) CreateBackup(params *CreateBackupParams, opts ...ClientOption) (*CreateBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/de/createBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateVc creates virtual cluster

Creates a virtual cluster and returns creation response.
*/
func (a *Client) CreateVc(params *CreateVcParams, opts ...ClientOption) (*CreateVcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVc",
		Method:             "POST",
		PathPattern:        "/api/v1/de/createVc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateVcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteBackup deletes cloudera data engineering c d e service backup

Delete a backup using the associated backup ID.
*/
func (a *Client) DeleteBackup(params *DeleteBackupParams, opts ...ClientOption) (*DeleteBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/de/deleteBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteVc deletes virtual cluster

Deletes a virtual cluster and returns deletion response.
*/
func (a *Client) DeleteVc(params *DeleteVcParams, opts ...ClientOption) (*DeleteVcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVc",
		Method:             "POST",
		PathPattern:        "/api/v1/de/deleteVc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteVcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeBackup describes cloudera data engineering c d e service backup

Describe a backup using the associated backup ID.
*/
func (a *Client) DescribeBackup(params *DescribeBackupParams, opts ...ClientOption) (*DescribeBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeBackup",
		Method:             "POST",
		PathPattern:        "/api/v1/de/describeBackup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeBackupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeService describes cloudera data engineering c d e service

Returns details of CDE service.
*/
func (a *Client) DescribeService(params *DescribeServiceParams, opts ...ClientOption) (*DescribeServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeService",
		Method:             "POST",
		PathPattern:        "/api/v1/de/describeService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeVc describes virtual cluster

Returns a description for the specified virtual cluster.
*/
func (a *Client) DescribeVc(params *DescribeVcParams, opts ...ClientOption) (*DescribeVcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeVcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeVc",
		Method:             "POST",
		PathPattern:        "/api/v1/de/describeVc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeVcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeVcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeVcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DisableService disables cloudera data engineering c d e service

Returns delete response.
*/
func (a *Client) DisableService(params *DisableServiceParams, opts ...ClientOption) (*DisableServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableService",
		Method:             "POST",
		PathPattern:        "/api/v1/de/disableService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnableService enables cloudera data engineering c d e service

Returns enabling response.
*/
func (a *Client) EnableService(params *EnableServiceParams, opts ...ClientOption) (*EnableServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enableService",
		Method:             "POST",
		PathPattern:        "/api/v1/de/enableService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetBackupLogs retrieves cloudera data engineering c d e service backup logs

Retrieve backup logs using the associated backup ID.
*/
func (a *Client) GetBackupLogs(params *GetBackupLogsParams, opts ...ClientOption) (*GetBackupLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackupLogs",
		Method:             "POST",
		PathPattern:        "/api/v1/de/getBackupLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackupLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKubeconfig gets kubeconfig for the c d e service

Returns kubeconfig.
*/
func (a *Client) GetKubeconfig(params *GetKubeconfigParams, opts ...ClientOption) (*GetKubeconfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubeconfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKubeconfig",
		Method:             "POST",
		PathPattern:        "/api/v1/de/getKubeconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKubeconfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKubeconfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKubeconfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceInitLogs retrieves cloudera data engineering c d e service initialization logs

Retrieve service initialization logs, if any.
*/
func (a *Client) GetServiceInitLogs(params *GetServiceInitLogsParams, opts ...ClientOption) (*GetServiceInitLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceInitLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceInitLogs",
		Method:             "POST",
		PathPattern:        "/api/v1/de/getServiceInitLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceInitLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceInitLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceInitLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListBackups lists cloudera data engineering c d e service backups

List all service backups.
*/
func (a *Client) ListBackups(params *ListBackupsParams, opts ...ClientOption) (*ListBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBackupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listBackups",
		Method:             "POST",
		PathPattern:        "/api/v1/de/listBackups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBackupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListBackupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServices lists cloudera data engineering c d e services

Returns list of cde services.
*/
func (a *Client) ListServices(params *ListServicesParams, opts ...ClientOption) (*ListServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServices",
		Method:             "POST",
		PathPattern:        "/api/v1/de/listServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServicesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListVcs lists virtual clusters

Returns a list of virtual clusters for a given CDE service.
*/
func (a *Client) ListVcs(params *ListVcsParams, opts ...ClientOption) (*ListVcsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVcsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listVcs",
		Method:             "POST",
		PathPattern:        "/api/v1/de/listVcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListVcsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVcsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListVcsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RestoreService restores cloudera data engineering c d e service

Initiates the service restoration process and returns the ID of the service being restored.
*/
func (a *Client) RestoreService(params *RestoreServiceParams, opts ...ClientOption) (*RestoreServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreService",
		Method:             "POST",
		PathPattern:        "/api/v1/de/restoreService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RestoreServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateService updates cloudera data engineering c d e service

Returns update response consisting of operation ID that can be used to log update events.
*/
func (a *Client) UpdateService(params *UpdateServiceParams, opts ...ClientOption) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateService",
		Method:             "POST",
		PathPattern:        "/api/v1/de/updateService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateVc updates cloudera data engineering c d e virtual cluster

Updates Cloudera Data Engineering (CDE) Virtual Cluster and returns details of updated CDE service.
*/
func (a *Client) UpdateVc(params *UpdateVcParams, opts ...ClientOption) (*UpdateVcOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVc",
		Method:             "POST",
		PathPattern:        "/api/v1/de/updateVc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVcOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateVcDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
