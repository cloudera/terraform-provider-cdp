// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvValidation Object for validating services.
//
// swagger:model EnvValidation
type EnvValidation struct {

	// Validation message.
	Message string `json:"message,omitempty"`

	// The level of validation severity.
	// Enum: [INFO WARNING ERROR]
	Severity string `json:"severity,omitempty"`
}

// Validate validates this env validation
func (m *EnvValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var envValidationTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		envValidationTypeSeverityPropEnum = append(envValidationTypeSeverityPropEnum, v)
	}
}

const (

	// EnvValidationSeverityINFO captures enum value "INFO"
	EnvValidationSeverityINFO string = "INFO"

	// EnvValidationSeverityWARNING captures enum value "WARNING"
	EnvValidationSeverityWARNING string = "WARNING"

	// EnvValidationSeverityERROR captures enum value "ERROR"
	EnvValidationSeverityERROR string = "ERROR"
)

// prop value enum
func (m *EnvValidation) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, envValidationTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvValidation) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this env validation based on context it is used
func (m *EnvValidation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvValidation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvValidation) UnmarshalBinary(b []byte) error {
	var res EnvValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
