// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpLogStorageRequest GCP storage configuration for cluster and audit logs.
//
// swagger:model GcpLogStorageRequest
type GcpLogStorageRequest struct {

	// The Google storage bucket to use. This should be a gs:// url.
	BackupStorageLocationBase string `json:"backupStorageLocationBase,omitempty"`

	// Email id of the service account to be associated with the instances. This service account should have "storage.ObjectCreator" role on the given storage bucket.
	// Required: true
	ServiceAccountEmail *string `json:"serviceAccountEmail"`

	// The Google storage bucket to use. This should be a gs:// url.
	// Required: true
	StorageLocationBase *string `json:"storageLocationBase"`
}

// Validate validates this gcp log storage request
func (m *GcpLogStorageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServiceAccountEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageLocationBase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpLogStorageRequest) validateServiceAccountEmail(formats strfmt.Registry) error {

	if err := validate.Required("serviceAccountEmail", "body", m.ServiceAccountEmail); err != nil {
		return err
	}

	return nil
}

func (m *GcpLogStorageRequest) validateStorageLocationBase(formats strfmt.Registry) error {

	if err := validate.Required("storageLocationBase", "body", m.StorageLocationBase); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gcp log storage request based on context it is used
func (m *GcpLogStorageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GcpLogStorageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpLogStorageRequest) UnmarshalBinary(b []byte) error {
	var res GcpLogStorageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
