// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FreeIpaInstance Object for a FreeIPA instance providing specific information about the instance.
//
// swagger:model FreeIpaInstance
type FreeIpaInstance struct {

	// List of volumes attached to this instance.
	AttachedVolumes []*AttachedVolumeDetail `json:"attachedVolumes"`

	// The availability zone of the instance.
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// The fully qualified domain name of the instance in the service discovery cluster.
	DiscoveryFQDN string `json:"discoveryFQDN,omitempty"`

	// The instance group that contains the instance.
	InstanceGroup string `json:"instanceGroup,omitempty"`

	// The instance ID for the instance.
	InstanceID string `json:"instanceId,omitempty"`

	// The status of the instance.
	InstanceStatus string `json:"instanceStatus,omitempty"`

	// The status reason for the instance.
	InstanceStatusReason string `json:"instanceStatusReason,omitempty"`

	// The type of the instance (either GATEWAY or GATEWAY_PRIMARY).
	InstanceType string `json:"instanceType,omitempty"`

	// The VM type of the instance. Supported values depend on the cloud platform.
	InstanceVMType string `json:"instanceVmType,omitempty"`

	// The life cycle type for the instance (either NORMAL or SPOT).
	LifeCycle string `json:"lifeCycle,omitempty"`

	// The private IP of the instance.
	PrivateIP string `json:"privateIP,omitempty"`

	// The public IP of the instance.
	PublicIP string `json:"publicIP,omitempty"`

	// The SSH port of the instance.
	SSHPort int32 `json:"sshPort,omitempty"`

	// The subnet ID of the instance.
	SubnetID string `json:"subnetId,omitempty"`
}

// Validate validates this free ipa instance
func (m *FreeIpaInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreeIpaInstance) validateAttachedVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachedVolumes); i++ {
		if swag.IsZero(m.AttachedVolumes[i]) { // not required
			continue
		}

		if m.AttachedVolumes[i] != nil {
			if err := m.AttachedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this free ipa instance based on the context it is used
func (m *FreeIpaInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachedVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreeIpaInstance) contextValidateAttachedVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachedVolumes); i++ {

		if m.AttachedVolumes[i] != nil {

			if swag.IsZero(m.AttachedVolumes[i]) { // not required
				return nil
			}

			if err := m.AttachedVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FreeIpaInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreeIpaInstance) UnmarshalBinary(b []byte) error {
	var res FreeIpaInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
