// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureCredentialProperties The credential properties that closely related to those that have been created on Azure.
//
// swagger:model AzureCredentialProperties
type AzureCredentialProperties struct {

	// The ID of the created Azure app.
	AppID string `json:"appId,omitempty"`

	// Authentication type of the credential
	AuthenticationType AzureAuthenticationTypeProperties `json:"authenticationType,omitempty"`

	// The public certificate used by the Azure credential.
	Certificate *AzureCredentialCertificateProperties `json:"certificate,omitempty"`

	// The Azure subscription ID for the given credential.
	SubscriptionID string `json:"subscriptionId,omitempty"`

	// The Azure tenant ID for the given credential.
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this azure credential properties
func (m *AzureCredentialProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCredentialProperties) validateAuthenticationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationType) { // not required
		return nil
	}

	if err := m.AuthenticationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authenticationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authenticationType")
		}
		return err
	}

	return nil
}

func (m *AzureCredentialProperties) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure credential properties based on the context it is used
func (m *AzureCredentialProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCredentialProperties) contextValidateAuthenticationType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthenticationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authenticationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authenticationType")
		}
		return err
	}

	return nil
}

func (m *AzureCredentialProperties) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {
		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureCredentialProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCredentialProperties) UnmarshalBinary(b []byte) error {
	var res AzureCredentialProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
