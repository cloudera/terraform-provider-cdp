// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStorage Storage configuration for backup.
//
// swagger:model BackupStorage
type BackupStorage struct {

	// aws details
	AwsDetails *BackupStorageAwsDetails `json:"awsDetails,omitempty"`

	// azure details
	AzureDetails *BackupStorageAzureDetails `json:"azureDetails,omitempty"`

	// Whether external backup storage is enabled. The default value is disabled.
	Enabled bool `json:"enabled,omitempty"`

	// gcp details
	GcpDetails *BackupStorageGcpDetails `json:"gcpDetails,omitempty"`
}

// Validate validates this backup storage
func (m *BackupStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorage) validateAwsDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsDetails) { // not required
		return nil
	}

	if m.AwsDetails != nil {
		if err := m.AwsDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorage) validateAzureDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureDetails) { // not required
		return nil
	}

	if m.AzureDetails != nil {
		if err := m.AzureDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDetails")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorage) validateGcpDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpDetails) { // not required
		return nil
	}

	if m.GcpDetails != nil {
		if err := m.GcpDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup storage based on the context it is used
func (m *BackupStorage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorage) contextValidateAwsDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsDetails != nil {
		if err := m.AwsDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorage) contextValidateAzureDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureDetails != nil {
		if err := m.AzureDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureDetails")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorage) contextValidateGcpDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpDetails != nil {
		if err := m.GcpDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorage) UnmarshalBinary(b []byte) error {
	var res BackupStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupStorageAwsDetails AWS-specific backup storage configuration information.
//
// swagger:model BackupStorageAwsDetails
type BackupStorageAwsDetails struct {

	// The AWS instance profile which contains the necessary permissions to access the S3 storage location.
	InstanceProfile string `json:"instanceProfile,omitempty"`

	// The base location to store backup in S3. This should be an s3a:// url.
	StorageLocationBase string `json:"storageLocationBase,omitempty"`
}

// Validate validates this backup storage aws details
func (m *BackupStorageAwsDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup storage aws details based on context it is used
func (m *BackupStorageAwsDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageAwsDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageAwsDetails) UnmarshalBinary(b []byte) error {
	var res BackupStorageAwsDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupStorageAzureDetails Azure-specific backup storage configuration information.
//
// swagger:model BackupStorageAzureDetails
type BackupStorageAzureDetails struct {

	// The managed identity associated with the backup. This identity should have Storage Blob Data Contributor role on the given storage account.
	ManagedIdentity string `json:"managedIdentity,omitempty"`

	// The storage location to use. The location has to be in the following format abfs://filesystem@storage-account-name.dfs.core.windows.net.
	StorageLocationBase string `json:"storageLocationBase,omitempty"`
}

// Validate validates this backup storage azure details
func (m *BackupStorageAzureDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup storage azure details based on context it is used
func (m *BackupStorageAzureDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageAzureDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageAzureDetails) UnmarshalBinary(b []byte) error {
	var res BackupStorageAzureDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BackupStorageGcpDetails GCP-specific backup storage configuration information.
//
// swagger:model BackupStorageGcpDetails
type BackupStorageGcpDetails struct {

	// Email ID of the service account associated with the backup instances.
	ServiceAccountEmail string `json:"serviceAccountEmail,omitempty"`

	// The storage location to use. This should be a gs:// url.
	StorageLocationBase string `json:"storageLocationBase,omitempty"`
}

// Validate validates this backup storage gcp details
func (m *BackupStorageGcpDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backup storage gcp details based on context it is used
func (m *BackupStorageGcpDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageGcpDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageGcpDetails) UnmarshalBinary(b []byte) error {
	var res BackupStorageGcpDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
