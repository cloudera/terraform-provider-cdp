// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAutomatedSyncEnvironmentStatusResponse Response object for getting automated sync environment status.
//
// swagger:model GetAutomatedSyncEnvironmentStatusResponse
type GetAutomatedSyncEnvironmentStatusResponse struct {

	// The CRN of the environment.
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// Status of the last automated sync operation for the environment.
	LastSyncStatus *LastAutomatedSyncDetails `json:"lastSyncStatus,omitempty"`

	// The state to indicate whether the environment is synced or has a sync pending.
	// Enum: [UNKNOWN SYNC_PENDING SYNCED SYNC_HALTED]
	SyncPendingState string `json:"syncPendingState,omitempty"`
}

// Validate validates this get automated sync environment status response
func (m *GetAutomatedSyncEnvironmentStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastSyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncPendingState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAutomatedSyncEnvironmentStatusResponse) validateLastSyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSyncStatus) { // not required
		return nil
	}

	if m.LastSyncStatus != nil {
		if err := m.LastSyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastSyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastSyncStatus")
			}
			return err
		}
	}

	return nil
}

var getAutomatedSyncEnvironmentStatusResponseTypeSyncPendingStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","SYNC_PENDING","SYNCED","SYNC_HALTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAutomatedSyncEnvironmentStatusResponseTypeSyncPendingStatePropEnum = append(getAutomatedSyncEnvironmentStatusResponseTypeSyncPendingStatePropEnum, v)
	}
}

const (

	// GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateUNKNOWN captures enum value "UNKNOWN"
	GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateUNKNOWN string = "UNKNOWN"

	// GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCPENDING captures enum value "SYNC_PENDING"
	GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCPENDING string = "SYNC_PENDING"

	// GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCED captures enum value "SYNCED"
	GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCED string = "SYNCED"

	// GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCHALTED captures enum value "SYNC_HALTED"
	GetAutomatedSyncEnvironmentStatusResponseSyncPendingStateSYNCHALTED string = "SYNC_HALTED"
)

// prop value enum
func (m *GetAutomatedSyncEnvironmentStatusResponse) validateSyncPendingStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getAutomatedSyncEnvironmentStatusResponseTypeSyncPendingStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetAutomatedSyncEnvironmentStatusResponse) validateSyncPendingState(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncPendingState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncPendingStateEnum("syncPendingState", "body", m.SyncPendingState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get automated sync environment status response based on the context it is used
func (m *GetAutomatedSyncEnvironmentStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastSyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAutomatedSyncEnvironmentStatusResponse) contextValidateLastSyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastSyncStatus != nil {
		if err := m.LastSyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastSyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastSyncStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAutomatedSyncEnvironmentStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAutomatedSyncEnvironmentStatusResponse) UnmarshalBinary(b []byte) error {
	var res GetAutomatedSyncEnvironmentStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
