// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAzureCredentialRequest Request object for an update Azure credential request.
//
// swagger:model UpdateAzureCredentialRequest
type UpdateAzureCredentialRequest struct {

	// app based
	// Required: true
	AppBased *UpdateAzureCredentialRequestAppBased `json:"appBased"`

	// The name of the credential.
	// Required: true
	CredentialName *string `json:"credentialName"`

	// A description for the credential.
	Description string `json:"description,omitempty"`

	// The Azure subscription ID.
	// Required: true
	SubscriptionID *string `json:"subscriptionId"`

	// The Azure AD tenant ID for the Azure subscription.
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this update azure credential request
func (m *UpdateAzureCredentialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppBased(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureCredentialRequest) validateAppBased(formats strfmt.Registry) error {

	if err := validate.Required("appBased", "body", m.AppBased); err != nil {
		return err
	}

	if m.AppBased != nil {
		if err := m.AppBased.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appBased")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appBased")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAzureCredentialRequest) validateCredentialName(formats strfmt.Registry) error {

	if err := validate.Required("credentialName", "body", m.CredentialName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCredentialRequest) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCredentialRequest) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update azure credential request based on the context it is used
func (m *UpdateAzureCredentialRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppBased(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureCredentialRequest) contextValidateAppBased(ctx context.Context, formats strfmt.Registry) error {

	if m.AppBased != nil {
		if err := m.AppBased.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appBased")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appBased")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAzureCredentialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAzureCredentialRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAzureCredentialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateAzureCredentialRequestAppBased Additional configurations needed for app-based authentication.
//
// swagger:model UpdateAzureCredentialRequestAppBased
type UpdateAzureCredentialRequestAppBased struct {

	// The id of the application registered in Azure.
	// Required: true
	ApplicationID *string `json:"applicationId"`

	// Authentication type of the credential
	// Required: true
	AuthenticationType *AzureAuthenticationTypeProperties `json:"authenticationType"`
}

// Validate validates this update azure credential request app based
func (m *UpdateAzureCredentialRequestAppBased) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureCredentialRequestAppBased) validateApplicationID(formats strfmt.Registry) error {

	if err := validate.Required("appBased"+"."+"applicationId", "body", m.ApplicationID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureCredentialRequestAppBased) validateAuthenticationType(formats strfmt.Registry) error {

	if err := validate.Required("appBased"+"."+"authenticationType", "body", m.AuthenticationType); err != nil {
		return err
	}

	if err := validate.Required("appBased"+"."+"authenticationType", "body", m.AuthenticationType); err != nil {
		return err
	}

	if m.AuthenticationType != nil {
		if err := m.AuthenticationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appBased" + "." + "authenticationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appBased" + "." + "authenticationType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update azure credential request app based based on the context it is used
func (m *UpdateAzureCredentialRequestAppBased) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureCredentialRequestAppBased) contextValidateAuthenticationType(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthenticationType != nil {
		if err := m.AuthenticationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appBased" + "." + "authenticationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appBased" + "." + "authenticationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAzureCredentialRequestAppBased) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAzureCredentialRequestAppBased) UnmarshalBinary(b []byte) error {
	var res UpdateAzureCredentialRequestAppBased
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
