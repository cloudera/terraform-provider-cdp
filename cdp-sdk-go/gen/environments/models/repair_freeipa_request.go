// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepairFreeipaRequest Request object for repairing the FreeIPA servers.
//
// swagger:model RepairFreeipaRequest
type RepairFreeipaRequest struct {

	// The environment name or CRN of the FreeIPA to repair
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Force the repair even if the status if the FreeIPA nodes are good.
	Force *bool `json:"force,omitempty"`

	// The instance Ids to repair. If not provided then all instances are looked at for repair.
	Instances []string `json:"instances"`

	// The type of FreeIPA repair to perform. * AUTO - Currently, this is the same as reboot but this may change in the future. * REBOOT - Repair the failed instances by rebooting them. * REBUILD - Repair the failed instances by deleting them and creating new instances, then replicate data from an existing instance to the new instances.
	// Enum: [AUTO REBOOT REBUILD]
	RepairType string `json:"repairType,omitempty"`
}

// Validate validates this repair freeipa request
func (m *RepairFreeipaRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepairType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepairFreeipaRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

var repairFreeipaRequestTypeRepairTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO","REBOOT","REBUILD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repairFreeipaRequestTypeRepairTypePropEnum = append(repairFreeipaRequestTypeRepairTypePropEnum, v)
	}
}

const (

	// RepairFreeipaRequestRepairTypeAUTO captures enum value "AUTO"
	RepairFreeipaRequestRepairTypeAUTO string = "AUTO"

	// RepairFreeipaRequestRepairTypeREBOOT captures enum value "REBOOT"
	RepairFreeipaRequestRepairTypeREBOOT string = "REBOOT"

	// RepairFreeipaRequestRepairTypeREBUILD captures enum value "REBUILD"
	RepairFreeipaRequestRepairTypeREBUILD string = "REBUILD"
)

// prop value enum
func (m *RepairFreeipaRequest) validateRepairTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, repairFreeipaRequestTypeRepairTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RepairFreeipaRequest) validateRepairType(formats strfmt.Registry) error {
	if swag.IsZero(m.RepairType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRepairTypeEnum("repairType", "body", m.RepairType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this repair freeipa request based on context it is used
func (m *RepairFreeipaRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepairFreeipaRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepairFreeipaRequest) UnmarshalBinary(b []byte) error {
	var res RepairFreeipaRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
