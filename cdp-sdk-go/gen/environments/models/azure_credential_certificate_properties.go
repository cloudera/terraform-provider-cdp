// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureCredentialCertificateProperties The certificate used for the credential
//
// swagger:model AzureCredentialCertificateProperties
type AzureCredentialCertificateProperties struct {

	// The certificate (PEM) encoded in base64 format
	Base64 string `json:"base64,omitempty"`

	// the expiration timestamp
	Expiration string `json:"expiration,omitempty"`

	// the expiration in date format
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// The SHA512 digest of the certificate
	Sha512 string `json:"sha512,omitempty"`

	// The status of an Azure credential.
	// Enum: [KEY_GENERATED ACTIVE]
	Status string `json:"status,omitempty"`
}

// Validate validates this azure credential certificate properties
func (m *AzureCredentialCertificateProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureCredentialCertificateProperties) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var azureCredentialCertificatePropertiesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["KEY_GENERATED","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureCredentialCertificatePropertiesTypeStatusPropEnum = append(azureCredentialCertificatePropertiesTypeStatusPropEnum, v)
	}
}

const (

	// AzureCredentialCertificatePropertiesStatusKEYGENERATED captures enum value "KEY_GENERATED"
	AzureCredentialCertificatePropertiesStatusKEYGENERATED string = "KEY_GENERATED"

	// AzureCredentialCertificatePropertiesStatusACTIVE captures enum value "ACTIVE"
	AzureCredentialCertificatePropertiesStatusACTIVE string = "ACTIVE"
)

// prop value enum
func (m *AzureCredentialCertificateProperties) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureCredentialCertificatePropertiesTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureCredentialCertificateProperties) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure credential certificate properties based on context it is used
func (m *AzureCredentialCertificateProperties) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureCredentialCertificateProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureCredentialCertificateProperties) UnmarshalBinary(b []byte) error {
	var res AzureCredentialCertificateProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
