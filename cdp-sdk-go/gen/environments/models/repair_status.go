// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RepairStatus Status of a repair operation.
//
// swagger:model RepairStatus
type RepairStatus string

func NewRepairStatus(value RepairStatus) *RepairStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RepairStatus.
func (m RepairStatus) Pointer() *RepairStatus {
	return &m
}

const (

	// RepairStatusNEVERRUN captures enum value "NEVER_RUN"
	RepairStatusNEVERRUN RepairStatus = "NEVER_RUN"

	// RepairStatusREQUESTED captures enum value "REQUESTED"
	RepairStatusREQUESTED RepairStatus = "REQUESTED"

	// RepairStatusREJECTED captures enum value "REJECTED"
	RepairStatusREJECTED RepairStatus = "REJECTED"

	// RepairStatusRUNNING captures enum value "RUNNING"
	RepairStatusRUNNING RepairStatus = "RUNNING"

	// RepairStatusCOMPLETED captures enum value "COMPLETED"
	RepairStatusCOMPLETED RepairStatus = "COMPLETED"

	// RepairStatusFAILED captures enum value "FAILED"
	RepairStatusFAILED RepairStatus = "FAILED"

	// RepairStatusTIMEDOUT captures enum value "TIMEDOUT"
	RepairStatusTIMEDOUT RepairStatus = "TIMEDOUT"
)

// for schema
var repairStatusEnum []interface{}

func init() {
	var res []RepairStatus
	if err := json.Unmarshal([]byte(`["NEVER_RUN","REQUESTED","REJECTED","RUNNING","COMPLETED","FAILED","TIMEDOUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		repairStatusEnum = append(repairStatusEnum, v)
	}
}

func (m RepairStatus) validateRepairStatusEnum(path, location string, value RepairStatus) error {
	if err := validate.EnumCase(path, location, value, repairStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this repair status
func (m RepairStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRepairStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this repair status based on context it is used
func (m RepairStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
