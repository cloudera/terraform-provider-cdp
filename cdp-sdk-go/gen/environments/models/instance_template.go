// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InstanceTemplate Instance template that specifies the core information for the instances.
//
// swagger:model InstanceTemplate
type InstanceTemplate struct {

	// The attached volume configuration(s).
	AttachedVolumes []*AttachedVolume `json:"attachedVolumes"`

	// AWS specific FreeIPA parameters.
	AwsProperties *AwsFreeIpaInstanceTemplateParams `json:"awsProperties,omitempty"`

	// The type of the instance.
	InstanceType string `json:"instanceType,omitempty"`
}

// Validate validates this instance template
func (m *InstanceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceTemplate) validateAttachedVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachedVolumes); i++ {
		if swag.IsZero(m.AttachedVolumes[i]) { // not required
			continue
		}

		if m.AttachedVolumes[i] != nil {
			if err := m.AttachedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceTemplate) validateAwsProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsProperties) { // not required
		return nil
	}

	if m.AwsProperties != nil {
		if err := m.AwsProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsProperties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this instance template based on the context it is used
func (m *InstanceTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachedVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceTemplate) contextValidateAttachedVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachedVolumes); i++ {

		if m.AttachedVolumes[i] != nil {
			if err := m.AttachedVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceTemplate) contextValidateAwsProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsProperties != nil {
		if err := m.AwsProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsProperties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceTemplate) UnmarshalBinary(b []byte) error {
	var res InstanceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
