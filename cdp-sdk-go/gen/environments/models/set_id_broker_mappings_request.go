// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetIDBrokerMappingsRequest Request object for setting ID Broker mappings for an environment. Overwrites all existing mappings.
//
// swagger:model SetIdBrokerMappingsRequest
type SetIDBrokerMappingsRequest struct {

	// Deprecated. Please use rangerAuditRole instead.
	BaselineRole string `json:"baselineRole,omitempty"`

	// The cloud provider role to which data access services will be mapped (e.g. an ARN in AWS, a Resource ID in Azure).
	// Required: true
	DataAccessRole *string `json:"dataAccessRole"`

	// The name or CRN of the environment.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// ID Broker mappings for individual actors and groups. Does not include mappings for data access services. If omitted or set to an empty list, you must also specify the ``--set-empty-mappings`` option, to confirm that you want to remove any existing individual mappings.
	Mappings []*IDBrokerMappingRequest `json:"mappings"`

	// The cloud provider role to which services that write to Ranger audit logs will be mapped (e.g. an ARN in AWS, a Resource ID in Azure). Note that some data access services also write to Ranger audit logs; such services will be mapped to the dataAccessRole, not the rangerAuditRole. ``THIS PARAMETER IS REQUIRED.``
	RangerAuditRole string `json:"rangerAuditRole,omitempty"`

	// The cloud provider role to which the Ranger RAZ service will be mapped (e.g. an ARN in AWS, a Resource ID in Azure). This is required in RAZ-enabled environments.
	RangerCloudAccessAuthorizerRole string `json:"rangerCloudAccessAuthorizerRole,omitempty"`

	// Whether to install an empty set of individual mappings, deleting any existing mappings. The ``--set-empty-mappings`` option is required if ``--mappings`` is omitted or if its value is an empty list, and disallowed otherwise.
	SetEmptyMappings *bool `json:"setEmptyMappings,omitempty"`
}

// Validate validates this set Id broker mappings request
func (m *SetIDBrokerMappingsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataAccessRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetIDBrokerMappingsRequest) validateDataAccessRole(formats strfmt.Registry) error {

	if err := validate.Required("dataAccessRole", "body", m.DataAccessRole); err != nil {
		return err
	}

	return nil
}

func (m *SetIDBrokerMappingsRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *SetIDBrokerMappingsRequest) validateMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this set Id broker mappings request based on the context it is used
func (m *SetIDBrokerMappingsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetIDBrokerMappingsRequest) contextValidateMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mappings); i++ {

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetIDBrokerMappingsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetIDBrokerMappingsRequest) UnmarshalBinary(b []byte) error {
	var res SetIDBrokerMappingsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
