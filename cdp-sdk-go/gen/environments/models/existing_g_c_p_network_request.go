// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExistingGCPNetworkRequest Request object for creating an GCP environment using existing VPC and subnets.
//
// swagger:model ExistingGCPNetworkRequest
type ExistingGCPNetworkRequest struct {

	// The name of the GCP VPC.
	// Required: true
	NetworkName *string `json:"networkName"`

	// The ID of the Google project associated with the VPC.
	// Required: true
	SharedProjectID *string `json:"sharedProjectId"`

	// One or more subnet names within the VPC. Google VPC's are global, please give subnets from single geographic region only to reduce latency.
	// Required: true
	// Unique: true
	SubnetNames []string `json:"subnetNames"`
}

// Validate validates this existing g c p network request
func (m *ExistingGCPNetworkRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExistingGCPNetworkRequest) validateNetworkName(formats strfmt.Registry) error {

	if err := validate.Required("networkName", "body", m.NetworkName); err != nil {
		return err
	}

	return nil
}

func (m *ExistingGCPNetworkRequest) validateSharedProjectID(formats strfmt.Registry) error {

	if err := validate.Required("sharedProjectId", "body", m.SharedProjectID); err != nil {
		return err
	}

	return nil
}

func (m *ExistingGCPNetworkRequest) validateSubnetNames(formats strfmt.Registry) error {

	if err := validate.Required("subnetNames", "body", m.SubnetNames); err != nil {
		return err
	}

	if err := validate.UniqueItems("subnetNames", "body", m.SubnetNames); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this existing g c p network request based on context it is used
func (m *ExistingGCPNetworkRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExistingGCPNetworkRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExistingGCPNetworkRequest) UnmarshalBinary(b []byte) error {
	var res ExistingGCPNetworkRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
