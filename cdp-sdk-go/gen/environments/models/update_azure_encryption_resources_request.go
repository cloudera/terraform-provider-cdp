// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAzureEncryptionResourcesRequest Request object for updating Azure encryption resources.
//
// swagger:model UpdateAzureEncryptionResourcesRequest
type UpdateAzureEncryptionResourcesRequest struct {

	// Name of the existing Azure resource group hosting the Azure Key Vault containing customer managed key which will be used to encrypt the Azure Managed Disks. It is required only when the entitlement is granted and the resource group of the key vault is different from the resource group in which the environment is to be created. Omitting it implies that, the key vault containing the encryption key is present in the same resource group where the environment would be created.
	EncryptionKeyResourceGroupName string `json:"encryptionKeyResourceGroupName,omitempty"`

	// The URL of an encryption key, which will be used to encrypt the Azure Managed Disks, if the entitlement has been granted.
	// Required: true
	EncryptionKeyURL *string `json:"encryptionKeyUrl"`

	// The name or CRN of the environment.
	// Required: true
	Environment *string `json:"environment"`
}

// Validate validates this update azure encryption resources request
func (m *UpdateAzureEncryptionResourcesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptionKeyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAzureEncryptionResourcesRequest) validateEncryptionKeyURL(formats strfmt.Registry) error {

	if err := validate.Required("encryptionKeyUrl", "body", m.EncryptionKeyURL); err != nil {
		return err
	}

	return nil
}

func (m *UpdateAzureEncryptionResourcesRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update azure encryption resources request based on context it is used
func (m *UpdateAzureEncryptionResourcesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAzureEncryptionResourcesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAzureEncryptionResourcesRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAzureEncryptionResourcesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
