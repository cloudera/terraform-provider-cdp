// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RebuildFreeipaRequest Request object for rebuilding the FreeIPA servers.
//
// swagger:model RebuildFreeipaRequest
type RebuildFreeipaRequest struct {

	// Data/hourly backup location on the cloud storage. These are created in every hour. Usually the lastest one is required, so there won't be any data loss.
	// Required: true
	DataBackupStorageLocation *string `json:"dataBackupStorageLocation"`

	// The environment name or CRN.
	// Required: true
	Environment *string `json:"environment"`

	// CRN of the FreeIPA to rebuild. Must be in the environment specified in 'environmentName'.
	// Required: true
	FreeipaCrn *string `json:"freeipaCrn"`

	// Full backup location on the cloud storage. This backup was created during the provisioning of the instance. By default, no additional full backups are created for a single instance.
	// Required: true
	FullBackupStorageLocation *string `json:"fullBackupStorageLocation"`

	// The instance's Fully Qualified Domain Name (FQDN) that will be restored from the backups. This must match the FQDN of the instance from which the backup was taken.
	// Required: true
	InstanceToRestoreFqdn *string `json:"instanceToRestoreFqdn"`
}

// Validate validates this rebuild freeipa request
func (m *RebuildFreeipaRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataBackupStorageLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeipaCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullBackupStorageLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceToRestoreFqdn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RebuildFreeipaRequest) validateDataBackupStorageLocation(formats strfmt.Registry) error {

	if err := validate.Required("dataBackupStorageLocation", "body", m.DataBackupStorageLocation); err != nil {
		return err
	}

	return nil
}

func (m *RebuildFreeipaRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *RebuildFreeipaRequest) validateFreeipaCrn(formats strfmt.Registry) error {

	if err := validate.Required("freeipaCrn", "body", m.FreeipaCrn); err != nil {
		return err
	}

	return nil
}

func (m *RebuildFreeipaRequest) validateFullBackupStorageLocation(formats strfmt.Registry) error {

	if err := validate.Required("fullBackupStorageLocation", "body", m.FullBackupStorageLocation); err != nil {
		return err
	}

	return nil
}

func (m *RebuildFreeipaRequest) validateInstanceToRestoreFqdn(formats strfmt.Registry) error {

	if err := validate.Required("instanceToRestoreFqdn", "body", m.InstanceToRestoreFqdn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rebuild freeipa request based on context it is used
func (m *RebuildFreeipaRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RebuildFreeipaRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RebuildFreeipaRequest) UnmarshalBinary(b []byte) error {
	var res RebuildFreeipaRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
