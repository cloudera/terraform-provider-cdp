// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateSSHKeyRequest The request object for updating the environment SSH key.
//
// swagger:model UpdateSshKeyRequest
type UpdateSSHKeyRequest struct {

	// The name or the CRN of the environment.
	// Required: true
	Environment *string `json:"environment"`

	// The ID of the existing SSH public key that is stored on the cloud provider side. Either this or a new public key has to be given.
	ExistingPublicKeyID string `json:"existingPublicKeyId,omitempty"`

	// A new SSH public key that is stored locally. Either this or an existing public key ID has to be given.
	NewPublicKey string `json:"newPublicKey,omitempty"`
}

// Validate validates this update Ssh key request
func (m *UpdateSSHKeyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateSSHKeyRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update Ssh key request based on context it is used
func (m *UpdateSSHKeyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateSSHKeyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateSSHKeyRequest) UnmarshalBinary(b []byte) error {
	var res UpdateSSHKeyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
