// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentSummary The environment summary.
//
// swagger:model EnvironmentSummary
type EnvironmentSummary struct {

	// Cloud platform of the environment.
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// Creation date
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Name of the credential of the environment. Must contain only lowercase letters, numbers and hyphens.
	// Required: true
	CredentialName *string `json:"credentialName"`

	// CRN of the environment.
	// Required: true
	Crn *string `json:"crn"`

	// Description of the environment.
	Description string `json:"description,omitempty"`

	// Name of the environment.
	// Required: true
	EnvironmentName *string `json:"environmentName"`

	// Name of the proxy config of the environment.
	ProxyConfigName string `json:"proxyConfigName,omitempty"`

	// Region of the environment.
	// Required: true
	Region *string `json:"region"`

	// Status of the environment,
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this environment summary
func (m *EnvironmentSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentSummary) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateCredentialName(formats strfmt.Registry) error {

	if err := validate.Required("credentialName", "body", m.CredentialName); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateCrn(formats strfmt.Registry) error {

	if err := validate.Required("crn", "body", m.Crn); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this environment summary based on context it is used
func (m *EnvironmentSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentSummary) UnmarshalBinary(b []byte) error {
	var res EnvironmentSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
