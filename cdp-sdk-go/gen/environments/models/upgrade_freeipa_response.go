// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpgradeFreeipaResponse The response object for FreeIPA upgrade.
//
// swagger:model UpgradeFreeipaResponse
type UpgradeFreeipaResponse struct {

	// UUID of the request for this operation. This ID can be used for geting status on the operation.
	OperationID string `json:"operationId,omitempty"`

	// Original, current image.
	OriginalImage *ImageInfoResponse `json:"originalImage,omitempty"`

	// Image selected for upgrade.
	TargetImage *ImageInfoResponse `json:"targetImage,omitempty"`
}

// Validate validates this upgrade freeipa response
func (m *UpgradeFreeipaResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeFreeipaResponse) validateOriginalImage(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalImage) { // not required
		return nil
	}

	if m.OriginalImage != nil {
		if err := m.OriginalImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalImage")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeFreeipaResponse) validateTargetImage(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetImage) { // not required
		return nil
	}

	if m.TargetImage != nil {
		if err := m.TargetImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetImage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this upgrade freeipa response based on the context it is used
func (m *UpgradeFreeipaResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeFreeipaResponse) contextValidateOriginalImage(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalImage != nil {
		if err := m.OriginalImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalImage")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeFreeipaResponse) contextValidateTargetImage(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetImage != nil {
		if err := m.TargetImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetImage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeFreeipaResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeFreeipaResponse) UnmarshalBinary(b []byte) error {
	var res UpgradeFreeipaResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
