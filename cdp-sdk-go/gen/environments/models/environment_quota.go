// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentQuota Resource pool quota for the Environment.
//
// swagger:model EnvironmentQuota
type EnvironmentQuota struct {

	// CPU quota (in Cores) for the Environment. Must be a positive number. By default, a quota won't be set for this resource type in the environment.
	// Minimum: 1
	CPUQuota int64 `json:"cpuQuota,omitempty"`

	// GPU quota (in Cores) for the Environment. Must be a positive number. By default, a quota won't be set for this resource type in the environment.
	// Minimum: 1
	GpuQuota int64 `json:"gpuQuota,omitempty"`

	// Memory quota (in GigaBytes) for the Environment. Must be a positive number. By default, a quota won't be set for this resource type in the environment.
	// Minimum: 1
	MemoryQuota int64 `json:"memoryQuota,omitempty"`
}

// Validate validates this environment quota
func (m *EnvironmentQuota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryQuota(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentQuota) validateCPUQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUQuota) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpuQuota", "body", m.CPUQuota, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentQuota) validateGpuQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.GpuQuota) { // not required
		return nil
	}

	if err := validate.MinimumInt("gpuQuota", "body", m.GpuQuota, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentQuota) validateMemoryQuota(formats strfmt.Registry) error {
	if swag.IsZero(m.MemoryQuota) { // not required
		return nil
	}

	if err := validate.MinimumInt("memoryQuota", "body", m.MemoryQuota, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this environment quota based on context it is used
func (m *EnvironmentQuota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentQuota) UnmarshalBinary(b []byte) error {
	var res EnvironmentQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
