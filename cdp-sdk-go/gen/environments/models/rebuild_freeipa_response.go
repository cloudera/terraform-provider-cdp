// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RebuildFreeipaResponse Response object for a FreeIPA rebuild request.
//
// swagger:model RebuildFreeipaResponse
type RebuildFreeipaResponse struct {

	// Data/hourly backup location on the cloud storage. These are created in every hour. Usually the lastest one is required, so there won't be any data loss.
	DataBackupStorageLocation string `json:"dataBackupStorageLocation,omitempty"`

	// The environment CRN of the FreeIPA to rebuild
	EnvironmentCrn string `json:"environmentCrn,omitempty"`

	// CRN of the FreeIPA to rebuild. Must be in the environment specified in 'environmentName'.
	FreeipaCrn string `json:"freeipaCrn,omitempty"`

	// Full backup location on the cloud storage. This backup was created during the provisioning of the instance. By default, no additional full backups are created for a single instance.
	FullBackupStorageLocation string `json:"fullBackupStorageLocation,omitempty"`

	// The instance's Fully Qualified Domain Name (FQDN) that will be restored from the backups. This must match the FQDN of the instance from which the backup was taken.
	InstanceToRestoreFqdn string `json:"instanceToRestoreFqdn,omitempty"`

	// Operation response of the request for this operation.
	Operation *OperationResponse `json:"operation,omitempty"`
}

// Validate validates this rebuild freeipa response
func (m *RebuildFreeipaResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RebuildFreeipaResponse) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rebuild freeipa response based on the context it is used
func (m *RebuildFreeipaResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RebuildFreeipaResponse) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.Operation != nil {

		if swag.IsZero(m.Operation) { // not required
			return nil
		}

		if err := m.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RebuildFreeipaResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RebuildFreeipaResponse) UnmarshalBinary(b []byte) error {
	var res RebuildFreeipaResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
