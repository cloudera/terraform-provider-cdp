// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TunnelType Supported CCM versions
//
// swagger:model TunnelType
type TunnelType string

func NewTunnelType(value TunnelType) *TunnelType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TunnelType.
func (m TunnelType) Pointer() *TunnelType {
	return &m
}

const (

	// TunnelTypeCCM captures enum value "CCM"
	TunnelTypeCCM TunnelType = "CCM"

	// TunnelTypeCCMV2 captures enum value "CCMV2"
	TunnelTypeCCMV2 TunnelType = "CCMV2"

	// TunnelTypeCCMV2JUMPGATE captures enum value "CCMV2_JUMPGATE"
	TunnelTypeCCMV2JUMPGATE TunnelType = "CCMV2_JUMPGATE"
)

// for schema
var tunnelTypeEnum []interface{}

func init() {
	var res []TunnelType
	if err := json.Unmarshal([]byte(`["CCM","CCMV2","CCMV2_JUMPGATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tunnelTypeEnum = append(tunnelTypeEnum, v)
	}
}

func (m TunnelType) validateTunnelTypeEnum(path, location string, value TunnelType) error {
	if err := validate.EnumCase(path, location, value, tunnelTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tunnel type
func (m TunnelType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTunnelTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tunnel type based on context it is used
func (m TunnelType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
