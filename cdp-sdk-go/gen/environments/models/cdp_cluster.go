// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CdpCluster Discovered CdpCluster object.
//
// swagger:model CdpCluster
type CdpCluster struct {

	// List of cluster validation message.
	ClusterValidationMessages []*EnvValidation `json:"clusterValidationMessages"`

	// The Url to Cloudera Manager.
	CmURL string `json:"cmUrl,omitempty"`

	// Display name of cluster.
	DisplayName string `json:"displayName,omitempty"`

	// List of exposed CDP DC services
	ExposedServices []*ExposedService `json:"exposedServices"`

	// Name of cluster.
	Name string `json:"name,omitempty"`

	// Version of Cloudera Manager.
	Version string `json:"version,omitempty"`
}

// Validate validates this cdp cluster
func (m *CdpCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterValidationMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExposedServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpCluster) validateClusterValidationMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterValidationMessages) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterValidationMessages); i++ {
		if swag.IsZero(m.ClusterValidationMessages[i]) { // not required
			continue
		}

		if m.ClusterValidationMessages[i] != nil {
			if err := m.ClusterValidationMessages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterValidationMessages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterValidationMessages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpCluster) validateExposedServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ExposedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ExposedServices); i++ {
		if swag.IsZero(m.ExposedServices[i]) { // not required
			continue
		}

		if m.ExposedServices[i] != nil {
			if err := m.ExposedServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exposedServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exposedServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cdp cluster based on the context it is used
func (m *CdpCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterValidationMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExposedServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdpCluster) contextValidateClusterValidationMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterValidationMessages); i++ {

		if m.ClusterValidationMessages[i] != nil {
			if err := m.ClusterValidationMessages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterValidationMessages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterValidationMessages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CdpCluster) contextValidateExposedServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExposedServices); i++ {

		if m.ExposedServices[i] != nil {
			if err := m.ExposedServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exposedServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exposedServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdpCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdpCluster) UnmarshalBinary(b []byte) error {
	var res CdpCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
