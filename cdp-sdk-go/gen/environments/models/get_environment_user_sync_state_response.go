// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEnvironmentUserSyncStateResponse Response object for retrieving the user sync state of an environment.
//
// swagger:model GetEnvironmentUserSyncStateResponse
type GetEnvironmentUserSyncStateResponse struct {

	// The user sync state of the environment.
	// Required: true
	// Enum: [UP_TO_DATE STALE SYNC_IN_PROGRESS SYNC_FAILED]
	State *string `json:"state"`

	// Operation Id for the latest user sync operation, if any, run for this environment.
	UserSyncOperationID string `json:"userSyncOperationId,omitempty"`
}

// Validate validates this get environment user sync state response
func (m *GetEnvironmentUserSyncStateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getEnvironmentUserSyncStateResponseTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UP_TO_DATE","STALE","SYNC_IN_PROGRESS","SYNC_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEnvironmentUserSyncStateResponseTypeStatePropEnum = append(getEnvironmentUserSyncStateResponseTypeStatePropEnum, v)
	}
}

const (

	// GetEnvironmentUserSyncStateResponseStateUPTODATE captures enum value "UP_TO_DATE"
	GetEnvironmentUserSyncStateResponseStateUPTODATE string = "UP_TO_DATE"

	// GetEnvironmentUserSyncStateResponseStateSTALE captures enum value "STALE"
	GetEnvironmentUserSyncStateResponseStateSTALE string = "STALE"

	// GetEnvironmentUserSyncStateResponseStateSYNCINPROGRESS captures enum value "SYNC_IN_PROGRESS"
	GetEnvironmentUserSyncStateResponseStateSYNCINPROGRESS string = "SYNC_IN_PROGRESS"

	// GetEnvironmentUserSyncStateResponseStateSYNCFAILED captures enum value "SYNC_FAILED"
	GetEnvironmentUserSyncStateResponseStateSYNCFAILED string = "SYNC_FAILED"
)

// prop value enum
func (m *GetEnvironmentUserSyncStateResponse) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEnvironmentUserSyncStateResponseTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetEnvironmentUserSyncStateResponse) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get environment user sync state response based on context it is used
func (m *GetEnvironmentUserSyncStateResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetEnvironmentUserSyncStateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEnvironmentUserSyncStateResponse) UnmarshalBinary(b []byte) error {
	var res GetEnvironmentUserSyncStateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
