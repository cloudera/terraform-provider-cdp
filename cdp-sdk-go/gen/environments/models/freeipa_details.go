// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FreeipaDetails Details of a FreeIPA cluster.
//
// swagger:model FreeipaDetails
type FreeipaDetails struct {

	// CRN of the FreeIPA cluster.
	Crn string `json:"crn,omitempty"`

	// The domain name of the FreeIPA cluster.
	Domain string `json:"domain,omitempty"`

	// The hostname of the FreeIPA cluster.
	Hostname string `json:"hostname,omitempty"`

	// The image details.
	ImageDetails *ImageInfo `json:"imageDetails,omitempty"`

	// The number of FreeIPA instances to create per group when creating FreeIPA in environment.
	InstanceCountByGroup int32 `json:"instanceCountByGroup,omitempty"`

	// The instances of the FreeIPA cluster.
	// Unique: true
	Instances []*FreeIpaInstance `json:"instances"`

	// Details of a FreeIPA load balancer.
	LoadBalancer *FreeIpaLoadBalancer `json:"loadBalancer,omitempty"`

	// Whether the given FreeIPA is deployed in a multi-availability zone way or not.
	MultiAz bool `json:"multiAz,omitempty"`

	// The recipes for the FreeIPA cluster.
	Recipes []string `json:"recipes"`

	// The IP addresses of the FreeIPA cluster.
	// Unique: true
	ServerIP []string `json:"serverIP"`
}

// Validate validates this freeipa details
func (m *FreeipaDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreeipaDetails) validateImageDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageDetails) { // not required
		return nil
	}

	if m.ImageDetails != nil {
		if err := m.ImageDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FreeipaDetails) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	if err := validate.UniqueItems("instances", "body", m.Instances); err != nil {
		return err
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FreeipaDetails) validateLoadBalancer(formats strfmt.Registry) error {
	if swag.IsZero(m.LoadBalancer) { // not required
		return nil
	}

	if m.LoadBalancer != nil {
		if err := m.LoadBalancer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loadBalancer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loadBalancer")
			}
			return err
		}
	}

	return nil
}

func (m *FreeipaDetails) validateServerIP(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerIP) { // not required
		return nil
	}

	if err := validate.UniqueItems("serverIP", "body", m.ServerIP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this freeipa details based on the context it is used
func (m *FreeipaDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoadBalancer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreeipaDetails) contextValidateImageDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageDetails != nil {

		if swag.IsZero(m.ImageDetails) { // not required
			return nil
		}

		if err := m.ImageDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FreeipaDetails) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {

			if swag.IsZero(m.Instances[i]) { // not required
				return nil
			}

			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FreeipaDetails) contextValidateLoadBalancer(ctx context.Context, formats strfmt.Registry) error {

	if m.LoadBalancer != nil {

		if swag.IsZero(m.LoadBalancer) { // not required
			return nil
		}

		if err := m.LoadBalancer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loadBalancer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loadBalancer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FreeipaDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreeipaDetails) UnmarshalBinary(b []byte) error {
	var res FreeipaDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
