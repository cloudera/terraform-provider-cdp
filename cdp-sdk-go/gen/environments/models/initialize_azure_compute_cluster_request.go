// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InitializeAzureComputeClusterRequest Request object for a initialize Azure default compute cluster.
//
// swagger:model InitializeAzureComputeClusterRequest
type InitializeAzureComputeClusterRequest struct {

	// The Externalized k8s configuration create request for the environment
	ComputeClusterConfiguration *AzureComputeClusterConfigurationRequest `json:"computeClusterConfiguration,omitempty"`

	// The name of the environment.
	// Required: true
	EnvironmentName *string `json:"environmentName"`
}

// Validate validates this initialize azure compute cluster request
func (m *InitializeAzureComputeClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputeClusterConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitializeAzureComputeClusterRequest) validateComputeClusterConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputeClusterConfiguration) { // not required
		return nil
	}

	if m.ComputeClusterConfiguration != nil {
		if err := m.ComputeClusterConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeClusterConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeClusterConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *InitializeAzureComputeClusterRequest) validateEnvironmentName(formats strfmt.Registry) error {

	if err := validate.Required("environmentName", "body", m.EnvironmentName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this initialize azure compute cluster request based on the context it is used
func (m *InitializeAzureComputeClusterRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComputeClusterConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitializeAzureComputeClusterRequest) contextValidateComputeClusterConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.ComputeClusterConfiguration != nil {

		if swag.IsZero(m.ComputeClusterConfiguration) { // not required
			return nil
		}

		if err := m.ComputeClusterConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("computeClusterConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("computeClusterConfiguration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitializeAzureComputeClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitializeAzureComputeClusterRequest) UnmarshalBinary(b []byte) error {
	var res InitializeAzureComputeClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
