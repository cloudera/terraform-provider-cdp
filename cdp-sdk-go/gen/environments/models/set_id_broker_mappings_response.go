// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetIDBrokerMappingsResponse Response object for setting ID Broker mappings for an environment.
//
// swagger:model SetIdBrokerMappingsResponse
type SetIDBrokerMappingsResponse struct {

	// Deprecated. Please use rangerAuditRole instead.
	BaselineRole string `json:"baselineRole,omitempty"`

	// The cloud provider role to which data access services will be mapped (e.g. an ARN in AWS, a Resource ID in Azure).
	// Required: true
	DataAccessRole *string `json:"dataAccessRole"`

	// ID Broker mappings for individual actors and groups. Does not include mappings for data access services. May be empty if no individual mappings are needed.
	Mappings []*IDBrokerMapping `json:"mappings"`

	// The version of the mappings.
	// Required: true
	MappingsVersion *int64 `json:"mappingsVersion"`

	// The cloud provider role to which services that write to Ranger audit logs will be mapped (e.g. an ARN in AWS, a Resource ID in Azure). Note that some data access services also write to Ranger audit logs; such services will be mapped to the dataAccessRole, not the rangerAuditRole.
	// Required: true
	RangerAuditRole *string `json:"rangerAuditRole"`

	// The cloud provider role to which the Ranger RAZ service will be mapped (e.g. an ARN in AWS, a Resource ID in Azure).
	RangerCloudAccessAuthorizerRole string `json:"rangerCloudAccessAuthorizerRole,omitempty"`
}

// Validate validates this set Id broker mappings response
func (m *SetIDBrokerMappingsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataAccessRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappingsVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangerAuditRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetIDBrokerMappingsResponse) validateDataAccessRole(formats strfmt.Registry) error {

	if err := validate.Required("dataAccessRole", "body", m.DataAccessRole); err != nil {
		return err
	}

	return nil
}

func (m *SetIDBrokerMappingsResponse) validateMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SetIDBrokerMappingsResponse) validateMappingsVersion(formats strfmt.Registry) error {

	if err := validate.Required("mappingsVersion", "body", m.MappingsVersion); err != nil {
		return err
	}

	return nil
}

func (m *SetIDBrokerMappingsResponse) validateRangerAuditRole(formats strfmt.Registry) error {

	if err := validate.Required("rangerAuditRole", "body", m.RangerAuditRole); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this set Id broker mappings response based on the context it is used
func (m *SetIDBrokerMappingsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetIDBrokerMappingsResponse) contextValidateMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mappings); i++ {

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetIDBrokerMappingsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetIDBrokerMappingsResponse) UnmarshalBinary(b []byte) error {
	var res SetIDBrokerMappingsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
