// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OperationType Operation Type.
//
// swagger:model OperationType
type OperationType string

func NewOperationType(value OperationType) *OperationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OperationType.
func (m OperationType) Pointer() *OperationType {
	return &m
}

const (

	// OperationTypeSETPASSWORD captures enum value "SET_PASSWORD"
	OperationTypeSETPASSWORD OperationType = "SET_PASSWORD"

	// OperationTypeUSERSYNC captures enum value "USER_SYNC"
	OperationTypeUSERSYNC OperationType = "USER_SYNC"
)

// for schema
var operationTypeEnum []interface{}

func init() {
	var res []OperationType
	if err := json.Unmarshal([]byte(`["SET_PASSWORD","USER_SYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationTypeEnum = append(operationTypeEnum, v)
	}
}

func (m OperationType) validateOperationTypeEnum(path, location string, value OperationType) error {
	if err := validate.EnumCase(path, location, value, operationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operation type
func (m OperationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operation type based on context it is used
func (m OperationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
