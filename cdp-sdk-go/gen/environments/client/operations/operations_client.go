// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AttachFreeIpaRecipes(params *AttachFreeIpaRecipesParams, opts ...ClientOption) (*AttachFreeIpaRecipesOK, error)

	CancelFreeipaDiagnostics(params *CancelFreeipaDiagnosticsParams, opts ...ClientOption) (*CancelFreeipaDiagnosticsOK, error)

	ChangeEnvironmentCredential(params *ChangeEnvironmentCredentialParams, opts ...ClientOption) (*ChangeEnvironmentCredentialOK, error)

	CheckDatabaseConnectivity(params *CheckDatabaseConnectivityParams, opts ...ClientOption) (*CheckDatabaseConnectivityOK, error)

	CheckEnvironmentConnectivity(params *CheckEnvironmentConnectivityParams, opts ...ClientOption) (*CheckEnvironmentConnectivityOK, error)

	CheckKubernetesConnectivity(params *CheckKubernetesConnectivityParams, opts ...ClientOption) (*CheckKubernetesConnectivityOK, error)

	CollectFreeipaDiagnostics(params *CollectFreeipaDiagnosticsParams, opts ...ClientOption) (*CollectFreeipaDiagnosticsOK, error)

	CreateAWSCredential(params *CreateAWSCredentialParams, opts ...ClientOption) (*CreateAWSCredentialOK, error)

	CreateAWSEnvironment(params *CreateAWSEnvironmentParams, opts ...ClientOption) (*CreateAWSEnvironmentOK, error)

	CreateAzureCredential(params *CreateAzureCredentialParams, opts ...ClientOption) (*CreateAzureCredentialOK, error)

	CreateAzureEnvironment(params *CreateAzureEnvironmentParams, opts ...ClientOption) (*CreateAzureEnvironmentOK, error)

	CreateGCPCredential(params *CreateGCPCredentialParams, opts ...ClientOption) (*CreateGCPCredentialOK, error)

	CreateGCPEnvironment(params *CreateGCPEnvironmentParams, opts ...ClientOption) (*CreateGCPEnvironmentOK, error)

	CreatePrivateEnvironment(params *CreatePrivateEnvironmentParams, opts ...ClientOption) (*CreatePrivateEnvironmentOK, error)

	CreateProxyConfig(params *CreateProxyConfigParams, opts ...ClientOption) (*CreateProxyConfigOK, error)

	DeleteAuditCredential(params *DeleteAuditCredentialParams, opts ...ClientOption) (*DeleteAuditCredentialOK, error)

	DeleteCredential(params *DeleteCredentialParams, opts ...ClientOption) (*DeleteCredentialOK, error)

	DeleteEnvironment(params *DeleteEnvironmentParams, opts ...ClientOption) (*DeleteEnvironmentOK, error)

	DeleteProxyConfig(params *DeleteProxyConfigParams, opts ...ClientOption) (*DeleteProxyConfigOK, error)

	DescribeEnvironment(params *DescribeEnvironmentParams, opts ...ClientOption) (*DescribeEnvironmentOK, error)

	DetachFreeIpaRecipes(params *DetachFreeIpaRecipesParams, opts ...ClientOption) (*DetachFreeIpaRecipesOK, error)

	DisableS3Guard(params *DisableS3GuardParams, opts ...ClientOption) (*DisableS3GuardOK, error)

	DownscaleFreeipa(params *DownscaleFreeipaParams, opts ...ClientOption) (*DownscaleFreeipaOK, error)

	GetAccountTelemetry(params *GetAccountTelemetryParams, opts ...ClientOption) (*GetAccountTelemetryOK, error)

	GetAccountTelemetryDefault(params *GetAccountTelemetryDefaultParams, opts ...ClientOption) (*GetAccountTelemetryDefaultOK, error)

	GetAuditCredentialPrerequisites(params *GetAuditCredentialPrerequisitesParams, opts ...ClientOption) (*GetAuditCredentialPrerequisitesOK, error)

	GetAutomatedSyncEnvironmentStatus(params *GetAutomatedSyncEnvironmentStatusParams, opts ...ClientOption) (*GetAutomatedSyncEnvironmentStatusOK, error)

	GetCredentialPrerequisites(params *GetCredentialPrerequisitesParams, opts ...ClientOption) (*GetCredentialPrerequisitesOK, error)

	GetEnvironmentSetting(params *GetEnvironmentSettingParams, opts ...ClientOption) (*GetEnvironmentSettingOK, error)

	GetEnvironmentUserSyncState(params *GetEnvironmentUserSyncStateParams, opts ...ClientOption) (*GetEnvironmentUserSyncStateOK, error)

	GetFreeipaLogDescriptors(params *GetFreeipaLogDescriptorsParams, opts ...ClientOption) (*GetFreeipaLogDescriptorsOK, error)

	GetFreeipaStatus(params *GetFreeipaStatusParams, opts ...ClientOption) (*GetFreeipaStatusOK, error)

	GetIDBrokerMappings(params *GetIDBrokerMappingsParams, opts ...ClientOption) (*GetIDBrokerMappingsOK, error)

	GetIDBrokerMappingsSyncStatus(params *GetIDBrokerMappingsSyncStatusParams, opts ...ClientOption) (*GetIDBrokerMappingsSyncStatusOK, error)

	GetKeytab(params *GetKeytabParams, opts ...ClientOption) (*GetKeytabOK, error)

	GetRepairFreeipaStatus(params *GetRepairFreeipaStatusParams, opts ...ClientOption) (*GetRepairFreeipaStatusOK, error)

	GetRootCertificate(params *GetRootCertificateParams, opts ...ClientOption) (*GetRootCertificateOK, error)

	ListAuditCredentials(params *ListAuditCredentialsParams, opts ...ClientOption) (*ListAuditCredentialsOK, error)

	ListCredentials(params *ListCredentialsParams, opts ...ClientOption) (*ListCredentialsOK, error)

	ListEnvironments(params *ListEnvironmentsParams, opts ...ClientOption) (*ListEnvironmentsOK, error)

	ListFreeipaDiagnostics(params *ListFreeipaDiagnosticsParams, opts ...ClientOption) (*ListFreeipaDiagnosticsOK, error)

	ListProxyConfigs(params *ListProxyConfigsParams, opts ...ClientOption) (*ListProxyConfigsOK, error)

	RepairFreeipa(params *RepairFreeipaParams, opts ...ClientOption) (*RepairFreeipaOK, error)

	RetryFreeipa(params *RetryFreeipaParams, opts ...ClientOption) (*RetryFreeipaOK, error)

	RotateSaltPassword(params *RotateSaltPasswordParams, opts ...ClientOption) (*RotateSaltPasswordOK, error)

	SetAWSAuditCredential(params *SetAWSAuditCredentialParams, opts ...ClientOption) (*SetAWSAuditCredentialOK, error)

	SetAccountTelemetry(params *SetAccountTelemetryParams, opts ...ClientOption) (*SetAccountTelemetryOK, error)

	SetAzureAuditCredential(params *SetAzureAuditCredentialParams, opts ...ClientOption) (*SetAzureAuditCredentialOK, error)

	SetCatalog(params *SetCatalogParams, opts ...ClientOption) (*SetCatalogOK, error)

	SetEndpointAccessGateway(params *SetEndpointAccessGatewayParams, opts ...ClientOption) (*SetEndpointAccessGatewayOK, error)

	SetEnvironmentSetting(params *SetEnvironmentSettingParams, opts ...ClientOption) (*SetEnvironmentSettingOK, error)

	SetIDBrokerMappings(params *SetIDBrokerMappingsParams, opts ...ClientOption) (*SetIDBrokerMappingsOK, error)

	SetPassword(params *SetPasswordParams, opts ...ClientOption) (*SetPasswordOK, error)

	SetTelemetryFeatures(params *SetTelemetryFeaturesParams, opts ...ClientOption) (*SetTelemetryFeaturesOK, error)

	StartEnvironment(params *StartEnvironmentParams, opts ...ClientOption) (*StartEnvironmentOK, error)

	StartFreeIpaVerticalScaling(params *StartFreeIpaVerticalScalingParams, opts ...ClientOption) (*StartFreeIpaVerticalScalingOK, error)

	StopEnvironment(params *StopEnvironmentParams, opts ...ClientOption) (*StopEnvironmentOK, error)

	SyncAllUsers(params *SyncAllUsersParams, opts ...ClientOption) (*SyncAllUsersOK, error)

	SyncIDBrokerMappings(params *SyncIDBrokerMappingsParams, opts ...ClientOption) (*SyncIDBrokerMappingsOK, error)

	SyncStatus(params *SyncStatusParams, opts ...ClientOption) (*SyncStatusOK, error)

	SyncUser(params *SyncUserParams, opts ...ClientOption) (*SyncUserOK, error)

	SynchronizeAllEnvironments(params *SynchronizeAllEnvironmentsParams, opts ...ClientOption) (*SynchronizeAllEnvironmentsOK, error)

	TestAccountTelemetryRules(params *TestAccountTelemetryRulesParams, opts ...ClientOption) (*TestAccountTelemetryRulesOK, error)

	UpdateAwsDiskEncryptionParameters(params *UpdateAwsDiskEncryptionParametersParams, opts ...ClientOption) (*UpdateAwsDiskEncryptionParametersOK, error)

	UpdateAzureCredential(params *UpdateAzureCredentialParams, opts ...ClientOption) (*UpdateAzureCredentialOK, error)

	UpdateAzureEncryptionResources(params *UpdateAzureEncryptionResourcesParams, opts ...ClientOption) (*UpdateAzureEncryptionResourcesOK, error)

	UpdateSubnet(params *UpdateSubnetParams, opts ...ClientOption) (*UpdateSubnetOK, error)

	UpgradeCcm(params *UpgradeCcmParams, opts ...ClientOption) (*UpgradeCcmOK, error)

	UpgradeFreeipa(params *UpgradeFreeipaParams, opts ...ClientOption) (*UpgradeFreeipaOK, error)

	UpscaleFreeipa(params *UpscaleFreeipaParams, opts ...ClientOption) (*UpscaleFreeipaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AttachFreeIpaRecipes attaches recipes to free IP a

Attach recipes to FreeIPA.
*/
func (a *Client) AttachFreeIpaRecipes(params *AttachFreeIpaRecipesParams, opts ...ClientOption) (*AttachFreeIpaRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachFreeIpaRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "attachFreeIpaRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/attachFreeIpaRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AttachFreeIpaRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachFreeIpaRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AttachFreeIpaRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelFreeipaDiagnostics cancels running free IP a diagnostics collections

Cancel running FreeIPA diagnostics collection
*/
func (a *Client) CancelFreeipaDiagnostics(params *CancelFreeipaDiagnosticsParams, opts ...ClientOption) (*CancelFreeipaDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelFreeipaDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelFreeipaDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/cancelFreeipaDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelFreeipaDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelFreeipaDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelFreeipaDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ChangeEnvironmentCredential changes the credential for an environment

Changes the credential for an environment.
*/
func (a *Client) ChangeEnvironmentCredential(params *ChangeEnvironmentCredentialParams, opts ...ClientOption) (*ChangeEnvironmentCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeEnvironmentCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeEnvironmentCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/changeEnvironmentCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeEnvironmentCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeEnvironmentCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangeEnvironmentCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CheckDatabaseConnectivity checks database connectivity based on the input parameters

Checks Database connectivity based on the input parameters.
*/
func (a *Client) CheckDatabaseConnectivity(params *CheckDatabaseConnectivityParams, opts ...ClientOption) (*CheckDatabaseConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckDatabaseConnectivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkDatabaseConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/checkDatabaseConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckDatabaseConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckDatabaseConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckDatabaseConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CheckEnvironmentConnectivity checks connectivity to a new private cloud environment by trying to access the cloudera manager address with provided credentials

Checks connectivity to a Private Cloud environment.
*/
func (a *Client) CheckEnvironmentConnectivity(params *CheckEnvironmentConnectivityParams, opts ...ClientOption) (*CheckEnvironmentConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckEnvironmentConnectivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkEnvironmentConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/checkEnvironmentConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckEnvironmentConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckEnvironmentConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckEnvironmentConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CheckKubernetesConnectivity checks connectivity to a kubernetes address with provided kubeconfig files

Checks connectivity to a Kubernetes address with provided kubeconfig files.
*/
func (a *Client) CheckKubernetesConnectivity(params *CheckKubernetesConnectivityParams, opts ...ClientOption) (*CheckKubernetesConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckKubernetesConnectivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkKubernetesConnectivity",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/checkKubernetesConnectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckKubernetesConnectivityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckKubernetesConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckKubernetesConnectivityDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CollectFreeipaDiagnostics starts free IP a diagnostics collection

Start FreeIPA diagnostics collection
*/
func (a *Client) CollectFreeipaDiagnostics(params *CollectFreeipaDiagnosticsParams, opts ...ClientOption) (*CollectFreeipaDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectFreeipaDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "collectFreeipaDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/collectFreeipaDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CollectFreeipaDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CollectFreeipaDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CollectFreeipaDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAWSCredential creates a new a w s credential that can be attatched to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

Creates a new AWS credential.
*/
func (a *Client) CreateAWSCredential(params *CreateAWSCredentialParams, opts ...ClientOption) (*CreateAWSCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAWSCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAWSCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAWSEnvironment creates a new a w s environment by providing the cloud provider access and network information a free IP a server will be automatically provisioned when an environment is created

Creates a new AWS environment.
*/
func (a *Client) CreateAWSEnvironment(params *CreateAWSEnvironmentParams, opts ...ClientOption) (*CreateAWSEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAWSEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAWSEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAWSEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAWSEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAWSEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAWSEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAzureCredential creates a new azure credential that can be attached to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

Creates a new Azure credential.
*/
func (a *Client) CreateAzureCredential(params *CreateAzureCredentialParams, opts ...ClientOption) (*CreateAzureCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAzureCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAzureEnvironment creates a new azure environment by providing the cloud provider access and network information a free IP a server will be automatically provisioned when an environment is created

Creates a new Azure environment.
*/
func (a *Client) CreateAzureEnvironment(params *CreateAzureEnvironmentParams, opts ...ClientOption) (*CreateAzureEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createAzureEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAzureEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGCPCredential creates a new g c p credential that can be attatched to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

Creates a new GCP credential.
*/
func (a *Client) CreateGCPCredential(params *CreateGCPCredentialParams, opts ...ClientOption) (*CreateGCPCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGCPCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGCPCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createGCPCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGCPCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGCPCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGCPCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateGCPEnvironment creates a new g c p environment by providing the cloud provider access and network information a free IP a server will be automatically provisioned when an environment is created

Creates a new GCP environment.
*/
func (a *Client) CreateGCPEnvironment(params *CreateGCPEnvironmentParams, opts ...ClientOption) (*CreateGCPEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGCPEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGCPEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createGCPEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGCPEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGCPEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateGCPEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreatePrivateEnvironment creates a new private cloud environment by providing the cloudera manager address and credentials

Creates a new Private Cloud environment.
*/
func (a *Client) CreatePrivateEnvironment(params *CreatePrivateEnvironmentParams, opts ...ClientOption) (*CreatePrivateEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePrivateEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPrivateEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createPrivateEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePrivateEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePrivateEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePrivateEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateProxyConfig creates a new proxy config that can be attatched to an environment

Creates a new proxy config.
*/
func (a *Client) CreateProxyConfig(params *CreateProxyConfigParams, opts ...ClientOption) (*CreateProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProxyConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/createProxyConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxyConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateProxyConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAuditCredential deletes an audit credential

Deletes an audit credential.
*/
func (a *Client) DeleteAuditCredential(params *DeleteAuditCredentialParams, opts ...ClientOption) (*DeleteAuditCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuditCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAuditCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteAuditCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuditCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuditCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAuditCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCredential deletes a credential

Deletes a credential.
*/
func (a *Client) DeleteCredential(params *DeleteCredentialParams, opts ...ClientOption) (*DeleteCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteEnvironment deletes an environment

Deletes an environment.
*/
func (a *Client) DeleteEnvironment(params *DeleteEnvironmentParams, opts ...ClientOption) (*DeleteEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteProxyConfig deletes a proxy config

Deletes a proxy config.
*/
func (a *Client) DeleteProxyConfig(params *DeleteProxyConfigParams, opts ...ClientOption) (*DeleteProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProxyConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/deleteProxyConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxyConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteProxyConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DescribeEnvironment describes an environment

Describes an environment.
*/
func (a *Client) DescribeEnvironment(params *DescribeEnvironmentParams, opts ...ClientOption) (*DescribeEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/describeEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DescribeEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DetachFreeIpaRecipes detaches recipes from free IP a

Detach recipes from FreeIPA.
*/
func (a *Client) DetachFreeIpaRecipes(params *DetachFreeIpaRecipesParams, opts ...ClientOption) (*DetachFreeIpaRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachFreeIpaRecipesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detachFreeIpaRecipes",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/detachFreeIpaRecipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetachFreeIpaRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachFreeIpaRecipesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DetachFreeIpaRecipesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DisableS3Guard disables the s3 guard for an environment

Disables the S3Guard for an environment.
*/
func (a *Client) DisableS3Guard(params *DisableS3GuardParams, opts ...ClientOption) (*DisableS3GuardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableS3GuardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disableS3Guard",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/disableS3Guard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableS3GuardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableS3GuardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableS3GuardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DownscaleFreeipa downscales free IP a instances

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DownscaleFreeipa(params *DownscaleFreeipaParams, opts ...ClientOption) (*DownscaleFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownscaleFreeipaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downscaleFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/downscaleFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownscaleFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownscaleFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DownscaleFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountTelemetry gets account level telemetry settings telemetry features and anonymization rules

Get account level telemetry settings. (telemetry features and anonymization rules)
*/
func (a *Client) GetAccountTelemetry(params *GetAccountTelemetryParams, opts ...ClientOption) (*GetAccountTelemetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountTelemetryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountTelemetry",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAccountTelemetry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountTelemetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountTelemetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountTelemetryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAccountTelemetryDefault gets default account level telemetry settings helps to set back the default values

Get default account level telemetry settings. Helps to set back the default values.
*/
func (a *Client) GetAccountTelemetryDefault(params *GetAccountTelemetryDefaultParams, opts ...ClientOption) (*GetAccountTelemetryDefaultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountTelemetryDefaultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountTelemetryDefault",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAccountTelemetryDefault",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountTelemetryDefaultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountTelemetryDefaultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccountTelemetryDefaultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAuditCredentialPrerequisites this API provides the audit credential prerequisites for the given cloud provider

Provides the the audit credential prerequisites for the given cloud provider.
*/
func (a *Client) GetAuditCredentialPrerequisites(params *GetAuditCredentialPrerequisitesParams, opts ...ClientOption) (*GetAuditCredentialPrerequisitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditCredentialPrerequisitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuditCredentialPrerequisites",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAuditCredentialPrerequisites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditCredentialPrerequisitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuditCredentialPrerequisitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAuditCredentialPrerequisitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAutomatedSyncEnvironmentStatus gets the the automated sync status for the environment

Gets the the automated sync status for the environment.
*/
func (a *Client) GetAutomatedSyncEnvironmentStatus(params *GetAutomatedSyncEnvironmentStatusParams, opts ...ClientOption) (*GetAutomatedSyncEnvironmentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutomatedSyncEnvironmentStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAutomatedSyncEnvironmentStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getAutomatedSyncEnvironmentStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAutomatedSyncEnvironmentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutomatedSyncEnvironmentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAutomatedSyncEnvironmentStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCredentialPrerequisites this API provides the credential prerequisites for the given cloud provider

Provides the the credential prerequisites for the given cloud provider.
*/
func (a *Client) GetCredentialPrerequisites(params *GetCredentialPrerequisitesParams, opts ...ClientOption) (*GetCredentialPrerequisitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialPrerequisitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCredentialPrerequisites",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getCredentialPrerequisites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCredentialPrerequisitesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCredentialPrerequisitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCredentialPrerequisitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEnvironmentSetting reads a configuration setting from the environment service

Read a configuration setting from the environment service.
*/
func (a *Client) GetEnvironmentSetting(params *GetEnvironmentSettingParams, opts ...ClientOption) (*GetEnvironmentSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEnvironmentSetting",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getEnvironmentSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEnvironmentSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEnvironmentUserSyncState returns the user synchronization state for an environment

Returns the user synchronization state for an environment.
*/
func (a *Client) GetEnvironmentUserSyncState(params *GetEnvironmentUserSyncStateParams, opts ...ClientOption) (*GetEnvironmentUserSyncStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentUserSyncStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEnvironmentUserSyncState",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getEnvironmentUserSyncState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentUserSyncStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentUserSyncStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEnvironmentUserSyncStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFreeipaLogDescriptors gathers log descriptors that are used for diagnostics collection

Gather log descriptors that are used for diagnostics collection.
*/
func (a *Client) GetFreeipaLogDescriptors(params *GetFreeipaLogDescriptorsParams, opts ...ClientOption) (*GetFreeipaLogDescriptorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreeipaLogDescriptorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFreeipaLogDescriptors",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getFreeipaLogDescriptors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFreeipaLogDescriptorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFreeipaLogDescriptorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFreeipaLogDescriptorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFreeipaStatus gets the status of the free IP a services

Gets the status of the FreeIPA nodes services and connectivity.
*/
func (a *Client) GetFreeipaStatus(params *GetFreeipaStatusParams, opts ...ClientOption) (*GetFreeipaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreeipaStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFreeipaStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getFreeipaStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFreeipaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFreeipaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFreeipaStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIDBrokerMappings gets all ID broker mappings for an environment

Gets all ID Broker mappings for an environment.
*/
func (a *Client) GetIDBrokerMappings(params *GetIDBrokerMappingsParams, opts ...ClientOption) (*GetIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIDBrokerMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIDBrokerMappingsSyncStatus gets ID broker mappings sync status

Gets the status of the most recent ID Broker mappings sync operation, if any.
*/
func (a *Client) GetIDBrokerMappingsSyncStatus(params *GetIDBrokerMappingsSyncStatusParams, opts ...ClientOption) (*GetIDBrokerMappingsSyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIDBrokerMappingsSyncStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIdBrokerMappingsSyncStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getIdBrokerMappingsSyncStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIDBrokerMappingsSyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIDBrokerMappingsSyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIDBrokerMappingsSyncStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKeytab retrieves a keytab for a user or machine user

Retrieves a keytab for a user or machine user.
*/
func (a *Client) GetKeytab(params *GetKeytabParams, opts ...ClientOption) (*GetKeytabOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeytabParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKeytab",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getKeytab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKeytabReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKeytabOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKeytabDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRepairFreeipaStatus returns status of the repair operation for the operation id

Returns status of the repair operation for the operation id. Operation Id should be one of the previously requested repair operation ids.
*/
func (a *Client) GetRepairFreeipaStatus(params *GetRepairFreeipaStatusParams, opts ...ClientOption) (*GetRepairFreeipaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepairFreeipaStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRepairFreeipaStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getRepairFreeipaStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepairFreeipaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepairFreeipaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRepairFreeipaStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRootCertificate this API provides contents of public certificate for an environment

This API provides the contents of the root public certificate for an environment. The contents are a base64 encoded blob between -----BEGIN CERTIFICATE----- and -----END CERTIFICATE-----. This certificate can be imported by end users to establish trust with environment resources.
*/
func (a *Client) GetRootCertificate(params *GetRootCertificateParams, opts ...ClientOption) (*GetRootCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRootCertificate",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/getRootCertificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRootCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListAuditCredentials lists audit credentials

Lists audit credentials.
*/
func (a *Client) ListAuditCredentials(params *ListAuditCredentialsParams, opts ...ClientOption) (*ListAuditCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuditCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAuditCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listAuditCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuditCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuditCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAuditCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCredentials lists credentials

Lists credentials.
*/
func (a *Client) ListCredentials(params *ListCredentialsParams, opts ...ClientOption) (*ListCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listCredentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCredentialsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEnvironments lists environments

Lists environments.
*/
func (a *Client) ListEnvironments(params *ListEnvironmentsParams, opts ...ClientOption) (*ListEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEnvironments",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEnvironmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListFreeipaDiagnostics lists recent free IP a diagnostics collections

List recent FreeIPA diagnostics collection
*/
func (a *Client) ListFreeipaDiagnostics(params *ListFreeipaDiagnosticsParams, opts ...ClientOption) (*ListFreeipaDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFreeipaDiagnosticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFreeipaDiagnostics",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listFreeipaDiagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFreeipaDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFreeipaDiagnosticsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListFreeipaDiagnosticsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListProxyConfigs lists proxy configs

Lists proxy configs.
*/
func (a *Client) ListProxyConfigs(params *ListProxyConfigsParams, opts ...ClientOption) (*ListProxyConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProxyConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listProxyConfigs",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/listProxyConfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProxyConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProxyConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListProxyConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepairFreeipa repairs the free IP a nodes

Repairs the FreeIPA nodes if they are in a non working state.
*/
func (a *Client) RepairFreeipa(params *RepairFreeipaParams, opts ...ClientOption) (*RepairFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairFreeipaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "repairFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/repairFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RepairFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepairFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepairFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RetryFreeipa retries the last failed operation on a free IP a

Retries the last failed operation on a FreeIPA.
*/
func (a *Client) RetryFreeipa(params *RetryFreeipaParams, opts ...ClientOption) (*RetryFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryFreeipaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retryFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/retryFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RetryFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetryFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RetryFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RotateSaltPassword rotates salt stack user password on free IP a instances

Rotate SaltStack user password on FreeIPA instances.
*/
func (a *Client) RotateSaltPassword(params *RotateSaltPasswordParams, opts ...ClientOption) (*RotateSaltPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateSaltPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotateSaltPassword",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/rotateSaltPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateSaltPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotateSaltPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RotateSaltPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAWSAuditCredential creates or updates the a w s audit credential for the account the credential is used for authorization to archive audit events to your cloud storage

Creates or updates the AWS audit credential for the account. The response will only contain details appropriate to AWS.
*/
func (a *Client) SetAWSAuditCredential(params *SetAWSAuditCredentialParams, opts ...ClientOption) (*SetAWSAuditCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAWSAuditCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAWSAuditCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setAWSAuditCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAWSAuditCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAWSAuditCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAWSAuditCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAccountTelemetry sets account level telemetry settings telemetry features and anonymization rules

Set account level telemetry settings. (telemetry features and anonymization rules)
*/
func (a *Client) SetAccountTelemetry(params *SetAccountTelemetryParams, opts ...ClientOption) (*SetAccountTelemetryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAccountTelemetryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAccountTelemetry",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setAccountTelemetry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAccountTelemetryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAccountTelemetryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAccountTelemetryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetAzureAuditCredential creates or updates the azure audit credential for the account the credential is used for authorization to archive audit events to your cloud storage

Creates or updates the Azure audit credential for the account. The response will only contain details appropriate to Azure.
*/
func (a *Client) SetAzureAuditCredential(params *SetAzureAuditCredentialParams, opts ...ClientOption) (*SetAzureAuditCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAzureAuditCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAzureAuditCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setAzureAuditCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAzureAuditCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAzureAuditCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetAzureAuditCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetCatalog sets a catalog for a free IP a installation

Sets a catalog for a FreeIPA installation.
*/
func (a *Client) SetCatalog(params *SetCatalogParams, opts ...ClientOption) (*SetCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setCatalog",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setCatalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetEndpointAccessGateway sets endpoint access gateway settings for the environment

Sets endpoint access gateway settings for the environment.
*/
func (a *Client) SetEndpointAccessGateway(params *SetEndpointAccessGatewayParams, opts ...ClientOption) (*SetEndpointAccessGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEndpointAccessGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEndpointAccessGateway",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setEndpointAccessGateway",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEndpointAccessGatewayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEndpointAccessGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEndpointAccessGatewayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetEnvironmentSetting reads a configuration setting from the environment service

Read a configuration setting from the environment service.
*/
func (a *Client) SetEnvironmentSetting(params *SetEnvironmentSettingParams, opts ...ClientOption) (*SetEnvironmentSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnvironmentSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEnvironmentSetting",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setEnvironmentSetting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnvironmentSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnvironmentSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEnvironmentSettingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetIDBrokerMappings sets all ID broker mappings for an environment

Sets all ID Broker mappings for an environment. Overwrites all existing mappings.
*/
func (a *Client) SetIDBrokerMappings(params *SetIDBrokerMappingsParams, opts ...ClientOption) (*SetIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetIDBrokerMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetPassword sets workload user s password and updates into all environments

Deprecated. Use 'iam set-workload-password' command instead.
*/
func (a *Client) SetPassword(params *SetPasswordParams, opts ...ClientOption) (*SetPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setPassword",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setPassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SetTelemetryFeatures configures environment level telemetry feature setting

Configure environment level telemetry feature setting.
*/
func (a *Client) SetTelemetryFeatures(params *SetTelemetryFeaturesParams, opts ...ClientOption) (*SetTelemetryFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTelemetryFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTelemetryFeatures",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/setTelemetryFeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTelemetryFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTelemetryFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetTelemetryFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartEnvironment starts an environment

Start an environment.
*/
func (a *Client) StartEnvironment(params *StartEnvironmentParams, opts ...ClientOption) (*StartEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/startEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartFreeIpaVerticalScaling initiates the vertical scaling on free IP a

Initiates the vertical scaling on FreeIPA.
*/
func (a *Client) StartFreeIpaVerticalScaling(params *StartFreeIpaVerticalScalingParams, opts ...ClientOption) (*StartFreeIpaVerticalScalingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartFreeIpaVerticalScalingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startFreeIpaVerticalScaling",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/startFreeIpaVerticalScaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartFreeIpaVerticalScalingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartFreeIpaVerticalScalingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartFreeIpaVerticalScalingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StopEnvironment stops an environment

Stop an environment.
*/
func (a *Client) StopEnvironment(params *StopEnvironmentParams, opts ...ClientOption) (*StopEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopEnvironment",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/stopEnvironment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StopEnvironmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncAllUsers synchronizes environments with all users and groups state with c d p

Synchronizes environments with all users and groups state with CDP.
*/
func (a *Client) SyncAllUsers(params *SyncAllUsersParams, opts ...ClientOption) (*SyncAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncAllUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncAllUsers",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncAllUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncAllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncAllUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncAllUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncIDBrokerMappings syncs all ID broker mappings for an environment

Syncs all ID Broker mappings to all datalake clusters in an environment.
*/
func (a *Client) SyncIDBrokerMappings(params *SyncIDBrokerMappingsParams, opts ...ClientOption) (*SyncIDBrokerMappingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncIDBrokerMappingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncIdBrokerMappings",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncIdBrokerMappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncIDBrokerMappingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncIDBrokerMappingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncIDBrokerMappingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncStatus returns status of the sync operation for the operation id

Returns status of the sync operation for the operation id. Operation Id should be one of the previously request sync operation.
*/
func (a *Client) SyncStatus(params *SyncStatusParams, opts ...ClientOption) (*SyncStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SyncUser synchronizes environments with single user to the free IP a servers

Synchronizes environments with single user to the FreeIPA servers.
*/
func (a *Client) SyncUser(params *SyncUserParams, opts ...ClientOption) (*SyncUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncUser",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/syncUser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SyncUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SynchronizeAllEnvironments synchronizes all environments in the calling account

Invokes the automated user sync service to synchronize all environments in the calling account.
*/
func (a *Client) SynchronizeAllEnvironments(params *SynchronizeAllEnvironmentsParams, opts ...ClientOption) (*SynchronizeAllEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSynchronizeAllEnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "synchronizeAllEnvironments",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/synchronizeAllEnvironments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SynchronizeAllEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SynchronizeAllEnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SynchronizeAllEnvironmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TestAccountTelemetryRules tests anonymization rules for account telemetry against text input

Test anonymization rules (for account telemetry) against text input.
*/
func (a *Client) TestAccountTelemetryRules(params *TestAccountTelemetryRulesParams, opts ...ClientOption) (*TestAccountTelemetryRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestAccountTelemetryRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testAccountTelemetryRules",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/testAccountTelemetryRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestAccountTelemetryRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestAccountTelemetryRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TestAccountTelemetryRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAwsDiskEncryptionParameters updates the a w s encryption key a r n for the environment

Updates the AWS encryption key ARN for the environment. Enables the server side encryption with CMK for newly created AWS resources for the existing environment.
*/
func (a *Client) UpdateAwsDiskEncryptionParameters(params *UpdateAwsDiskEncryptionParametersParams, opts ...ClientOption) (*UpdateAwsDiskEncryptionParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAwsDiskEncryptionParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAwsDiskEncryptionParameters",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/updateAwsDiskEncryptionParameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAwsDiskEncryptionParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAwsDiskEncryptionParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAwsDiskEncryptionParametersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAzureCredential updates a new certificate based azure credential that can be attached to an environment the credential is used for authorization to provision resources such as compute instances within your cloud provider account

Updates a certificate based Azure credential.
*/
func (a *Client) UpdateAzureCredential(params *UpdateAzureCredentialParams, opts ...ClientOption) (*UpdateAzureCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureCredential",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/updateAzureCredential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAzureCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAzureEncryptionResources updates the azure encryption resources for the environment

Updates the Azure encryption resources for the environment. Enables the SSE with CMK for newly created Azure resources for the existing environment.
*/
func (a *Client) UpdateAzureEncryptionResources(params *UpdateAzureEncryptionResourcesParams, opts ...ClientOption) (*UpdateAzureEncryptionResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureEncryptionResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureEncryptionResources",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/updateAzureEncryptionResources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureEncryptionResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureEncryptionResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAzureEncryptionResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateSubnet updates the subnet s of the given environment

Updates the subnet(s) of the given environment.
*/
func (a *Client) UpdateSubnet(params *UpdateSubnetParams, opts ...ClientOption) (*UpdateSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSubnet",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/updateSubnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSubnetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSubnetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeCcm upgrades cluster connectivity manager on the environment to the latest available version

Upgrades Cluster Connectivity Manager on the environment to the latest available version.
*/
func (a *Client) UpgradeCcm(params *UpgradeCcmParams, opts ...ClientOption) (*UpgradeCcmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCcmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeCcm",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/upgradeCcm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeCcmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCcmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeCcmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpgradeFreeipa upgrades free IP a to the latest or defined image

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) UpgradeFreeipa(params *UpgradeFreeipaParams, opts ...ClientOption) (*UpgradeFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeFreeipaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/upgradeFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpgradeFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradeFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpscaleFreeipa upscales free IP a instances

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) UpscaleFreeipa(params *UpscaleFreeipaParams, opts ...ClientOption) (*UpscaleFreeipaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpscaleFreeipaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upscaleFreeipa",
		Method:             "POST",
		PathPattern:        "/api/v1/environments2/upscaleFreeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpscaleFreeipaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpscaleFreeipaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpscaleFreeipaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
