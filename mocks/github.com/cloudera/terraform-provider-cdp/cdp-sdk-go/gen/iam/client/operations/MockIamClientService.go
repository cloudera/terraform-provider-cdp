// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	operations "github.com/cloudera/terraform-provider-cdp/cdp-sdk-go/gen/iam/client/operations"
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockIamClientService is an autogenerated mock type for the ClientService type
type MockIamClientService struct {
	mock.Mock
}

type MockIamClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIamClientService) EXPECT() *MockIamClientService_Expecter {
	return &MockIamClientService_Expecter{mock: &_m.Mock}
}

// AddMachineUserToGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AddMachineUserToGroup(params *operations.AddMachineUserToGroupParams, opts ...operations.ClientOption) (*operations.AddMachineUserToGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddMachineUserToGroup")
	}

	var r0 *operations.AddMachineUserToGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AddMachineUserToGroupParams, ...operations.ClientOption) (*operations.AddMachineUserToGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AddMachineUserToGroupParams, ...operations.ClientOption) *operations.AddMachineUserToGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AddMachineUserToGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AddMachineUserToGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AddMachineUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMachineUserToGroup'
type MockIamClientService_AddMachineUserToGroup_Call struct {
	*mock.Call
}

// AddMachineUserToGroup is a helper method to define mock.On call
//   - params *operations.AddMachineUserToGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AddMachineUserToGroup(params interface{}, opts ...interface{}) *MockIamClientService_AddMachineUserToGroup_Call {
	return &MockIamClientService_AddMachineUserToGroup_Call{Call: _e.mock.On("AddMachineUserToGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AddMachineUserToGroup_Call) Run(run func(params *operations.AddMachineUserToGroupParams, opts ...operations.ClientOption)) *MockIamClientService_AddMachineUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AddMachineUserToGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AddMachineUserToGroup_Call) Return(_a0 *operations.AddMachineUserToGroupOK, _a1 error) *MockIamClientService_AddMachineUserToGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AddMachineUserToGroup_Call) RunAndReturn(run func(*operations.AddMachineUserToGroupParams, ...operations.ClientOption) (*operations.AddMachineUserToGroupOK, error)) *MockIamClientService_AddMachineUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddSSHPublicKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AddSSHPublicKey(params *operations.AddSSHPublicKeyParams, opts ...operations.ClientOption) (*operations.AddSSHPublicKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddSSHPublicKey")
	}

	var r0 *operations.AddSSHPublicKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AddSSHPublicKeyParams, ...operations.ClientOption) (*operations.AddSSHPublicKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AddSSHPublicKeyParams, ...operations.ClientOption) *operations.AddSSHPublicKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AddSSHPublicKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AddSSHPublicKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AddSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSSHPublicKey'
type MockIamClientService_AddSSHPublicKey_Call struct {
	*mock.Call
}

// AddSSHPublicKey is a helper method to define mock.On call
//   - params *operations.AddSSHPublicKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AddSSHPublicKey(params interface{}, opts ...interface{}) *MockIamClientService_AddSSHPublicKey_Call {
	return &MockIamClientService_AddSSHPublicKey_Call{Call: _e.mock.On("AddSSHPublicKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AddSSHPublicKey_Call) Run(run func(params *operations.AddSSHPublicKeyParams, opts ...operations.ClientOption)) *MockIamClientService_AddSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AddSSHPublicKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AddSSHPublicKey_Call) Return(_a0 *operations.AddSSHPublicKeyOK, _a1 error) *MockIamClientService_AddSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AddSSHPublicKey_Call) RunAndReturn(run func(*operations.AddSSHPublicKeyParams, ...operations.ClientOption) (*operations.AddSSHPublicKeyOK, error)) *MockIamClientService_AddSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AddUserToGroup(params *operations.AddUserToGroupParams, opts ...operations.ClientOption) (*operations.AddUserToGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 *operations.AddUserToGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AddUserToGroupParams, ...operations.ClientOption) (*operations.AddUserToGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AddUserToGroupParams, ...operations.ClientOption) *operations.AddUserToGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AddUserToGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AddUserToGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AddUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroup'
type MockIamClientService_AddUserToGroup_Call struct {
	*mock.Call
}

// AddUserToGroup is a helper method to define mock.On call
//   - params *operations.AddUserToGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AddUserToGroup(params interface{}, opts ...interface{}) *MockIamClientService_AddUserToGroup_Call {
	return &MockIamClientService_AddUserToGroup_Call{Call: _e.mock.On("AddUserToGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AddUserToGroup_Call) Run(run func(params *operations.AddUserToGroupParams, opts ...operations.ClientOption)) *MockIamClientService_AddUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AddUserToGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AddUserToGroup_Call) Return(_a0 *operations.AddUserToGroupOK, _a1 error) *MockIamClientService_AddUserToGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AddUserToGroup_Call) RunAndReturn(run func(*operations.AddUserToGroupParams, ...operations.ClientOption) (*operations.AddUserToGroupOK, error)) *MockIamClientService_AddUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AssignAzureCloudIdentity provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignAzureCloudIdentity(params *operations.AssignAzureCloudIdentityParams, opts ...operations.ClientOption) (*operations.AssignAzureCloudIdentityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignAzureCloudIdentity")
	}

	var r0 *operations.AssignAzureCloudIdentityOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignAzureCloudIdentityParams, ...operations.ClientOption) (*operations.AssignAzureCloudIdentityOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignAzureCloudIdentityParams, ...operations.ClientOption) *operations.AssignAzureCloudIdentityOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignAzureCloudIdentityOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignAzureCloudIdentityParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignAzureCloudIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignAzureCloudIdentity'
type MockIamClientService_AssignAzureCloudIdentity_Call struct {
	*mock.Call
}

// AssignAzureCloudIdentity is a helper method to define mock.On call
//   - params *operations.AssignAzureCloudIdentityParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignAzureCloudIdentity(params interface{}, opts ...interface{}) *MockIamClientService_AssignAzureCloudIdentity_Call {
	return &MockIamClientService_AssignAzureCloudIdentity_Call{Call: _e.mock.On("AssignAzureCloudIdentity",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignAzureCloudIdentity_Call) Run(run func(params *operations.AssignAzureCloudIdentityParams, opts ...operations.ClientOption)) *MockIamClientService_AssignAzureCloudIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignAzureCloudIdentityParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignAzureCloudIdentity_Call) Return(_a0 *operations.AssignAzureCloudIdentityOK, _a1 error) *MockIamClientService_AssignAzureCloudIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignAzureCloudIdentity_Call) RunAndReturn(run func(*operations.AssignAzureCloudIdentityParams, ...operations.ClientOption) (*operations.AssignAzureCloudIdentityOK, error)) *MockIamClientService_AssignAzureCloudIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGroupResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignGroupResourceRole(params *operations.AssignGroupResourceRoleParams, opts ...operations.ClientOption) (*operations.AssignGroupResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignGroupResourceRole")
	}

	var r0 *operations.AssignGroupResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignGroupResourceRoleParams, ...operations.ClientOption) (*operations.AssignGroupResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignGroupResourceRoleParams, ...operations.ClientOption) *operations.AssignGroupResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignGroupResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignGroupResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignGroupResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGroupResourceRole'
type MockIamClientService_AssignGroupResourceRole_Call struct {
	*mock.Call
}

// AssignGroupResourceRole is a helper method to define mock.On call
//   - params *operations.AssignGroupResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignGroupResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignGroupResourceRole_Call {
	return &MockIamClientService_AssignGroupResourceRole_Call{Call: _e.mock.On("AssignGroupResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignGroupResourceRole_Call) Run(run func(params *operations.AssignGroupResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignGroupResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignGroupResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignGroupResourceRole_Call) Return(_a0 *operations.AssignGroupResourceRoleOK, _a1 error) *MockIamClientService_AssignGroupResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignGroupResourceRole_Call) RunAndReturn(run func(*operations.AssignGroupResourceRoleParams, ...operations.ClientOption) (*operations.AssignGroupResourceRoleOK, error)) *MockIamClientService_AssignGroupResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// AssignGroupRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignGroupRole(params *operations.AssignGroupRoleParams, opts ...operations.ClientOption) (*operations.AssignGroupRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignGroupRole")
	}

	var r0 *operations.AssignGroupRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignGroupRoleParams, ...operations.ClientOption) (*operations.AssignGroupRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignGroupRoleParams, ...operations.ClientOption) *operations.AssignGroupRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignGroupRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignGroupRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignGroupRole'
type MockIamClientService_AssignGroupRole_Call struct {
	*mock.Call
}

// AssignGroupRole is a helper method to define mock.On call
//   - params *operations.AssignGroupRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignGroupRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignGroupRole_Call {
	return &MockIamClientService_AssignGroupRole_Call{Call: _e.mock.On("AssignGroupRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignGroupRole_Call) Run(run func(params *operations.AssignGroupRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignGroupRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignGroupRole_Call) Return(_a0 *operations.AssignGroupRoleOK, _a1 error) *MockIamClientService_AssignGroupRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignGroupRole_Call) RunAndReturn(run func(*operations.AssignGroupRoleParams, ...operations.ClientOption) (*operations.AssignGroupRoleOK, error)) *MockIamClientService_AssignGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// AssignMachineUserResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignMachineUserResourceRole(params *operations.AssignMachineUserResourceRoleParams, opts ...operations.ClientOption) (*operations.AssignMachineUserResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignMachineUserResourceRole")
	}

	var r0 *operations.AssignMachineUserResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignMachineUserResourceRoleParams, ...operations.ClientOption) (*operations.AssignMachineUserResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignMachineUserResourceRoleParams, ...operations.ClientOption) *operations.AssignMachineUserResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignMachineUserResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignMachineUserResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignMachineUserResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignMachineUserResourceRole'
type MockIamClientService_AssignMachineUserResourceRole_Call struct {
	*mock.Call
}

// AssignMachineUserResourceRole is a helper method to define mock.On call
//   - params *operations.AssignMachineUserResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignMachineUserResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignMachineUserResourceRole_Call {
	return &MockIamClientService_AssignMachineUserResourceRole_Call{Call: _e.mock.On("AssignMachineUserResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignMachineUserResourceRole_Call) Run(run func(params *operations.AssignMachineUserResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignMachineUserResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignMachineUserResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignMachineUserResourceRole_Call) Return(_a0 *operations.AssignMachineUserResourceRoleOK, _a1 error) *MockIamClientService_AssignMachineUserResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignMachineUserResourceRole_Call) RunAndReturn(run func(*operations.AssignMachineUserResourceRoleParams, ...operations.ClientOption) (*operations.AssignMachineUserResourceRoleOK, error)) *MockIamClientService_AssignMachineUserResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// AssignMachineUserRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignMachineUserRole(params *operations.AssignMachineUserRoleParams, opts ...operations.ClientOption) (*operations.AssignMachineUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignMachineUserRole")
	}

	var r0 *operations.AssignMachineUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignMachineUserRoleParams, ...operations.ClientOption) (*operations.AssignMachineUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignMachineUserRoleParams, ...operations.ClientOption) *operations.AssignMachineUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignMachineUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignMachineUserRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignMachineUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignMachineUserRole'
type MockIamClientService_AssignMachineUserRole_Call struct {
	*mock.Call
}

// AssignMachineUserRole is a helper method to define mock.On call
//   - params *operations.AssignMachineUserRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignMachineUserRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignMachineUserRole_Call {
	return &MockIamClientService_AssignMachineUserRole_Call{Call: _e.mock.On("AssignMachineUserRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignMachineUserRole_Call) Run(run func(params *operations.AssignMachineUserRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignMachineUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignMachineUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignMachineUserRole_Call) Return(_a0 *operations.AssignMachineUserRoleOK, _a1 error) *MockIamClientService_AssignMachineUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignMachineUserRole_Call) RunAndReturn(run func(*operations.AssignMachineUserRoleParams, ...operations.ClientOption) (*operations.AssignMachineUserRoleOK, error)) *MockIamClientService_AssignMachineUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// AssignServicePrincipalAzureCloudIdentity provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignServicePrincipalAzureCloudIdentity(params *operations.AssignServicePrincipalAzureCloudIdentityParams, opts ...operations.ClientOption) (*operations.AssignServicePrincipalAzureCloudIdentityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignServicePrincipalAzureCloudIdentity")
	}

	var r0 *operations.AssignServicePrincipalAzureCloudIdentityOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) (*operations.AssignServicePrincipalAzureCloudIdentityOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) *operations.AssignServicePrincipalAzureCloudIdentityOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignServicePrincipalAzureCloudIdentityOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignServicePrincipalAzureCloudIdentity'
type MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call struct {
	*mock.Call
}

// AssignServicePrincipalAzureCloudIdentity is a helper method to define mock.On call
//   - params *operations.AssignServicePrincipalAzureCloudIdentityParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignServicePrincipalAzureCloudIdentity(params interface{}, opts ...interface{}) *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call {
	return &MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call{Call: _e.mock.On("AssignServicePrincipalAzureCloudIdentity",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call) Run(run func(params *operations.AssignServicePrincipalAzureCloudIdentityParams, opts ...operations.ClientOption)) *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignServicePrincipalAzureCloudIdentityParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call) Return(_a0 *operations.AssignServicePrincipalAzureCloudIdentityOK, _a1 error) *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call) RunAndReturn(run func(*operations.AssignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) (*operations.AssignServicePrincipalAzureCloudIdentityOK, error)) *MockIamClientService_AssignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// AssignUserResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignUserResourceRole(params *operations.AssignUserResourceRoleParams, opts ...operations.ClientOption) (*operations.AssignUserResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignUserResourceRole")
	}

	var r0 *operations.AssignUserResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignUserResourceRoleParams, ...operations.ClientOption) (*operations.AssignUserResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignUserResourceRoleParams, ...operations.ClientOption) *operations.AssignUserResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignUserResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignUserResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignUserResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignUserResourceRole'
type MockIamClientService_AssignUserResourceRole_Call struct {
	*mock.Call
}

// AssignUserResourceRole is a helper method to define mock.On call
//   - params *operations.AssignUserResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignUserResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignUserResourceRole_Call {
	return &MockIamClientService_AssignUserResourceRole_Call{Call: _e.mock.On("AssignUserResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignUserResourceRole_Call) Run(run func(params *operations.AssignUserResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignUserResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignUserResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignUserResourceRole_Call) Return(_a0 *operations.AssignUserResourceRoleOK, _a1 error) *MockIamClientService_AssignUserResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignUserResourceRole_Call) RunAndReturn(run func(*operations.AssignUserResourceRoleParams, ...operations.ClientOption) (*operations.AssignUserResourceRoleOK, error)) *MockIamClientService_AssignUserResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// AssignUserRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) AssignUserRole(params *operations.AssignUserRoleParams, opts ...operations.ClientOption) (*operations.AssignUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignUserRole")
	}

	var r0 *operations.AssignUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.AssignUserRoleParams, ...operations.ClientOption) (*operations.AssignUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.AssignUserRoleParams, ...operations.ClientOption) *operations.AssignUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AssignUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.AssignUserRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_AssignUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignUserRole'
type MockIamClientService_AssignUserRole_Call struct {
	*mock.Call
}

// AssignUserRole is a helper method to define mock.On call
//   - params *operations.AssignUserRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) AssignUserRole(params interface{}, opts ...interface{}) *MockIamClientService_AssignUserRole_Call {
	return &MockIamClientService_AssignUserRole_Call{Call: _e.mock.On("AssignUserRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_AssignUserRole_Call) Run(run func(params *operations.AssignUserRoleParams, opts ...operations.ClientOption)) *MockIamClientService_AssignUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.AssignUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_AssignUserRole_Call) Return(_a0 *operations.AssignUserRoleOK, _a1 error) *MockIamClientService_AssignUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_AssignUserRole_Call) RunAndReturn(run func(*operations.AssignUserRoleParams, ...operations.ClientOption) (*operations.AssignUserRoleOK, error)) *MockIamClientService_AssignUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateGroup(params *operations.CreateGroupParams, opts ...operations.ClientOption) (*operations.CreateGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *operations.CreateGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateGroupParams, ...operations.ClientOption) (*operations.CreateGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateGroupParams, ...operations.ClientOption) *operations.CreateGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockIamClientService_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - params *operations.CreateGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateGroup(params interface{}, opts ...interface{}) *MockIamClientService_CreateGroup_Call {
	return &MockIamClientService_CreateGroup_Call{Call: _e.mock.On("CreateGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateGroup_Call) Run(run func(params *operations.CreateGroupParams, opts ...operations.ClientOption)) *MockIamClientService_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateGroup_Call) Return(_a0 *operations.CreateGroupOK, _a1 error) *MockIamClientService_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateGroup_Call) RunAndReturn(run func(*operations.CreateGroupParams, ...operations.ClientOption) (*operations.CreateGroupOK, error)) *MockIamClientService_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMachineUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateMachineUser(params *operations.CreateMachineUserParams, opts ...operations.ClientOption) (*operations.CreateMachineUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachineUser")
	}

	var r0 *operations.CreateMachineUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateMachineUserParams, ...operations.ClientOption) (*operations.CreateMachineUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateMachineUserParams, ...operations.ClientOption) *operations.CreateMachineUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateMachineUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateMachineUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateMachineUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMachineUser'
type MockIamClientService_CreateMachineUser_Call struct {
	*mock.Call
}

// CreateMachineUser is a helper method to define mock.On call
//   - params *operations.CreateMachineUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateMachineUser(params interface{}, opts ...interface{}) *MockIamClientService_CreateMachineUser_Call {
	return &MockIamClientService_CreateMachineUser_Call{Call: _e.mock.On("CreateMachineUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateMachineUser_Call) Run(run func(params *operations.CreateMachineUserParams, opts ...operations.ClientOption)) *MockIamClientService_CreateMachineUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateMachineUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateMachineUser_Call) Return(_a0 *operations.CreateMachineUserOK, _a1 error) *MockIamClientService_CreateMachineUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateMachineUser_Call) RunAndReturn(run func(*operations.CreateMachineUserParams, ...operations.ClientOption) (*operations.CreateMachineUserOK, error)) *MockIamClientService_CreateMachineUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMachineUserAccessKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateMachineUserAccessKey(params *operations.CreateMachineUserAccessKeyParams, opts ...operations.ClientOption) (*operations.CreateMachineUserAccessKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMachineUserAccessKey")
	}

	var r0 *operations.CreateMachineUserAccessKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateMachineUserAccessKeyParams, ...operations.ClientOption) (*operations.CreateMachineUserAccessKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateMachineUserAccessKeyParams, ...operations.ClientOption) *operations.CreateMachineUserAccessKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateMachineUserAccessKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateMachineUserAccessKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateMachineUserAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMachineUserAccessKey'
type MockIamClientService_CreateMachineUserAccessKey_Call struct {
	*mock.Call
}

// CreateMachineUserAccessKey is a helper method to define mock.On call
//   - params *operations.CreateMachineUserAccessKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateMachineUserAccessKey(params interface{}, opts ...interface{}) *MockIamClientService_CreateMachineUserAccessKey_Call {
	return &MockIamClientService_CreateMachineUserAccessKey_Call{Call: _e.mock.On("CreateMachineUserAccessKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateMachineUserAccessKey_Call) Run(run func(params *operations.CreateMachineUserAccessKeyParams, opts ...operations.ClientOption)) *MockIamClientService_CreateMachineUserAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateMachineUserAccessKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateMachineUserAccessKey_Call) Return(_a0 *operations.CreateMachineUserAccessKeyOK, _a1 error) *MockIamClientService_CreateMachineUserAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateMachineUserAccessKey_Call) RunAndReturn(run func(*operations.CreateMachineUserAccessKeyParams, ...operations.ClientOption) (*operations.CreateMachineUserAccessKeyOK, error)) *MockIamClientService_CreateMachineUserAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSamlProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateSamlProvider(params *operations.CreateSamlProviderParams, opts ...operations.ClientOption) (*operations.CreateSamlProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSamlProvider")
	}

	var r0 *operations.CreateSamlProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateSamlProviderParams, ...operations.ClientOption) (*operations.CreateSamlProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateSamlProviderParams, ...operations.ClientOption) *operations.CreateSamlProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateSamlProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateSamlProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateSamlProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSamlProvider'
type MockIamClientService_CreateSamlProvider_Call struct {
	*mock.Call
}

// CreateSamlProvider is a helper method to define mock.On call
//   - params *operations.CreateSamlProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateSamlProvider(params interface{}, opts ...interface{}) *MockIamClientService_CreateSamlProvider_Call {
	return &MockIamClientService_CreateSamlProvider_Call{Call: _e.mock.On("CreateSamlProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateSamlProvider_Call) Run(run func(params *operations.CreateSamlProviderParams, opts ...operations.ClientOption)) *MockIamClientService_CreateSamlProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateSamlProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateSamlProvider_Call) Return(_a0 *operations.CreateSamlProviderOK, _a1 error) *MockIamClientService_CreateSamlProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateSamlProvider_Call) RunAndReturn(run func(*operations.CreateSamlProviderParams, ...operations.ClientOption) (*operations.CreateSamlProviderOK, error)) *MockIamClientService_CreateSamlProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScimAccessToken provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateScimAccessToken(params *operations.CreateScimAccessTokenParams, opts ...operations.ClientOption) (*operations.CreateScimAccessTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateScimAccessToken")
	}

	var r0 *operations.CreateScimAccessTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateScimAccessTokenParams, ...operations.ClientOption) (*operations.CreateScimAccessTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateScimAccessTokenParams, ...operations.ClientOption) *operations.CreateScimAccessTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateScimAccessTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateScimAccessTokenParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateScimAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScimAccessToken'
type MockIamClientService_CreateScimAccessToken_Call struct {
	*mock.Call
}

// CreateScimAccessToken is a helper method to define mock.On call
//   - params *operations.CreateScimAccessTokenParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateScimAccessToken(params interface{}, opts ...interface{}) *MockIamClientService_CreateScimAccessToken_Call {
	return &MockIamClientService_CreateScimAccessToken_Call{Call: _e.mock.On("CreateScimAccessToken",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateScimAccessToken_Call) Run(run func(params *operations.CreateScimAccessTokenParams, opts ...operations.ClientOption)) *MockIamClientService_CreateScimAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateScimAccessTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateScimAccessToken_Call) Return(_a0 *operations.CreateScimAccessTokenOK, _a1 error) *MockIamClientService_CreateScimAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateScimAccessToken_Call) RunAndReturn(run func(*operations.CreateScimAccessTokenParams, ...operations.ClientOption) (*operations.CreateScimAccessTokenOK, error)) *MockIamClientService_CreateScimAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateUser(params *operations.CreateUserParams, opts ...operations.ClientOption) (*operations.CreateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *operations.CreateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateUserParams, ...operations.ClientOption) (*operations.CreateUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateUserParams, ...operations.ClientOption) *operations.CreateUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIamClientService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - params *operations.CreateUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateUser(params interface{}, opts ...interface{}) *MockIamClientService_CreateUser_Call {
	return &MockIamClientService_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateUser_Call) Run(run func(params *operations.CreateUserParams, opts ...operations.ClientOption)) *MockIamClientService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateUser_Call) Return(_a0 *operations.CreateUserOK, _a1 error) *MockIamClientService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateUser_Call) RunAndReturn(run func(*operations.CreateUserParams, ...operations.ClientOption) (*operations.CreateUserOK, error)) *MockIamClientService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserAccessKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) CreateUserAccessKey(params *operations.CreateUserAccessKeyParams, opts ...operations.ClientOption) (*operations.CreateUserAccessKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAccessKey")
	}

	var r0 *operations.CreateUserAccessKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.CreateUserAccessKeyParams, ...operations.ClientOption) (*operations.CreateUserAccessKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.CreateUserAccessKeyParams, ...operations.ClientOption) *operations.CreateUserAccessKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateUserAccessKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.CreateUserAccessKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_CreateUserAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserAccessKey'
type MockIamClientService_CreateUserAccessKey_Call struct {
	*mock.Call
}

// CreateUserAccessKey is a helper method to define mock.On call
//   - params *operations.CreateUserAccessKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) CreateUserAccessKey(params interface{}, opts ...interface{}) *MockIamClientService_CreateUserAccessKey_Call {
	return &MockIamClientService_CreateUserAccessKey_Call{Call: _e.mock.On("CreateUserAccessKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_CreateUserAccessKey_Call) Run(run func(params *operations.CreateUserAccessKeyParams, opts ...operations.ClientOption)) *MockIamClientService_CreateUserAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.CreateUserAccessKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_CreateUserAccessKey_Call) Return(_a0 *operations.CreateUserAccessKeyOK, _a1 error) *MockIamClientService_CreateUserAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_CreateUserAccessKey_Call) RunAndReturn(run func(*operations.CreateUserAccessKeyParams, ...operations.ClientOption) (*operations.CreateUserAccessKeyOK, error)) *MockIamClientService_CreateUserAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteAccessKey(params *operations.DeleteAccessKeyParams, opts ...operations.ClientOption) (*operations.DeleteAccessKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessKey")
	}

	var r0 *operations.DeleteAccessKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteAccessKeyParams, ...operations.ClientOption) (*operations.DeleteAccessKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteAccessKeyParams, ...operations.ClientOption) *operations.DeleteAccessKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteAccessKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteAccessKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessKey'
type MockIamClientService_DeleteAccessKey_Call struct {
	*mock.Call
}

// DeleteAccessKey is a helper method to define mock.On call
//   - params *operations.DeleteAccessKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteAccessKey(params interface{}, opts ...interface{}) *MockIamClientService_DeleteAccessKey_Call {
	return &MockIamClientService_DeleteAccessKey_Call{Call: _e.mock.On("DeleteAccessKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteAccessKey_Call) Run(run func(params *operations.DeleteAccessKeyParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteAccessKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteAccessKey_Call) Return(_a0 *operations.DeleteAccessKeyOK, _a1 error) *MockIamClientService_DeleteAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteAccessKey_Call) RunAndReturn(run func(*operations.DeleteAccessKeyParams, ...operations.ClientOption) (*operations.DeleteAccessKeyOK, error)) *MockIamClientService_DeleteAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteGroup(params *operations.DeleteGroupParams, opts ...operations.ClientOption) (*operations.DeleteGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *operations.DeleteGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteGroupParams, ...operations.ClientOption) (*operations.DeleteGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteGroupParams, ...operations.ClientOption) *operations.DeleteGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockIamClientService_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - params *operations.DeleteGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteGroup(params interface{}, opts ...interface{}) *MockIamClientService_DeleteGroup_Call {
	return &MockIamClientService_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteGroup_Call) Run(run func(params *operations.DeleteGroupParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteGroup_Call) Return(_a0 *operations.DeleteGroupOK, _a1 error) *MockIamClientService_DeleteGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteGroup_Call) RunAndReturn(run func(*operations.DeleteGroupParams, ...operations.ClientOption) (*operations.DeleteGroupOK, error)) *MockIamClientService_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMachineUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteMachineUser(params *operations.DeleteMachineUserParams, opts ...operations.ClientOption) (*operations.DeleteMachineUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMachineUser")
	}

	var r0 *operations.DeleteMachineUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteMachineUserParams, ...operations.ClientOption) (*operations.DeleteMachineUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteMachineUserParams, ...operations.ClientOption) *operations.DeleteMachineUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteMachineUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteMachineUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteMachineUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMachineUser'
type MockIamClientService_DeleteMachineUser_Call struct {
	*mock.Call
}

// DeleteMachineUser is a helper method to define mock.On call
//   - params *operations.DeleteMachineUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteMachineUser(params interface{}, opts ...interface{}) *MockIamClientService_DeleteMachineUser_Call {
	return &MockIamClientService_DeleteMachineUser_Call{Call: _e.mock.On("DeleteMachineUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteMachineUser_Call) Run(run func(params *operations.DeleteMachineUserParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteMachineUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteMachineUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteMachineUser_Call) Return(_a0 *operations.DeleteMachineUserOK, _a1 error) *MockIamClientService_DeleteMachineUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteMachineUser_Call) RunAndReturn(run func(*operations.DeleteMachineUserParams, ...operations.ClientOption) (*operations.DeleteMachineUserOK, error)) *MockIamClientService_DeleteMachineUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSSHPublicKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteSSHPublicKey(params *operations.DeleteSSHPublicKeyParams, opts ...operations.ClientOption) (*operations.DeleteSSHPublicKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSSHPublicKey")
	}

	var r0 *operations.DeleteSSHPublicKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteSSHPublicKeyParams, ...operations.ClientOption) (*operations.DeleteSSHPublicKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteSSHPublicKeyParams, ...operations.ClientOption) *operations.DeleteSSHPublicKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteSSHPublicKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteSSHPublicKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSSHPublicKey'
type MockIamClientService_DeleteSSHPublicKey_Call struct {
	*mock.Call
}

// DeleteSSHPublicKey is a helper method to define mock.On call
//   - params *operations.DeleteSSHPublicKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteSSHPublicKey(params interface{}, opts ...interface{}) *MockIamClientService_DeleteSSHPublicKey_Call {
	return &MockIamClientService_DeleteSSHPublicKey_Call{Call: _e.mock.On("DeleteSSHPublicKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteSSHPublicKey_Call) Run(run func(params *operations.DeleteSSHPublicKeyParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteSSHPublicKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteSSHPublicKey_Call) Return(_a0 *operations.DeleteSSHPublicKeyOK, _a1 error) *MockIamClientService_DeleteSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteSSHPublicKey_Call) RunAndReturn(run func(*operations.DeleteSSHPublicKeyParams, ...operations.ClientOption) (*operations.DeleteSSHPublicKeyOK, error)) *MockIamClientService_DeleteSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSamlProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteSamlProvider(params *operations.DeleteSamlProviderParams, opts ...operations.ClientOption) (*operations.DeleteSamlProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSamlProvider")
	}

	var r0 *operations.DeleteSamlProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteSamlProviderParams, ...operations.ClientOption) (*operations.DeleteSamlProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteSamlProviderParams, ...operations.ClientOption) *operations.DeleteSamlProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteSamlProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteSamlProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteSamlProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSamlProvider'
type MockIamClientService_DeleteSamlProvider_Call struct {
	*mock.Call
}

// DeleteSamlProvider is a helper method to define mock.On call
//   - params *operations.DeleteSamlProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteSamlProvider(params interface{}, opts ...interface{}) *MockIamClientService_DeleteSamlProvider_Call {
	return &MockIamClientService_DeleteSamlProvider_Call{Call: _e.mock.On("DeleteSamlProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteSamlProvider_Call) Run(run func(params *operations.DeleteSamlProviderParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteSamlProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteSamlProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteSamlProvider_Call) Return(_a0 *operations.DeleteSamlProviderOK, _a1 error) *MockIamClientService_DeleteSamlProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteSamlProvider_Call) RunAndReturn(run func(*operations.DeleteSamlProviderParams, ...operations.ClientOption) (*operations.DeleteSamlProviderOK, error)) *MockIamClientService_DeleteSamlProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScimAccessToken provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteScimAccessToken(params *operations.DeleteScimAccessTokenParams, opts ...operations.ClientOption) (*operations.DeleteScimAccessTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScimAccessToken")
	}

	var r0 *operations.DeleteScimAccessTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteScimAccessTokenParams, ...operations.ClientOption) (*operations.DeleteScimAccessTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteScimAccessTokenParams, ...operations.ClientOption) *operations.DeleteScimAccessTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteScimAccessTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteScimAccessTokenParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteScimAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScimAccessToken'
type MockIamClientService_DeleteScimAccessToken_Call struct {
	*mock.Call
}

// DeleteScimAccessToken is a helper method to define mock.On call
//   - params *operations.DeleteScimAccessTokenParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteScimAccessToken(params interface{}, opts ...interface{}) *MockIamClientService_DeleteScimAccessToken_Call {
	return &MockIamClientService_DeleteScimAccessToken_Call{Call: _e.mock.On("DeleteScimAccessToken",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteScimAccessToken_Call) Run(run func(params *operations.DeleteScimAccessTokenParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteScimAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteScimAccessTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteScimAccessToken_Call) Return(_a0 *operations.DeleteScimAccessTokenOK, _a1 error) *MockIamClientService_DeleteScimAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteScimAccessToken_Call) RunAndReturn(run func(*operations.DeleteScimAccessTokenParams, ...operations.ClientOption) (*operations.DeleteScimAccessTokenOK, error)) *MockIamClientService_DeleteScimAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DeleteUser(params *operations.DeleteUserParams, opts ...operations.ClientOption) (*operations.DeleteUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *operations.DeleteUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DeleteUserParams, ...operations.ClientOption) (*operations.DeleteUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DeleteUserParams, ...operations.ClientOption) *operations.DeleteUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DeleteUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIamClientService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - params *operations.DeleteUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DeleteUser(params interface{}, opts ...interface{}) *MockIamClientService_DeleteUser_Call {
	return &MockIamClientService_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DeleteUser_Call) Run(run func(params *operations.DeleteUserParams, opts ...operations.ClientOption)) *MockIamClientService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DeleteUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DeleteUser_Call) Return(_a0 *operations.DeleteUserOK, _a1 error) *MockIamClientService_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DeleteUser_Call) RunAndReturn(run func(*operations.DeleteUserParams, ...operations.ClientOption) (*operations.DeleteUserOK, error)) *MockIamClientService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSSHPublicKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DescribeSSHPublicKey(params *operations.DescribeSSHPublicKeyParams, opts ...operations.ClientOption) (*operations.DescribeSSHPublicKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSSHPublicKey")
	}

	var r0 *operations.DescribeSSHPublicKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DescribeSSHPublicKeyParams, ...operations.ClientOption) (*operations.DescribeSSHPublicKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DescribeSSHPublicKeyParams, ...operations.ClientOption) *operations.DescribeSSHPublicKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DescribeSSHPublicKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DescribeSSHPublicKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DescribeSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSSHPublicKey'
type MockIamClientService_DescribeSSHPublicKey_Call struct {
	*mock.Call
}

// DescribeSSHPublicKey is a helper method to define mock.On call
//   - params *operations.DescribeSSHPublicKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DescribeSSHPublicKey(params interface{}, opts ...interface{}) *MockIamClientService_DescribeSSHPublicKey_Call {
	return &MockIamClientService_DescribeSSHPublicKey_Call{Call: _e.mock.On("DescribeSSHPublicKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DescribeSSHPublicKey_Call) Run(run func(params *operations.DescribeSSHPublicKeyParams, opts ...operations.ClientOption)) *MockIamClientService_DescribeSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DescribeSSHPublicKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DescribeSSHPublicKey_Call) Return(_a0 *operations.DescribeSSHPublicKeyOK, _a1 error) *MockIamClientService_DescribeSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DescribeSSHPublicKey_Call) RunAndReturn(run func(*operations.DescribeSSHPublicKeyParams, ...operations.ClientOption) (*operations.DescribeSSHPublicKeyOK, error)) *MockIamClientService_DescribeSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSamlProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DescribeSamlProvider(params *operations.DescribeSamlProviderParams, opts ...operations.ClientOption) (*operations.DescribeSamlProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSamlProvider")
	}

	var r0 *operations.DescribeSamlProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DescribeSamlProviderParams, ...operations.ClientOption) (*operations.DescribeSamlProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DescribeSamlProviderParams, ...operations.ClientOption) *operations.DescribeSamlProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DescribeSamlProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DescribeSamlProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DescribeSamlProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSamlProvider'
type MockIamClientService_DescribeSamlProvider_Call struct {
	*mock.Call
}

// DescribeSamlProvider is a helper method to define mock.On call
//   - params *operations.DescribeSamlProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DescribeSamlProvider(params interface{}, opts ...interface{}) *MockIamClientService_DescribeSamlProvider_Call {
	return &MockIamClientService_DescribeSamlProvider_Call{Call: _e.mock.On("DescribeSamlProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DescribeSamlProvider_Call) Run(run func(params *operations.DescribeSamlProviderParams, opts ...operations.ClientOption)) *MockIamClientService_DescribeSamlProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DescribeSamlProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DescribeSamlProvider_Call) Return(_a0 *operations.DescribeSamlProviderOK, _a1 error) *MockIamClientService_DescribeSamlProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DescribeSamlProvider_Call) RunAndReturn(run func(*operations.DescribeSamlProviderParams, ...operations.ClientOption) (*operations.DescribeSamlProviderOK, error)) *MockIamClientService_DescribeSamlProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DisableClouderaSSOLogin provides a mock function with given fields: params, opts
func (_m *MockIamClientService) DisableClouderaSSOLogin(params *operations.DisableClouderaSSOLoginParams, opts ...operations.ClientOption) (*operations.DisableClouderaSSOLoginOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableClouderaSSOLogin")
	}

	var r0 *operations.DisableClouderaSSOLoginOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.DisableClouderaSSOLoginParams, ...operations.ClientOption) (*operations.DisableClouderaSSOLoginOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.DisableClouderaSSOLoginParams, ...operations.ClientOption) *operations.DisableClouderaSSOLoginOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DisableClouderaSSOLoginOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.DisableClouderaSSOLoginParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_DisableClouderaSSOLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableClouderaSSOLogin'
type MockIamClientService_DisableClouderaSSOLogin_Call struct {
	*mock.Call
}

// DisableClouderaSSOLogin is a helper method to define mock.On call
//   - params *operations.DisableClouderaSSOLoginParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) DisableClouderaSSOLogin(params interface{}, opts ...interface{}) *MockIamClientService_DisableClouderaSSOLogin_Call {
	return &MockIamClientService_DisableClouderaSSOLogin_Call{Call: _e.mock.On("DisableClouderaSSOLogin",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_DisableClouderaSSOLogin_Call) Run(run func(params *operations.DisableClouderaSSOLoginParams, opts ...operations.ClientOption)) *MockIamClientService_DisableClouderaSSOLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.DisableClouderaSSOLoginParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_DisableClouderaSSOLogin_Call) Return(_a0 *operations.DisableClouderaSSOLoginOK, _a1 error) *MockIamClientService_DisableClouderaSSOLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_DisableClouderaSSOLogin_Call) RunAndReturn(run func(*operations.DisableClouderaSSOLoginParams, ...operations.ClientOption) (*operations.DisableClouderaSSOLoginOK, error)) *MockIamClientService_DisableClouderaSSOLogin_Call {
	_c.Call.Return(run)
	return _c
}

// EnableClouderaSSOLogin provides a mock function with given fields: params, opts
func (_m *MockIamClientService) EnableClouderaSSOLogin(params *operations.EnableClouderaSSOLoginParams, opts ...operations.ClientOption) (*operations.EnableClouderaSSOLoginOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableClouderaSSOLogin")
	}

	var r0 *operations.EnableClouderaSSOLoginOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.EnableClouderaSSOLoginParams, ...operations.ClientOption) (*operations.EnableClouderaSSOLoginOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.EnableClouderaSSOLoginParams, ...operations.ClientOption) *operations.EnableClouderaSSOLoginOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.EnableClouderaSSOLoginOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.EnableClouderaSSOLoginParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_EnableClouderaSSOLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableClouderaSSOLogin'
type MockIamClientService_EnableClouderaSSOLogin_Call struct {
	*mock.Call
}

// EnableClouderaSSOLogin is a helper method to define mock.On call
//   - params *operations.EnableClouderaSSOLoginParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) EnableClouderaSSOLogin(params interface{}, opts ...interface{}) *MockIamClientService_EnableClouderaSSOLogin_Call {
	return &MockIamClientService_EnableClouderaSSOLogin_Call{Call: _e.mock.On("EnableClouderaSSOLogin",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_EnableClouderaSSOLogin_Call) Run(run func(params *operations.EnableClouderaSSOLoginParams, opts ...operations.ClientOption)) *MockIamClientService_EnableClouderaSSOLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.EnableClouderaSSOLoginParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_EnableClouderaSSOLogin_Call) Return(_a0 *operations.EnableClouderaSSOLoginOK, _a1 error) *MockIamClientService_EnableClouderaSSOLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_EnableClouderaSSOLogin_Call) RunAndReturn(run func(*operations.EnableClouderaSSOLoginParams, ...operations.ClientOption) (*operations.EnableClouderaSSOLoginOK, error)) *MockIamClientService_EnableClouderaSSOLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateWorkloadAuthToken provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GenerateWorkloadAuthToken(params *operations.GenerateWorkloadAuthTokenParams, opts ...operations.ClientOption) (*operations.GenerateWorkloadAuthTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateWorkloadAuthToken")
	}

	var r0 *operations.GenerateWorkloadAuthTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GenerateWorkloadAuthTokenParams, ...operations.ClientOption) (*operations.GenerateWorkloadAuthTokenOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GenerateWorkloadAuthTokenParams, ...operations.ClientOption) *operations.GenerateWorkloadAuthTokenOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GenerateWorkloadAuthTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GenerateWorkloadAuthTokenParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GenerateWorkloadAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateWorkloadAuthToken'
type MockIamClientService_GenerateWorkloadAuthToken_Call struct {
	*mock.Call
}

// GenerateWorkloadAuthToken is a helper method to define mock.On call
//   - params *operations.GenerateWorkloadAuthTokenParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GenerateWorkloadAuthToken(params interface{}, opts ...interface{}) *MockIamClientService_GenerateWorkloadAuthToken_Call {
	return &MockIamClientService_GenerateWorkloadAuthToken_Call{Call: _e.mock.On("GenerateWorkloadAuthToken",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GenerateWorkloadAuthToken_Call) Run(run func(params *operations.GenerateWorkloadAuthTokenParams, opts ...operations.ClientOption)) *MockIamClientService_GenerateWorkloadAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GenerateWorkloadAuthTokenParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GenerateWorkloadAuthToken_Call) Return(_a0 *operations.GenerateWorkloadAuthTokenOK, _a1 error) *MockIamClientService_GenerateWorkloadAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GenerateWorkloadAuthToken_Call) RunAndReturn(run func(*operations.GenerateWorkloadAuthTokenParams, ...operations.ClientOption) (*operations.GenerateWorkloadAuthTokenOK, error)) *MockIamClientService_GenerateWorkloadAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GetAccessKey(params *operations.GetAccessKeyParams, opts ...operations.ClientOption) (*operations.GetAccessKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessKey")
	}

	var r0 *operations.GetAccessKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetAccessKeyParams, ...operations.ClientOption) (*operations.GetAccessKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetAccessKeyParams, ...operations.ClientOption) *operations.GetAccessKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAccessKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetAccessKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GetAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessKey'
type MockIamClientService_GetAccessKey_Call struct {
	*mock.Call
}

// GetAccessKey is a helper method to define mock.On call
//   - params *operations.GetAccessKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GetAccessKey(params interface{}, opts ...interface{}) *MockIamClientService_GetAccessKey_Call {
	return &MockIamClientService_GetAccessKey_Call{Call: _e.mock.On("GetAccessKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GetAccessKey_Call) Run(run func(params *operations.GetAccessKeyParams, opts ...operations.ClientOption)) *MockIamClientService_GetAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetAccessKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GetAccessKey_Call) Return(_a0 *operations.GetAccessKeyOK, _a1 error) *MockIamClientService_GetAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GetAccessKey_Call) RunAndReturn(run func(*operations.GetAccessKeyParams, ...operations.ClientOption) (*operations.GetAccessKeyOK, error)) *MockIamClientService_GetAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GetAccount(params *operations.GetAccountParams, opts ...operations.ClientOption) (*operations.GetAccountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *operations.GetAccountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetAccountParams, ...operations.ClientOption) (*operations.GetAccountOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetAccountParams, ...operations.ClientOption) *operations.GetAccountOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAccountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetAccountParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockIamClientService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - params *operations.GetAccountParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GetAccount(params interface{}, opts ...interface{}) *MockIamClientService_GetAccount_Call {
	return &MockIamClientService_GetAccount_Call{Call: _e.mock.On("GetAccount",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GetAccount_Call) Run(run func(params *operations.GetAccountParams, opts ...operations.ClientOption)) *MockIamClientService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetAccountParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GetAccount_Call) Return(_a0 *operations.GetAccountOK, _a1 error) *MockIamClientService_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GetAccount_Call) RunAndReturn(run func(*operations.GetAccountParams, ...operations.ClientOption) (*operations.GetAccountOK, error)) *MockIamClientService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountMessages provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GetAccountMessages(params *operations.GetAccountMessagesParams, opts ...operations.ClientOption) (*operations.GetAccountMessagesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountMessages")
	}

	var r0 *operations.GetAccountMessagesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetAccountMessagesParams, ...operations.ClientOption) (*operations.GetAccountMessagesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetAccountMessagesParams, ...operations.ClientOption) *operations.GetAccountMessagesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetAccountMessagesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetAccountMessagesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GetAccountMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountMessages'
type MockIamClientService_GetAccountMessages_Call struct {
	*mock.Call
}

// GetAccountMessages is a helper method to define mock.On call
//   - params *operations.GetAccountMessagesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GetAccountMessages(params interface{}, opts ...interface{}) *MockIamClientService_GetAccountMessages_Call {
	return &MockIamClientService_GetAccountMessages_Call{Call: _e.mock.On("GetAccountMessages",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GetAccountMessages_Call) Run(run func(params *operations.GetAccountMessagesParams, opts ...operations.ClientOption)) *MockIamClientService_GetAccountMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetAccountMessagesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GetAccountMessages_Call) Return(_a0 *operations.GetAccountMessagesOK, _a1 error) *MockIamClientService_GetAccountMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GetAccountMessages_Call) RunAndReturn(run func(*operations.GetAccountMessagesParams, ...operations.ClientOption) (*operations.GetAccountMessagesOK, error)) *MockIamClientService_GetAccountMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultIdentityProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GetDefaultIdentityProvider(params *operations.GetDefaultIdentityProviderParams, opts ...operations.ClientOption) (*operations.GetDefaultIdentityProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultIdentityProvider")
	}

	var r0 *operations.GetDefaultIdentityProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetDefaultIdentityProviderParams, ...operations.ClientOption) (*operations.GetDefaultIdentityProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetDefaultIdentityProviderParams, ...operations.ClientOption) *operations.GetDefaultIdentityProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetDefaultIdentityProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetDefaultIdentityProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GetDefaultIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultIdentityProvider'
type MockIamClientService_GetDefaultIdentityProvider_Call struct {
	*mock.Call
}

// GetDefaultIdentityProvider is a helper method to define mock.On call
//   - params *operations.GetDefaultIdentityProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GetDefaultIdentityProvider(params interface{}, opts ...interface{}) *MockIamClientService_GetDefaultIdentityProvider_Call {
	return &MockIamClientService_GetDefaultIdentityProvider_Call{Call: _e.mock.On("GetDefaultIdentityProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GetDefaultIdentityProvider_Call) Run(run func(params *operations.GetDefaultIdentityProviderParams, opts ...operations.ClientOption)) *MockIamClientService_GetDefaultIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetDefaultIdentityProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GetDefaultIdentityProvider_Call) Return(_a0 *operations.GetDefaultIdentityProviderOK, _a1 error) *MockIamClientService_GetDefaultIdentityProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GetDefaultIdentityProvider_Call) RunAndReturn(run func(*operations.GetDefaultIdentityProviderParams, ...operations.ClientOption) (*operations.GetDefaultIdentityProviderOK, error)) *MockIamClientService_GetDefaultIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) GetUser(params *operations.GetUserParams, opts ...operations.ClientOption) (*operations.GetUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *operations.GetUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetUserParams, ...operations.ClientOption) (*operations.GetUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetUserParams, ...operations.ClientOption) *operations.GetUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockIamClientService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - params *operations.GetUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) GetUser(params interface{}, opts ...interface{}) *MockIamClientService_GetUser_Call {
	return &MockIamClientService_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_GetUser_Call) Run(run func(params *operations.GetUserParams, opts ...operations.ClientOption)) *MockIamClientService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_GetUser_Call) Return(_a0 *operations.GetUserOK, _a1 error) *MockIamClientService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_GetUser_Call) RunAndReturn(run func(*operations.GetUserParams, ...operations.ClientOption) (*operations.GetUserOK, error)) *MockIamClientService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeys provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListAccessKeys(params *operations.ListAccessKeysParams, opts ...operations.ClientOption) (*operations.ListAccessKeysOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessKeys")
	}

	var r0 *operations.ListAccessKeysOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListAccessKeysParams, ...operations.ClientOption) (*operations.ListAccessKeysOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListAccessKeysParams, ...operations.ClientOption) *operations.ListAccessKeysOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListAccessKeysOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListAccessKeysParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListAccessKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeys'
type MockIamClientService_ListAccessKeys_Call struct {
	*mock.Call
}

// ListAccessKeys is a helper method to define mock.On call
//   - params *operations.ListAccessKeysParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListAccessKeys(params interface{}, opts ...interface{}) *MockIamClientService_ListAccessKeys_Call {
	return &MockIamClientService_ListAccessKeys_Call{Call: _e.mock.On("ListAccessKeys",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListAccessKeys_Call) Run(run func(params *operations.ListAccessKeysParams, opts ...operations.ClientOption)) *MockIamClientService_ListAccessKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListAccessKeysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListAccessKeys_Call) Return(_a0 *operations.ListAccessKeysOK, _a1 error) *MockIamClientService_ListAccessKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListAccessKeys_Call) RunAndReturn(run func(*operations.ListAccessKeysParams, ...operations.ClientOption) (*operations.ListAccessKeysOK, error)) *MockIamClientService_ListAccessKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupAssignedResourceRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroupAssignedResourceRoles(params *operations.ListGroupAssignedResourceRolesParams, opts ...operations.ClientOption) (*operations.ListGroupAssignedResourceRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupAssignedResourceRoles")
	}

	var r0 *operations.ListGroupAssignedResourceRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListGroupAssignedResourceRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupAssignedResourceRolesParams, ...operations.ClientOption) *operations.ListGroupAssignedResourceRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupAssignedResourceRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupAssignedResourceRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroupAssignedResourceRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupAssignedResourceRoles'
type MockIamClientService_ListGroupAssignedResourceRoles_Call struct {
	*mock.Call
}

// ListGroupAssignedResourceRoles is a helper method to define mock.On call
//   - params *operations.ListGroupAssignedResourceRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroupAssignedResourceRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListGroupAssignedResourceRoles_Call {
	return &MockIamClientService_ListGroupAssignedResourceRoles_Call{Call: _e.mock.On("ListGroupAssignedResourceRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroupAssignedResourceRoles_Call) Run(run func(params *operations.ListGroupAssignedResourceRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroupAssignedResourceRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupAssignedResourceRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroupAssignedResourceRoles_Call) Return(_a0 *operations.ListGroupAssignedResourceRolesOK, _a1 error) *MockIamClientService_ListGroupAssignedResourceRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroupAssignedResourceRoles_Call) RunAndReturn(run func(*operations.ListGroupAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListGroupAssignedResourceRolesOK, error)) *MockIamClientService_ListGroupAssignedResourceRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupAssignedRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroupAssignedRoles(params *operations.ListGroupAssignedRolesParams, opts ...operations.ClientOption) (*operations.ListGroupAssignedRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupAssignedRoles")
	}

	var r0 *operations.ListGroupAssignedRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupAssignedRolesParams, ...operations.ClientOption) (*operations.ListGroupAssignedRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupAssignedRolesParams, ...operations.ClientOption) *operations.ListGroupAssignedRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupAssignedRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupAssignedRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroupAssignedRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupAssignedRoles'
type MockIamClientService_ListGroupAssignedRoles_Call struct {
	*mock.Call
}

// ListGroupAssignedRoles is a helper method to define mock.On call
//   - params *operations.ListGroupAssignedRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroupAssignedRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListGroupAssignedRoles_Call {
	return &MockIamClientService_ListGroupAssignedRoles_Call{Call: _e.mock.On("ListGroupAssignedRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroupAssignedRoles_Call) Run(run func(params *operations.ListGroupAssignedRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroupAssignedRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupAssignedRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroupAssignedRoles_Call) Return(_a0 *operations.ListGroupAssignedRolesOK, _a1 error) *MockIamClientService_ListGroupAssignedRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroupAssignedRoles_Call) RunAndReturn(run func(*operations.ListGroupAssignedRolesParams, ...operations.ClientOption) (*operations.ListGroupAssignedRolesOK, error)) *MockIamClientService_ListGroupAssignedRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupMembers provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroupMembers(params *operations.ListGroupMembersParams, opts ...operations.ClientOption) (*operations.ListGroupMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembers")
	}

	var r0 *operations.ListGroupMembersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupMembersParams, ...operations.ClientOption) (*operations.ListGroupMembersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupMembersParams, ...operations.ClientOption) *operations.ListGroupMembersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupMembersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupMembersParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupMembers'
type MockIamClientService_ListGroupMembers_Call struct {
	*mock.Call
}

// ListGroupMembers is a helper method to define mock.On call
//   - params *operations.ListGroupMembersParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroupMembers(params interface{}, opts ...interface{}) *MockIamClientService_ListGroupMembers_Call {
	return &MockIamClientService_ListGroupMembers_Call{Call: _e.mock.On("ListGroupMembers",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroupMembers_Call) Run(run func(params *operations.ListGroupMembersParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupMembersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroupMembers_Call) Return(_a0 *operations.ListGroupMembersOK, _a1 error) *MockIamClientService_ListGroupMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroupMembers_Call) RunAndReturn(run func(*operations.ListGroupMembersParams, ...operations.ClientOption) (*operations.ListGroupMembersOK, error)) *MockIamClientService_ListGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroups(params *operations.ListGroupsParams, opts ...operations.ClientOption) (*operations.ListGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *operations.ListGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsParams, ...operations.ClientOption) (*operations.ListGroupsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsParams, ...operations.ClientOption) *operations.ListGroupsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupsParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type MockIamClientService_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - params *operations.ListGroupsParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroups(params interface{}, opts ...interface{}) *MockIamClientService_ListGroups_Call {
	return &MockIamClientService_ListGroups_Call{Call: _e.mock.On("ListGroups",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroups_Call) Run(run func(params *operations.ListGroupsParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroups_Call) Return(_a0 *operations.ListGroupsOK, _a1 error) *MockIamClientService_ListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroups_Call) RunAndReturn(run func(*operations.ListGroupsParams, ...operations.ClientOption) (*operations.ListGroupsOK, error)) *MockIamClientService_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForMachineUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroupsForMachineUser(params *operations.ListGroupsForMachineUserParams, opts ...operations.ClientOption) (*operations.ListGroupsForMachineUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsForMachineUser")
	}

	var r0 *operations.ListGroupsForMachineUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsForMachineUserParams, ...operations.ClientOption) (*operations.ListGroupsForMachineUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsForMachineUserParams, ...operations.ClientOption) *operations.ListGroupsForMachineUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupsForMachineUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupsForMachineUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroupsForMachineUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForMachineUser'
type MockIamClientService_ListGroupsForMachineUser_Call struct {
	*mock.Call
}

// ListGroupsForMachineUser is a helper method to define mock.On call
//   - params *operations.ListGroupsForMachineUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroupsForMachineUser(params interface{}, opts ...interface{}) *MockIamClientService_ListGroupsForMachineUser_Call {
	return &MockIamClientService_ListGroupsForMachineUser_Call{Call: _e.mock.On("ListGroupsForMachineUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroupsForMachineUser_Call) Run(run func(params *operations.ListGroupsForMachineUserParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroupsForMachineUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupsForMachineUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroupsForMachineUser_Call) Return(_a0 *operations.ListGroupsForMachineUserOK, _a1 error) *MockIamClientService_ListGroupsForMachineUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroupsForMachineUser_Call) RunAndReturn(run func(*operations.ListGroupsForMachineUserParams, ...operations.ClientOption) (*operations.ListGroupsForMachineUserOK, error)) *MockIamClientService_ListGroupsForMachineUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListGroupsForUser(params *operations.ListGroupsForUserParams, opts ...operations.ClientOption) (*operations.ListGroupsForUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsForUser")
	}

	var r0 *operations.ListGroupsForUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsForUserParams, ...operations.ClientOption) (*operations.ListGroupsForUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListGroupsForUserParams, ...operations.ClientOption) *operations.ListGroupsForUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListGroupsForUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListGroupsForUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListGroupsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUser'
type MockIamClientService_ListGroupsForUser_Call struct {
	*mock.Call
}

// ListGroupsForUser is a helper method to define mock.On call
//   - params *operations.ListGroupsForUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListGroupsForUser(params interface{}, opts ...interface{}) *MockIamClientService_ListGroupsForUser_Call {
	return &MockIamClientService_ListGroupsForUser_Call{Call: _e.mock.On("ListGroupsForUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListGroupsForUser_Call) Run(run func(params *operations.ListGroupsForUserParams, opts ...operations.ClientOption)) *MockIamClientService_ListGroupsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListGroupsForUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListGroupsForUser_Call) Return(_a0 *operations.ListGroupsForUserOK, _a1 error) *MockIamClientService_ListGroupsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListGroupsForUser_Call) RunAndReturn(run func(*operations.ListGroupsForUserParams, ...operations.ClientOption) (*operations.ListGroupsForUserOK, error)) *MockIamClientService_ListGroupsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListMachineUserAssignedResourceRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListMachineUserAssignedResourceRoles(params *operations.ListMachineUserAssignedResourceRolesParams, opts ...operations.ClientOption) (*operations.ListMachineUserAssignedResourceRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMachineUserAssignedResourceRoles")
	}

	var r0 *operations.ListMachineUserAssignedResourceRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUserAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListMachineUserAssignedResourceRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUserAssignedResourceRolesParams, ...operations.ClientOption) *operations.ListMachineUserAssignedResourceRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListMachineUserAssignedResourceRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListMachineUserAssignedResourceRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListMachineUserAssignedResourceRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMachineUserAssignedResourceRoles'
type MockIamClientService_ListMachineUserAssignedResourceRoles_Call struct {
	*mock.Call
}

// ListMachineUserAssignedResourceRoles is a helper method to define mock.On call
//   - params *operations.ListMachineUserAssignedResourceRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListMachineUserAssignedResourceRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListMachineUserAssignedResourceRoles_Call {
	return &MockIamClientService_ListMachineUserAssignedResourceRoles_Call{Call: _e.mock.On("ListMachineUserAssignedResourceRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListMachineUserAssignedResourceRoles_Call) Run(run func(params *operations.ListMachineUserAssignedResourceRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListMachineUserAssignedResourceRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListMachineUserAssignedResourceRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListMachineUserAssignedResourceRoles_Call) Return(_a0 *operations.ListMachineUserAssignedResourceRolesOK, _a1 error) *MockIamClientService_ListMachineUserAssignedResourceRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListMachineUserAssignedResourceRoles_Call) RunAndReturn(run func(*operations.ListMachineUserAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListMachineUserAssignedResourceRolesOK, error)) *MockIamClientService_ListMachineUserAssignedResourceRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListMachineUserAssignedRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListMachineUserAssignedRoles(params *operations.ListMachineUserAssignedRolesParams, opts ...operations.ClientOption) (*operations.ListMachineUserAssignedRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMachineUserAssignedRoles")
	}

	var r0 *operations.ListMachineUserAssignedRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUserAssignedRolesParams, ...operations.ClientOption) (*operations.ListMachineUserAssignedRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUserAssignedRolesParams, ...operations.ClientOption) *operations.ListMachineUserAssignedRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListMachineUserAssignedRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListMachineUserAssignedRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListMachineUserAssignedRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMachineUserAssignedRoles'
type MockIamClientService_ListMachineUserAssignedRoles_Call struct {
	*mock.Call
}

// ListMachineUserAssignedRoles is a helper method to define mock.On call
//   - params *operations.ListMachineUserAssignedRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListMachineUserAssignedRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListMachineUserAssignedRoles_Call {
	return &MockIamClientService_ListMachineUserAssignedRoles_Call{Call: _e.mock.On("ListMachineUserAssignedRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListMachineUserAssignedRoles_Call) Run(run func(params *operations.ListMachineUserAssignedRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListMachineUserAssignedRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListMachineUserAssignedRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListMachineUserAssignedRoles_Call) Return(_a0 *operations.ListMachineUserAssignedRolesOK, _a1 error) *MockIamClientService_ListMachineUserAssignedRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListMachineUserAssignedRoles_Call) RunAndReturn(run func(*operations.ListMachineUserAssignedRolesParams, ...operations.ClientOption) (*operations.ListMachineUserAssignedRolesOK, error)) *MockIamClientService_ListMachineUserAssignedRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListMachineUsers provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListMachineUsers(params *operations.ListMachineUsersParams, opts ...operations.ClientOption) (*operations.ListMachineUsersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMachineUsers")
	}

	var r0 *operations.ListMachineUsersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUsersParams, ...operations.ClientOption) (*operations.ListMachineUsersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListMachineUsersParams, ...operations.ClientOption) *operations.ListMachineUsersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListMachineUsersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListMachineUsersParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListMachineUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMachineUsers'
type MockIamClientService_ListMachineUsers_Call struct {
	*mock.Call
}

// ListMachineUsers is a helper method to define mock.On call
//   - params *operations.ListMachineUsersParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListMachineUsers(params interface{}, opts ...interface{}) *MockIamClientService_ListMachineUsers_Call {
	return &MockIamClientService_ListMachineUsers_Call{Call: _e.mock.On("ListMachineUsers",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListMachineUsers_Call) Run(run func(params *operations.ListMachineUsersParams, opts ...operations.ClientOption)) *MockIamClientService_ListMachineUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListMachineUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListMachineUsers_Call) Return(_a0 *operations.ListMachineUsersOK, _a1 error) *MockIamClientService_ListMachineUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListMachineUsers_Call) RunAndReturn(run func(*operations.ListMachineUsersParams, ...operations.ClientOption) (*operations.ListMachineUsersOK, error)) *MockIamClientService_ListMachineUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListResourceAssignees provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListResourceAssignees(params *operations.ListResourceAssigneesParams, opts ...operations.ClientOption) (*operations.ListResourceAssigneesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceAssignees")
	}

	var r0 *operations.ListResourceAssigneesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListResourceAssigneesParams, ...operations.ClientOption) (*operations.ListResourceAssigneesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListResourceAssigneesParams, ...operations.ClientOption) *operations.ListResourceAssigneesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListResourceAssigneesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListResourceAssigneesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListResourceAssignees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListResourceAssignees'
type MockIamClientService_ListResourceAssignees_Call struct {
	*mock.Call
}

// ListResourceAssignees is a helper method to define mock.On call
//   - params *operations.ListResourceAssigneesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListResourceAssignees(params interface{}, opts ...interface{}) *MockIamClientService_ListResourceAssignees_Call {
	return &MockIamClientService_ListResourceAssignees_Call{Call: _e.mock.On("ListResourceAssignees",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListResourceAssignees_Call) Run(run func(params *operations.ListResourceAssigneesParams, opts ...operations.ClientOption)) *MockIamClientService_ListResourceAssignees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListResourceAssigneesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListResourceAssignees_Call) Return(_a0 *operations.ListResourceAssigneesOK, _a1 error) *MockIamClientService_ListResourceAssignees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListResourceAssignees_Call) RunAndReturn(run func(*operations.ListResourceAssigneesParams, ...operations.ClientOption) (*operations.ListResourceAssigneesOK, error)) *MockIamClientService_ListResourceAssignees_Call {
	_c.Call.Return(run)
	return _c
}

// ListResourceRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListResourceRoles(params *operations.ListResourceRolesParams, opts ...operations.ClientOption) (*operations.ListResourceRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceRoles")
	}

	var r0 *operations.ListResourceRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListResourceRolesParams, ...operations.ClientOption) (*operations.ListResourceRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListResourceRolesParams, ...operations.ClientOption) *operations.ListResourceRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListResourceRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListResourceRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListResourceRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListResourceRoles'
type MockIamClientService_ListResourceRoles_Call struct {
	*mock.Call
}

// ListResourceRoles is a helper method to define mock.On call
//   - params *operations.ListResourceRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListResourceRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListResourceRoles_Call {
	return &MockIamClientService_ListResourceRoles_Call{Call: _e.mock.On("ListResourceRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListResourceRoles_Call) Run(run func(params *operations.ListResourceRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListResourceRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListResourceRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListResourceRoles_Call) Return(_a0 *operations.ListResourceRolesOK, _a1 error) *MockIamClientService_ListResourceRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListResourceRoles_Call) RunAndReturn(run func(*operations.ListResourceRolesParams, ...operations.ClientOption) (*operations.ListResourceRolesOK, error)) *MockIamClientService_ListResourceRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListRoles(params *operations.ListRolesParams, opts ...operations.ClientOption) (*operations.ListRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *operations.ListRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListRolesParams, ...operations.ClientOption) (*operations.ListRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListRolesParams, ...operations.ClientOption) *operations.ListRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockIamClientService_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - params *operations.ListRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListRoles_Call {
	return &MockIamClientService_ListRoles_Call{Call: _e.mock.On("ListRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListRoles_Call) Run(run func(params *operations.ListRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListRoles_Call) Return(_a0 *operations.ListRolesOK, _a1 error) *MockIamClientService_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListRoles_Call) RunAndReturn(run func(*operations.ListRolesParams, ...operations.ClientOption) (*operations.ListRolesOK, error)) *MockIamClientService_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeys provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListSSHPublicKeys(params *operations.ListSSHPublicKeysParams, opts ...operations.ClientOption) (*operations.ListSSHPublicKeysOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSSHPublicKeys")
	}

	var r0 *operations.ListSSHPublicKeysOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListSSHPublicKeysParams, ...operations.ClientOption) (*operations.ListSSHPublicKeysOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListSSHPublicKeysParams, ...operations.ClientOption) *operations.ListSSHPublicKeysOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListSSHPublicKeysOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListSSHPublicKeysParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListSSHPublicKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeys'
type MockIamClientService_ListSSHPublicKeys_Call struct {
	*mock.Call
}

// ListSSHPublicKeys is a helper method to define mock.On call
//   - params *operations.ListSSHPublicKeysParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListSSHPublicKeys(params interface{}, opts ...interface{}) *MockIamClientService_ListSSHPublicKeys_Call {
	return &MockIamClientService_ListSSHPublicKeys_Call{Call: _e.mock.On("ListSSHPublicKeys",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListSSHPublicKeys_Call) Run(run func(params *operations.ListSSHPublicKeysParams, opts ...operations.ClientOption)) *MockIamClientService_ListSSHPublicKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListSSHPublicKeysParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListSSHPublicKeys_Call) Return(_a0 *operations.ListSSHPublicKeysOK, _a1 error) *MockIamClientService_ListSSHPublicKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListSSHPublicKeys_Call) RunAndReturn(run func(*operations.ListSSHPublicKeysParams, ...operations.ClientOption) (*operations.ListSSHPublicKeysOK, error)) *MockIamClientService_ListSSHPublicKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListSamlProviders provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListSamlProviders(params *operations.ListSamlProvidersParams, opts ...operations.ClientOption) (*operations.ListSamlProvidersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSamlProviders")
	}

	var r0 *operations.ListSamlProvidersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListSamlProvidersParams, ...operations.ClientOption) (*operations.ListSamlProvidersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListSamlProvidersParams, ...operations.ClientOption) *operations.ListSamlProvidersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListSamlProvidersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListSamlProvidersParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListSamlProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSamlProviders'
type MockIamClientService_ListSamlProviders_Call struct {
	*mock.Call
}

// ListSamlProviders is a helper method to define mock.On call
//   - params *operations.ListSamlProvidersParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListSamlProviders(params interface{}, opts ...interface{}) *MockIamClientService_ListSamlProviders_Call {
	return &MockIamClientService_ListSamlProviders_Call{Call: _e.mock.On("ListSamlProviders",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListSamlProviders_Call) Run(run func(params *operations.ListSamlProvidersParams, opts ...operations.ClientOption)) *MockIamClientService_ListSamlProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListSamlProvidersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListSamlProviders_Call) Return(_a0 *operations.ListSamlProvidersOK, _a1 error) *MockIamClientService_ListSamlProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListSamlProviders_Call) RunAndReturn(run func(*operations.ListSamlProvidersParams, ...operations.ClientOption) (*operations.ListSamlProvidersOK, error)) *MockIamClientService_ListSamlProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListScimAccessTokens provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListScimAccessTokens(params *operations.ListScimAccessTokensParams, opts ...operations.ClientOption) (*operations.ListScimAccessTokensOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScimAccessTokens")
	}

	var r0 *operations.ListScimAccessTokensOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListScimAccessTokensParams, ...operations.ClientOption) (*operations.ListScimAccessTokensOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListScimAccessTokensParams, ...operations.ClientOption) *operations.ListScimAccessTokensOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListScimAccessTokensOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListScimAccessTokensParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListScimAccessTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScimAccessTokens'
type MockIamClientService_ListScimAccessTokens_Call struct {
	*mock.Call
}

// ListScimAccessTokens is a helper method to define mock.On call
//   - params *operations.ListScimAccessTokensParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListScimAccessTokens(params interface{}, opts ...interface{}) *MockIamClientService_ListScimAccessTokens_Call {
	return &MockIamClientService_ListScimAccessTokens_Call{Call: _e.mock.On("ListScimAccessTokens",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListScimAccessTokens_Call) Run(run func(params *operations.ListScimAccessTokensParams, opts ...operations.ClientOption)) *MockIamClientService_ListScimAccessTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListScimAccessTokensParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListScimAccessTokens_Call) Return(_a0 *operations.ListScimAccessTokensOK, _a1 error) *MockIamClientService_ListScimAccessTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListScimAccessTokens_Call) RunAndReturn(run func(*operations.ListScimAccessTokensParams, ...operations.ClientOption) (*operations.ListScimAccessTokensOK, error)) *MockIamClientService_ListScimAccessTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListServicePrincipalCloudIdentities provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListServicePrincipalCloudIdentities(params *operations.ListServicePrincipalCloudIdentitiesParams, opts ...operations.ClientOption) (*operations.ListServicePrincipalCloudIdentitiesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServicePrincipalCloudIdentities")
	}

	var r0 *operations.ListServicePrincipalCloudIdentitiesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListServicePrincipalCloudIdentitiesParams, ...operations.ClientOption) (*operations.ListServicePrincipalCloudIdentitiesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListServicePrincipalCloudIdentitiesParams, ...operations.ClientOption) *operations.ListServicePrincipalCloudIdentitiesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListServicePrincipalCloudIdentitiesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListServicePrincipalCloudIdentitiesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListServicePrincipalCloudIdentities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServicePrincipalCloudIdentities'
type MockIamClientService_ListServicePrincipalCloudIdentities_Call struct {
	*mock.Call
}

// ListServicePrincipalCloudIdentities is a helper method to define mock.On call
//   - params *operations.ListServicePrincipalCloudIdentitiesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListServicePrincipalCloudIdentities(params interface{}, opts ...interface{}) *MockIamClientService_ListServicePrincipalCloudIdentities_Call {
	return &MockIamClientService_ListServicePrincipalCloudIdentities_Call{Call: _e.mock.On("ListServicePrincipalCloudIdentities",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListServicePrincipalCloudIdentities_Call) Run(run func(params *operations.ListServicePrincipalCloudIdentitiesParams, opts ...operations.ClientOption)) *MockIamClientService_ListServicePrincipalCloudIdentities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListServicePrincipalCloudIdentitiesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListServicePrincipalCloudIdentities_Call) Return(_a0 *operations.ListServicePrincipalCloudIdentitiesOK, _a1 error) *MockIamClientService_ListServicePrincipalCloudIdentities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListServicePrincipalCloudIdentities_Call) RunAndReturn(run func(*operations.ListServicePrincipalCloudIdentitiesParams, ...operations.ClientOption) (*operations.ListServicePrincipalCloudIdentitiesOK, error)) *MockIamClientService_ListServicePrincipalCloudIdentities_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserAssignedResourceRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListUserAssignedResourceRoles(params *operations.ListUserAssignedResourceRolesParams, opts ...operations.ClientOption) (*operations.ListUserAssignedResourceRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserAssignedResourceRoles")
	}

	var r0 *operations.ListUserAssignedResourceRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListUserAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListUserAssignedResourceRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListUserAssignedResourceRolesParams, ...operations.ClientOption) *operations.ListUserAssignedResourceRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUserAssignedResourceRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListUserAssignedResourceRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListUserAssignedResourceRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserAssignedResourceRoles'
type MockIamClientService_ListUserAssignedResourceRoles_Call struct {
	*mock.Call
}

// ListUserAssignedResourceRoles is a helper method to define mock.On call
//   - params *operations.ListUserAssignedResourceRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListUserAssignedResourceRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListUserAssignedResourceRoles_Call {
	return &MockIamClientService_ListUserAssignedResourceRoles_Call{Call: _e.mock.On("ListUserAssignedResourceRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListUserAssignedResourceRoles_Call) Run(run func(params *operations.ListUserAssignedResourceRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListUserAssignedResourceRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListUserAssignedResourceRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListUserAssignedResourceRoles_Call) Return(_a0 *operations.ListUserAssignedResourceRolesOK, _a1 error) *MockIamClientService_ListUserAssignedResourceRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListUserAssignedResourceRoles_Call) RunAndReturn(run func(*operations.ListUserAssignedResourceRolesParams, ...operations.ClientOption) (*operations.ListUserAssignedResourceRolesOK, error)) *MockIamClientService_ListUserAssignedResourceRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserAssignedRoles provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListUserAssignedRoles(params *operations.ListUserAssignedRolesParams, opts ...operations.ClientOption) (*operations.ListUserAssignedRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserAssignedRoles")
	}

	var r0 *operations.ListUserAssignedRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListUserAssignedRolesParams, ...operations.ClientOption) (*operations.ListUserAssignedRolesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListUserAssignedRolesParams, ...operations.ClientOption) *operations.ListUserAssignedRolesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUserAssignedRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListUserAssignedRolesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListUserAssignedRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserAssignedRoles'
type MockIamClientService_ListUserAssignedRoles_Call struct {
	*mock.Call
}

// ListUserAssignedRoles is a helper method to define mock.On call
//   - params *operations.ListUserAssignedRolesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListUserAssignedRoles(params interface{}, opts ...interface{}) *MockIamClientService_ListUserAssignedRoles_Call {
	return &MockIamClientService_ListUserAssignedRoles_Call{Call: _e.mock.On("ListUserAssignedRoles",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListUserAssignedRoles_Call) Run(run func(params *operations.ListUserAssignedRolesParams, opts ...operations.ClientOption)) *MockIamClientService_ListUserAssignedRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListUserAssignedRolesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListUserAssignedRoles_Call) Return(_a0 *operations.ListUserAssignedRolesOK, _a1 error) *MockIamClientService_ListUserAssignedRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListUserAssignedRoles_Call) RunAndReturn(run func(*operations.ListUserAssignedRolesParams, ...operations.ClientOption) (*operations.ListUserAssignedRolesOK, error)) *MockIamClientService_ListUserAssignedRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: params, opts
func (_m *MockIamClientService) ListUsers(params *operations.ListUsersParams, opts ...operations.ClientOption) (*operations.ListUsersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *operations.ListUsersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListUsersParams, ...operations.ClientOption) (*operations.ListUsersOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListUsersParams, ...operations.ClientOption) *operations.ListUsersOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUsersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListUsersParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockIamClientService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - params *operations.ListUsersParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) ListUsers(params interface{}, opts ...interface{}) *MockIamClientService_ListUsers_Call {
	return &MockIamClientService_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_ListUsers_Call) Run(run func(params *operations.ListUsersParams, opts ...operations.ClientOption)) *MockIamClientService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListUsersParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_ListUsers_Call) Return(_a0 *operations.ListUsersOK, _a1 error) *MockIamClientService_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_ListUsers_Call) RunAndReturn(run func(*operations.ListUsersParams, ...operations.ClientOption) (*operations.ListUsersOK, error)) *MockIamClientService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMachineUserFromGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) RemoveMachineUserFromGroup(params *operations.RemoveMachineUserFromGroupParams, opts ...operations.ClientOption) (*operations.RemoveMachineUserFromGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMachineUserFromGroup")
	}

	var r0 *operations.RemoveMachineUserFromGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.RemoveMachineUserFromGroupParams, ...operations.ClientOption) (*operations.RemoveMachineUserFromGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.RemoveMachineUserFromGroupParams, ...operations.ClientOption) *operations.RemoveMachineUserFromGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.RemoveMachineUserFromGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.RemoveMachineUserFromGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_RemoveMachineUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMachineUserFromGroup'
type MockIamClientService_RemoveMachineUserFromGroup_Call struct {
	*mock.Call
}

// RemoveMachineUserFromGroup is a helper method to define mock.On call
//   - params *operations.RemoveMachineUserFromGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) RemoveMachineUserFromGroup(params interface{}, opts ...interface{}) *MockIamClientService_RemoveMachineUserFromGroup_Call {
	return &MockIamClientService_RemoveMachineUserFromGroup_Call{Call: _e.mock.On("RemoveMachineUserFromGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_RemoveMachineUserFromGroup_Call) Run(run func(params *operations.RemoveMachineUserFromGroupParams, opts ...operations.ClientOption)) *MockIamClientService_RemoveMachineUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.RemoveMachineUserFromGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_RemoveMachineUserFromGroup_Call) Return(_a0 *operations.RemoveMachineUserFromGroupOK, _a1 error) *MockIamClientService_RemoveMachineUserFromGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_RemoveMachineUserFromGroup_Call) RunAndReturn(run func(*operations.RemoveMachineUserFromGroupParams, ...operations.ClientOption) (*operations.RemoveMachineUserFromGroupOK, error)) *MockIamClientService_RemoveMachineUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) RemoveUserFromGroup(params *operations.RemoveUserFromGroupParams, opts ...operations.ClientOption) (*operations.RemoveUserFromGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 *operations.RemoveUserFromGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.RemoveUserFromGroupParams, ...operations.ClientOption) (*operations.RemoveUserFromGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.RemoveUserFromGroupParams, ...operations.ClientOption) *operations.RemoveUserFromGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.RemoveUserFromGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.RemoveUserFromGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type MockIamClientService_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - params *operations.RemoveUserFromGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) RemoveUserFromGroup(params interface{}, opts ...interface{}) *MockIamClientService_RemoveUserFromGroup_Call {
	return &MockIamClientService_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_RemoveUserFromGroup_Call) Run(run func(params *operations.RemoveUserFromGroupParams, opts ...operations.ClientOption)) *MockIamClientService_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.RemoveUserFromGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_RemoveUserFromGroup_Call) Return(_a0 *operations.RemoveUserFromGroupOK, _a1 error) *MockIamClientService_RemoveUserFromGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_RemoveUserFromGroup_Call) RunAndReturn(run func(*operations.RemoveUserFromGroupParams, ...operations.ClientOption) (*operations.RemoveUserFromGroupOK, error)) *MockIamClientService_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccountMessages provides a mock function with given fields: params, opts
func (_m *MockIamClientService) SetAccountMessages(params *operations.SetAccountMessagesParams, opts ...operations.ClientOption) (*operations.SetAccountMessagesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAccountMessages")
	}

	var r0 *operations.SetAccountMessagesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.SetAccountMessagesParams, ...operations.ClientOption) (*operations.SetAccountMessagesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.SetAccountMessagesParams, ...operations.ClientOption) *operations.SetAccountMessagesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.SetAccountMessagesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.SetAccountMessagesParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_SetAccountMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccountMessages'
type MockIamClientService_SetAccountMessages_Call struct {
	*mock.Call
}

// SetAccountMessages is a helper method to define mock.On call
//   - params *operations.SetAccountMessagesParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) SetAccountMessages(params interface{}, opts ...interface{}) *MockIamClientService_SetAccountMessages_Call {
	return &MockIamClientService_SetAccountMessages_Call{Call: _e.mock.On("SetAccountMessages",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_SetAccountMessages_Call) Run(run func(params *operations.SetAccountMessagesParams, opts ...operations.ClientOption)) *MockIamClientService_SetAccountMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.SetAccountMessagesParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_SetAccountMessages_Call) Return(_a0 *operations.SetAccountMessagesOK, _a1 error) *MockIamClientService_SetAccountMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_SetAccountMessages_Call) RunAndReturn(run func(*operations.SetAccountMessagesParams, ...operations.ClientOption) (*operations.SetAccountMessagesOK, error)) *MockIamClientService_SetAccountMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthenticationPolicy provides a mock function with given fields: params, opts
func (_m *MockIamClientService) SetAuthenticationPolicy(params *operations.SetAuthenticationPolicyParams, opts ...operations.ClientOption) (*operations.SetAuthenticationPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAuthenticationPolicy")
	}

	var r0 *operations.SetAuthenticationPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.SetAuthenticationPolicyParams, ...operations.ClientOption) (*operations.SetAuthenticationPolicyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.SetAuthenticationPolicyParams, ...operations.ClientOption) *operations.SetAuthenticationPolicyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.SetAuthenticationPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.SetAuthenticationPolicyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_SetAuthenticationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthenticationPolicy'
type MockIamClientService_SetAuthenticationPolicy_Call struct {
	*mock.Call
}

// SetAuthenticationPolicy is a helper method to define mock.On call
//   - params *operations.SetAuthenticationPolicyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) SetAuthenticationPolicy(params interface{}, opts ...interface{}) *MockIamClientService_SetAuthenticationPolicy_Call {
	return &MockIamClientService_SetAuthenticationPolicy_Call{Call: _e.mock.On("SetAuthenticationPolicy",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_SetAuthenticationPolicy_Call) Run(run func(params *operations.SetAuthenticationPolicyParams, opts ...operations.ClientOption)) *MockIamClientService_SetAuthenticationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.SetAuthenticationPolicyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_SetAuthenticationPolicy_Call) Return(_a0 *operations.SetAuthenticationPolicyOK, _a1 error) *MockIamClientService_SetAuthenticationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_SetAuthenticationPolicy_Call) RunAndReturn(run func(*operations.SetAuthenticationPolicyParams, ...operations.ClientOption) (*operations.SetAuthenticationPolicyOK, error)) *MockIamClientService_SetAuthenticationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultIdentityProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) SetDefaultIdentityProvider(params *operations.SetDefaultIdentityProviderParams, opts ...operations.ClientOption) (*operations.SetDefaultIdentityProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultIdentityProvider")
	}

	var r0 *operations.SetDefaultIdentityProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.SetDefaultIdentityProviderParams, ...operations.ClientOption) (*operations.SetDefaultIdentityProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.SetDefaultIdentityProviderParams, ...operations.ClientOption) *operations.SetDefaultIdentityProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.SetDefaultIdentityProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.SetDefaultIdentityProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_SetDefaultIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultIdentityProvider'
type MockIamClientService_SetDefaultIdentityProvider_Call struct {
	*mock.Call
}

// SetDefaultIdentityProvider is a helper method to define mock.On call
//   - params *operations.SetDefaultIdentityProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) SetDefaultIdentityProvider(params interface{}, opts ...interface{}) *MockIamClientService_SetDefaultIdentityProvider_Call {
	return &MockIamClientService_SetDefaultIdentityProvider_Call{Call: _e.mock.On("SetDefaultIdentityProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_SetDefaultIdentityProvider_Call) Run(run func(params *operations.SetDefaultIdentityProviderParams, opts ...operations.ClientOption)) *MockIamClientService_SetDefaultIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.SetDefaultIdentityProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_SetDefaultIdentityProvider_Call) Return(_a0 *operations.SetDefaultIdentityProviderOK, _a1 error) *MockIamClientService_SetDefaultIdentityProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_SetDefaultIdentityProvider_Call) RunAndReturn(run func(*operations.SetDefaultIdentityProviderParams, ...operations.ClientOption) (*operations.SetDefaultIdentityProviderOK, error)) *MockIamClientService_SetDefaultIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockIamClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockIamClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockIamClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockIamClientService_Expecter) SetTransport(transport interface{}) *MockIamClientService_SetTransport_Call {
	return &MockIamClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockIamClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockIamClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockIamClientService_SetTransport_Call) Return() *MockIamClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIamClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockIamClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// SetWorkloadPassword provides a mock function with given fields: params, opts
func (_m *MockIamClientService) SetWorkloadPassword(params *operations.SetWorkloadPasswordParams, opts ...operations.ClientOption) (*operations.SetWorkloadPasswordOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkloadPassword")
	}

	var r0 *operations.SetWorkloadPasswordOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.SetWorkloadPasswordParams, ...operations.ClientOption) (*operations.SetWorkloadPasswordOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.SetWorkloadPasswordParams, ...operations.ClientOption) *operations.SetWorkloadPasswordOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.SetWorkloadPasswordOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.SetWorkloadPasswordParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_SetWorkloadPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkloadPassword'
type MockIamClientService_SetWorkloadPassword_Call struct {
	*mock.Call
}

// SetWorkloadPassword is a helper method to define mock.On call
//   - params *operations.SetWorkloadPasswordParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) SetWorkloadPassword(params interface{}, opts ...interface{}) *MockIamClientService_SetWorkloadPassword_Call {
	return &MockIamClientService_SetWorkloadPassword_Call{Call: _e.mock.On("SetWorkloadPassword",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_SetWorkloadPassword_Call) Run(run func(params *operations.SetWorkloadPasswordParams, opts ...operations.ClientOption)) *MockIamClientService_SetWorkloadPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.SetWorkloadPasswordParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_SetWorkloadPassword_Call) Return(_a0 *operations.SetWorkloadPasswordOK, _a1 error) *MockIamClientService_SetWorkloadPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_SetWorkloadPassword_Call) RunAndReturn(run func(*operations.SetWorkloadPasswordParams, ...operations.ClientOption) (*operations.SetWorkloadPasswordOK, error)) *MockIamClientService_SetWorkloadPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkloadPasswordPolicy provides a mock function with given fields: params, opts
func (_m *MockIamClientService) SetWorkloadPasswordPolicy(params *operations.SetWorkloadPasswordPolicyParams, opts ...operations.ClientOption) (*operations.SetWorkloadPasswordPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkloadPasswordPolicy")
	}

	var r0 *operations.SetWorkloadPasswordPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.SetWorkloadPasswordPolicyParams, ...operations.ClientOption) (*operations.SetWorkloadPasswordPolicyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.SetWorkloadPasswordPolicyParams, ...operations.ClientOption) *operations.SetWorkloadPasswordPolicyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.SetWorkloadPasswordPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.SetWorkloadPasswordPolicyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_SetWorkloadPasswordPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkloadPasswordPolicy'
type MockIamClientService_SetWorkloadPasswordPolicy_Call struct {
	*mock.Call
}

// SetWorkloadPasswordPolicy is a helper method to define mock.On call
//   - params *operations.SetWorkloadPasswordPolicyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) SetWorkloadPasswordPolicy(params interface{}, opts ...interface{}) *MockIamClientService_SetWorkloadPasswordPolicy_Call {
	return &MockIamClientService_SetWorkloadPasswordPolicy_Call{Call: _e.mock.On("SetWorkloadPasswordPolicy",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_SetWorkloadPasswordPolicy_Call) Run(run func(params *operations.SetWorkloadPasswordPolicyParams, opts ...operations.ClientOption)) *MockIamClientService_SetWorkloadPasswordPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.SetWorkloadPasswordPolicyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_SetWorkloadPasswordPolicy_Call) Return(_a0 *operations.SetWorkloadPasswordPolicyOK, _a1 error) *MockIamClientService_SetWorkloadPasswordPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_SetWorkloadPasswordPolicy_Call) RunAndReturn(run func(*operations.SetWorkloadPasswordPolicyParams, ...operations.ClientOption) (*operations.SetWorkloadPasswordPolicyOK, error)) *MockIamClientService_SetWorkloadPasswordPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignAzureCloudIdentity provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignAzureCloudIdentity(params *operations.UnassignAzureCloudIdentityParams, opts ...operations.ClientOption) (*operations.UnassignAzureCloudIdentityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignAzureCloudIdentity")
	}

	var r0 *operations.UnassignAzureCloudIdentityOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignAzureCloudIdentityParams, ...operations.ClientOption) (*operations.UnassignAzureCloudIdentityOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignAzureCloudIdentityParams, ...operations.ClientOption) *operations.UnassignAzureCloudIdentityOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignAzureCloudIdentityOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignAzureCloudIdentityParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignAzureCloudIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignAzureCloudIdentity'
type MockIamClientService_UnassignAzureCloudIdentity_Call struct {
	*mock.Call
}

// UnassignAzureCloudIdentity is a helper method to define mock.On call
//   - params *operations.UnassignAzureCloudIdentityParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignAzureCloudIdentity(params interface{}, opts ...interface{}) *MockIamClientService_UnassignAzureCloudIdentity_Call {
	return &MockIamClientService_UnassignAzureCloudIdentity_Call{Call: _e.mock.On("UnassignAzureCloudIdentity",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignAzureCloudIdentity_Call) Run(run func(params *operations.UnassignAzureCloudIdentityParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignAzureCloudIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignAzureCloudIdentityParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignAzureCloudIdentity_Call) Return(_a0 *operations.UnassignAzureCloudIdentityOK, _a1 error) *MockIamClientService_UnassignAzureCloudIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignAzureCloudIdentity_Call) RunAndReturn(run func(*operations.UnassignAzureCloudIdentityParams, ...operations.ClientOption) (*operations.UnassignAzureCloudIdentityOK, error)) *MockIamClientService_UnassignAzureCloudIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignGroupResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignGroupResourceRole(params *operations.UnassignGroupResourceRoleParams, opts ...operations.ClientOption) (*operations.UnassignGroupResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignGroupResourceRole")
	}

	var r0 *operations.UnassignGroupResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignGroupResourceRoleParams, ...operations.ClientOption) (*operations.UnassignGroupResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignGroupResourceRoleParams, ...operations.ClientOption) *operations.UnassignGroupResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignGroupResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignGroupResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignGroupResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignGroupResourceRole'
type MockIamClientService_UnassignGroupResourceRole_Call struct {
	*mock.Call
}

// UnassignGroupResourceRole is a helper method to define mock.On call
//   - params *operations.UnassignGroupResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignGroupResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignGroupResourceRole_Call {
	return &MockIamClientService_UnassignGroupResourceRole_Call{Call: _e.mock.On("UnassignGroupResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignGroupResourceRole_Call) Run(run func(params *operations.UnassignGroupResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignGroupResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignGroupResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignGroupResourceRole_Call) Return(_a0 *operations.UnassignGroupResourceRoleOK, _a1 error) *MockIamClientService_UnassignGroupResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignGroupResourceRole_Call) RunAndReturn(run func(*operations.UnassignGroupResourceRoleParams, ...operations.ClientOption) (*operations.UnassignGroupResourceRoleOK, error)) *MockIamClientService_UnassignGroupResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignGroupRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignGroupRole(params *operations.UnassignGroupRoleParams, opts ...operations.ClientOption) (*operations.UnassignGroupRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignGroupRole")
	}

	var r0 *operations.UnassignGroupRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignGroupRoleParams, ...operations.ClientOption) (*operations.UnassignGroupRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignGroupRoleParams, ...operations.ClientOption) *operations.UnassignGroupRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignGroupRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignGroupRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignGroupRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignGroupRole'
type MockIamClientService_UnassignGroupRole_Call struct {
	*mock.Call
}

// UnassignGroupRole is a helper method to define mock.On call
//   - params *operations.UnassignGroupRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignGroupRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignGroupRole_Call {
	return &MockIamClientService_UnassignGroupRole_Call{Call: _e.mock.On("UnassignGroupRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignGroupRole_Call) Run(run func(params *operations.UnassignGroupRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignGroupRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignGroupRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignGroupRole_Call) Return(_a0 *operations.UnassignGroupRoleOK, _a1 error) *MockIamClientService_UnassignGroupRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignGroupRole_Call) RunAndReturn(run func(*operations.UnassignGroupRoleParams, ...operations.ClientOption) (*operations.UnassignGroupRoleOK, error)) *MockIamClientService_UnassignGroupRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignMachineUserResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignMachineUserResourceRole(params *operations.UnassignMachineUserResourceRoleParams, opts ...operations.ClientOption) (*operations.UnassignMachineUserResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignMachineUserResourceRole")
	}

	var r0 *operations.UnassignMachineUserResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignMachineUserResourceRoleParams, ...operations.ClientOption) (*operations.UnassignMachineUserResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignMachineUserResourceRoleParams, ...operations.ClientOption) *operations.UnassignMachineUserResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignMachineUserResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignMachineUserResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignMachineUserResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignMachineUserResourceRole'
type MockIamClientService_UnassignMachineUserResourceRole_Call struct {
	*mock.Call
}

// UnassignMachineUserResourceRole is a helper method to define mock.On call
//   - params *operations.UnassignMachineUserResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignMachineUserResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignMachineUserResourceRole_Call {
	return &MockIamClientService_UnassignMachineUserResourceRole_Call{Call: _e.mock.On("UnassignMachineUserResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignMachineUserResourceRole_Call) Run(run func(params *operations.UnassignMachineUserResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignMachineUserResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignMachineUserResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignMachineUserResourceRole_Call) Return(_a0 *operations.UnassignMachineUserResourceRoleOK, _a1 error) *MockIamClientService_UnassignMachineUserResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignMachineUserResourceRole_Call) RunAndReturn(run func(*operations.UnassignMachineUserResourceRoleParams, ...operations.ClientOption) (*operations.UnassignMachineUserResourceRoleOK, error)) *MockIamClientService_UnassignMachineUserResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignMachineUserRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignMachineUserRole(params *operations.UnassignMachineUserRoleParams, opts ...operations.ClientOption) (*operations.UnassignMachineUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignMachineUserRole")
	}

	var r0 *operations.UnassignMachineUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignMachineUserRoleParams, ...operations.ClientOption) (*operations.UnassignMachineUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignMachineUserRoleParams, ...operations.ClientOption) *operations.UnassignMachineUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignMachineUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignMachineUserRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignMachineUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignMachineUserRole'
type MockIamClientService_UnassignMachineUserRole_Call struct {
	*mock.Call
}

// UnassignMachineUserRole is a helper method to define mock.On call
//   - params *operations.UnassignMachineUserRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignMachineUserRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignMachineUserRole_Call {
	return &MockIamClientService_UnassignMachineUserRole_Call{Call: _e.mock.On("UnassignMachineUserRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignMachineUserRole_Call) Run(run func(params *operations.UnassignMachineUserRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignMachineUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignMachineUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignMachineUserRole_Call) Return(_a0 *operations.UnassignMachineUserRoleOK, _a1 error) *MockIamClientService_UnassignMachineUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignMachineUserRole_Call) RunAndReturn(run func(*operations.UnassignMachineUserRoleParams, ...operations.ClientOption) (*operations.UnassignMachineUserRoleOK, error)) *MockIamClientService_UnassignMachineUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignServicePrincipalAzureCloudIdentity provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignServicePrincipalAzureCloudIdentity(params *operations.UnassignServicePrincipalAzureCloudIdentityParams, opts ...operations.ClientOption) (*operations.UnassignServicePrincipalAzureCloudIdentityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignServicePrincipalAzureCloudIdentity")
	}

	var r0 *operations.UnassignServicePrincipalAzureCloudIdentityOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) (*operations.UnassignServicePrincipalAzureCloudIdentityOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) *operations.UnassignServicePrincipalAzureCloudIdentityOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignServicePrincipalAzureCloudIdentityOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignServicePrincipalAzureCloudIdentity'
type MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call struct {
	*mock.Call
}

// UnassignServicePrincipalAzureCloudIdentity is a helper method to define mock.On call
//   - params *operations.UnassignServicePrincipalAzureCloudIdentityParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignServicePrincipalAzureCloudIdentity(params interface{}, opts ...interface{}) *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call {
	return &MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call{Call: _e.mock.On("UnassignServicePrincipalAzureCloudIdentity",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call) Run(run func(params *operations.UnassignServicePrincipalAzureCloudIdentityParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignServicePrincipalAzureCloudIdentityParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call) Return(_a0 *operations.UnassignServicePrincipalAzureCloudIdentityOK, _a1 error) *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call) RunAndReturn(run func(*operations.UnassignServicePrincipalAzureCloudIdentityParams, ...operations.ClientOption) (*operations.UnassignServicePrincipalAzureCloudIdentityOK, error)) *MockIamClientService_UnassignServicePrincipalAzureCloudIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignUserResourceRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignUserResourceRole(params *operations.UnassignUserResourceRoleParams, opts ...operations.ClientOption) (*operations.UnassignUserResourceRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignUserResourceRole")
	}

	var r0 *operations.UnassignUserResourceRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignUserResourceRoleParams, ...operations.ClientOption) (*operations.UnassignUserResourceRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignUserResourceRoleParams, ...operations.ClientOption) *operations.UnassignUserResourceRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignUserResourceRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignUserResourceRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignUserResourceRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignUserResourceRole'
type MockIamClientService_UnassignUserResourceRole_Call struct {
	*mock.Call
}

// UnassignUserResourceRole is a helper method to define mock.On call
//   - params *operations.UnassignUserResourceRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignUserResourceRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignUserResourceRole_Call {
	return &MockIamClientService_UnassignUserResourceRole_Call{Call: _e.mock.On("UnassignUserResourceRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignUserResourceRole_Call) Run(run func(params *operations.UnassignUserResourceRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignUserResourceRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignUserResourceRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignUserResourceRole_Call) Return(_a0 *operations.UnassignUserResourceRoleOK, _a1 error) *MockIamClientService_UnassignUserResourceRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignUserResourceRole_Call) RunAndReturn(run func(*operations.UnassignUserResourceRoleParams, ...operations.ClientOption) (*operations.UnassignUserResourceRoleOK, error)) *MockIamClientService_UnassignUserResourceRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignUserRole provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnassignUserRole(params *operations.UnassignUserRoleParams, opts ...operations.ClientOption) (*operations.UnassignUserRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignUserRole")
	}

	var r0 *operations.UnassignUserRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnassignUserRoleParams, ...operations.ClientOption) (*operations.UnassignUserRoleOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnassignUserRoleParams, ...operations.ClientOption) *operations.UnassignUserRoleOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnassignUserRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnassignUserRoleParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnassignUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignUserRole'
type MockIamClientService_UnassignUserRole_Call struct {
	*mock.Call
}

// UnassignUserRole is a helper method to define mock.On call
//   - params *operations.UnassignUserRoleParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnassignUserRole(params interface{}, opts ...interface{}) *MockIamClientService_UnassignUserRole_Call {
	return &MockIamClientService_UnassignUserRole_Call{Call: _e.mock.On("UnassignUserRole",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnassignUserRole_Call) Run(run func(params *operations.UnassignUserRoleParams, opts ...operations.ClientOption)) *MockIamClientService_UnassignUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnassignUserRoleParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnassignUserRole_Call) Return(_a0 *operations.UnassignUserRoleOK, _a1 error) *MockIamClientService_UnassignUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnassignUserRole_Call) RunAndReturn(run func(*operations.UnassignUserRoleParams, ...operations.ClientOption) (*operations.UnassignUserRoleOK, error)) *MockIamClientService_UnassignUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockMachineUserInControlPlane provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnlockMachineUserInControlPlane(params *operations.UnlockMachineUserInControlPlaneParams, opts ...operations.ClientOption) (*operations.UnlockMachineUserInControlPlaneOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnlockMachineUserInControlPlane")
	}

	var r0 *operations.UnlockMachineUserInControlPlaneOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnlockMachineUserInControlPlaneParams, ...operations.ClientOption) (*operations.UnlockMachineUserInControlPlaneOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnlockMachineUserInControlPlaneParams, ...operations.ClientOption) *operations.UnlockMachineUserInControlPlaneOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnlockMachineUserInControlPlaneOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnlockMachineUserInControlPlaneParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnlockMachineUserInControlPlane_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockMachineUserInControlPlane'
type MockIamClientService_UnlockMachineUserInControlPlane_Call struct {
	*mock.Call
}

// UnlockMachineUserInControlPlane is a helper method to define mock.On call
//   - params *operations.UnlockMachineUserInControlPlaneParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnlockMachineUserInControlPlane(params interface{}, opts ...interface{}) *MockIamClientService_UnlockMachineUserInControlPlane_Call {
	return &MockIamClientService_UnlockMachineUserInControlPlane_Call{Call: _e.mock.On("UnlockMachineUserInControlPlane",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnlockMachineUserInControlPlane_Call) Run(run func(params *operations.UnlockMachineUserInControlPlaneParams, opts ...operations.ClientOption)) *MockIamClientService_UnlockMachineUserInControlPlane_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnlockMachineUserInControlPlaneParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnlockMachineUserInControlPlane_Call) Return(_a0 *operations.UnlockMachineUserInControlPlaneOK, _a1 error) *MockIamClientService_UnlockMachineUserInControlPlane_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnlockMachineUserInControlPlane_Call) RunAndReturn(run func(*operations.UnlockMachineUserInControlPlaneParams, ...operations.ClientOption) (*operations.UnlockMachineUserInControlPlaneOK, error)) *MockIamClientService_UnlockMachineUserInControlPlane_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockUserInControlPlane provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnlockUserInControlPlane(params *operations.UnlockUserInControlPlaneParams, opts ...operations.ClientOption) (*operations.UnlockUserInControlPlaneOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnlockUserInControlPlane")
	}

	var r0 *operations.UnlockUserInControlPlaneOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnlockUserInControlPlaneParams, ...operations.ClientOption) (*operations.UnlockUserInControlPlaneOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnlockUserInControlPlaneParams, ...operations.ClientOption) *operations.UnlockUserInControlPlaneOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnlockUserInControlPlaneOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnlockUserInControlPlaneParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnlockUserInControlPlane_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockUserInControlPlane'
type MockIamClientService_UnlockUserInControlPlane_Call struct {
	*mock.Call
}

// UnlockUserInControlPlane is a helper method to define mock.On call
//   - params *operations.UnlockUserInControlPlaneParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnlockUserInControlPlane(params interface{}, opts ...interface{}) *MockIamClientService_UnlockUserInControlPlane_Call {
	return &MockIamClientService_UnlockUserInControlPlane_Call{Call: _e.mock.On("UnlockUserInControlPlane",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnlockUserInControlPlane_Call) Run(run func(params *operations.UnlockUserInControlPlaneParams, opts ...operations.ClientOption)) *MockIamClientService_UnlockUserInControlPlane_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnlockUserInControlPlaneParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnlockUserInControlPlane_Call) Return(_a0 *operations.UnlockUserInControlPlaneOK, _a1 error) *MockIamClientService_UnlockUserInControlPlane_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnlockUserInControlPlane_Call) RunAndReturn(run func(*operations.UnlockUserInControlPlaneParams, ...operations.ClientOption) (*operations.UnlockUserInControlPlaneOK, error)) *MockIamClientService_UnlockUserInControlPlane_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetWorkloadPasswordMinLifetime provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnsetWorkloadPasswordMinLifetime(params *operations.UnsetWorkloadPasswordMinLifetimeParams, opts ...operations.ClientOption) (*operations.UnsetWorkloadPasswordMinLifetimeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnsetWorkloadPasswordMinLifetime")
	}

	var r0 *operations.UnsetWorkloadPasswordMinLifetimeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnsetWorkloadPasswordMinLifetimeParams, ...operations.ClientOption) (*operations.UnsetWorkloadPasswordMinLifetimeOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnsetWorkloadPasswordMinLifetimeParams, ...operations.ClientOption) *operations.UnsetWorkloadPasswordMinLifetimeOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnsetWorkloadPasswordMinLifetimeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnsetWorkloadPasswordMinLifetimeParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetWorkloadPasswordMinLifetime'
type MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call struct {
	*mock.Call
}

// UnsetWorkloadPasswordMinLifetime is a helper method to define mock.On call
//   - params *operations.UnsetWorkloadPasswordMinLifetimeParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnsetWorkloadPasswordMinLifetime(params interface{}, opts ...interface{}) *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call {
	return &MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call{Call: _e.mock.On("UnsetWorkloadPasswordMinLifetime",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call) Run(run func(params *operations.UnsetWorkloadPasswordMinLifetimeParams, opts ...operations.ClientOption)) *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnsetWorkloadPasswordMinLifetimeParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call) Return(_a0 *operations.UnsetWorkloadPasswordMinLifetimeOK, _a1 error) *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call) RunAndReturn(run func(*operations.UnsetWorkloadPasswordMinLifetimeParams, ...operations.ClientOption) (*operations.UnsetWorkloadPasswordMinLifetimeOK, error)) *MockIamClientService_UnsetWorkloadPasswordMinLifetime_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetWorkloadPasswordPolicy provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UnsetWorkloadPasswordPolicy(params *operations.UnsetWorkloadPasswordPolicyParams, opts ...operations.ClientOption) (*operations.UnsetWorkloadPasswordPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnsetWorkloadPasswordPolicy")
	}

	var r0 *operations.UnsetWorkloadPasswordPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UnsetWorkloadPasswordPolicyParams, ...operations.ClientOption) (*operations.UnsetWorkloadPasswordPolicyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UnsetWorkloadPasswordPolicyParams, ...operations.ClientOption) *operations.UnsetWorkloadPasswordPolicyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UnsetWorkloadPasswordPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UnsetWorkloadPasswordPolicyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UnsetWorkloadPasswordPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetWorkloadPasswordPolicy'
type MockIamClientService_UnsetWorkloadPasswordPolicy_Call struct {
	*mock.Call
}

// UnsetWorkloadPasswordPolicy is a helper method to define mock.On call
//   - params *operations.UnsetWorkloadPasswordPolicyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UnsetWorkloadPasswordPolicy(params interface{}, opts ...interface{}) *MockIamClientService_UnsetWorkloadPasswordPolicy_Call {
	return &MockIamClientService_UnsetWorkloadPasswordPolicy_Call{Call: _e.mock.On("UnsetWorkloadPasswordPolicy",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UnsetWorkloadPasswordPolicy_Call) Run(run func(params *operations.UnsetWorkloadPasswordPolicyParams, opts ...operations.ClientOption)) *MockIamClientService_UnsetWorkloadPasswordPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UnsetWorkloadPasswordPolicyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UnsetWorkloadPasswordPolicy_Call) Return(_a0 *operations.UnsetWorkloadPasswordPolicyOK, _a1 error) *MockIamClientService_UnsetWorkloadPasswordPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UnsetWorkloadPasswordPolicy_Call) RunAndReturn(run func(*operations.UnsetWorkloadPasswordPolicyParams, ...operations.ClientOption) (*operations.UnsetWorkloadPasswordPolicyOK, error)) *MockIamClientService_UnsetWorkloadPasswordPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessKey provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UpdateAccessKey(params *operations.UpdateAccessKeyParams, opts ...operations.ClientOption) (*operations.UpdateAccessKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessKey")
	}

	var r0 *operations.UpdateAccessKeyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UpdateAccessKeyParams, ...operations.ClientOption) (*operations.UpdateAccessKeyOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UpdateAccessKeyParams, ...operations.ClientOption) *operations.UpdateAccessKeyOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateAccessKeyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UpdateAccessKeyParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UpdateAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessKey'
type MockIamClientService_UpdateAccessKey_Call struct {
	*mock.Call
}

// UpdateAccessKey is a helper method to define mock.On call
//   - params *operations.UpdateAccessKeyParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UpdateAccessKey(params interface{}, opts ...interface{}) *MockIamClientService_UpdateAccessKey_Call {
	return &MockIamClientService_UpdateAccessKey_Call{Call: _e.mock.On("UpdateAccessKey",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UpdateAccessKey_Call) Run(run func(params *operations.UpdateAccessKeyParams, opts ...operations.ClientOption)) *MockIamClientService_UpdateAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UpdateAccessKeyParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UpdateAccessKey_Call) Return(_a0 *operations.UpdateAccessKeyOK, _a1 error) *MockIamClientService_UpdateAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UpdateAccessKey_Call) RunAndReturn(run func(*operations.UpdateAccessKeyParams, ...operations.ClientOption) (*operations.UpdateAccessKeyOK, error)) *MockIamClientService_UpdateAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UpdateGroup(params *operations.UpdateGroupParams, opts ...operations.ClientOption) (*operations.UpdateGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *operations.UpdateGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UpdateGroupParams, ...operations.ClientOption) (*operations.UpdateGroupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UpdateGroupParams, ...operations.ClientOption) *operations.UpdateGroupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UpdateGroupParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockIamClientService_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - params *operations.UpdateGroupParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UpdateGroup(params interface{}, opts ...interface{}) *MockIamClientService_UpdateGroup_Call {
	return &MockIamClientService_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UpdateGroup_Call) Run(run func(params *operations.UpdateGroupParams, opts ...operations.ClientOption)) *MockIamClientService_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UpdateGroupParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UpdateGroup_Call) Return(_a0 *operations.UpdateGroupOK, _a1 error) *MockIamClientService_UpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UpdateGroup_Call) RunAndReturn(run func(*operations.UpdateGroupParams, ...operations.ClientOption) (*operations.UpdateGroupOK, error)) *MockIamClientService_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSamlProvider provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UpdateSamlProvider(params *operations.UpdateSamlProviderParams, opts ...operations.ClientOption) (*operations.UpdateSamlProviderOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSamlProvider")
	}

	var r0 *operations.UpdateSamlProviderOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UpdateSamlProviderParams, ...operations.ClientOption) (*operations.UpdateSamlProviderOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UpdateSamlProviderParams, ...operations.ClientOption) *operations.UpdateSamlProviderOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateSamlProviderOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UpdateSamlProviderParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UpdateSamlProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSamlProvider'
type MockIamClientService_UpdateSamlProvider_Call struct {
	*mock.Call
}

// UpdateSamlProvider is a helper method to define mock.On call
//   - params *operations.UpdateSamlProviderParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UpdateSamlProvider(params interface{}, opts ...interface{}) *MockIamClientService_UpdateSamlProvider_Call {
	return &MockIamClientService_UpdateSamlProvider_Call{Call: _e.mock.On("UpdateSamlProvider",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UpdateSamlProvider_Call) Run(run func(params *operations.UpdateSamlProviderParams, opts ...operations.ClientOption)) *MockIamClientService_UpdateSamlProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UpdateSamlProviderParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UpdateSamlProvider_Call) Return(_a0 *operations.UpdateSamlProviderOK, _a1 error) *MockIamClientService_UpdateSamlProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UpdateSamlProvider_Call) RunAndReturn(run func(*operations.UpdateSamlProviderParams, ...operations.ClientOption) (*operations.UpdateSamlProviderOK, error)) *MockIamClientService_UpdateSamlProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: params, opts
func (_m *MockIamClientService) UpdateUser(params *operations.UpdateUserParams, opts ...operations.ClientOption) (*operations.UpdateUserOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *operations.UpdateUserOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.UpdateUserParams, ...operations.ClientOption) (*operations.UpdateUserOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.UpdateUserParams, ...operations.ClientOption) *operations.UpdateUserOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpdateUserOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.UpdateUserParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIamClientService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIamClientService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - params *operations.UpdateUserParams
//   - opts ...operations.ClientOption
func (_e *MockIamClientService_Expecter) UpdateUser(params interface{}, opts ...interface{}) *MockIamClientService_UpdateUser_Call {
	return &MockIamClientService_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockIamClientService_UpdateUser_Call) Run(run func(params *operations.UpdateUserParams, opts ...operations.ClientOption)) *MockIamClientService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.UpdateUserParams), variadicArgs...)
	})
	return _c
}

func (_c *MockIamClientService_UpdateUser_Call) Return(_a0 *operations.UpdateUserOK, _a1 error) *MockIamClientService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIamClientService_UpdateUser_Call) RunAndReturn(run func(*operations.UpdateUserParams, ...operations.ClientOption) (*operations.UpdateUserOK, error)) *MockIamClientService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIamClientService creates a new instance of MockIamClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIamClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIamClientService {
	mock := &MockIamClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
